/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AAndAndExpression extends PAndExpression
{
    private PAndExpression _andExpression_;
    private TAndTokenFull _andTokenFull_;
    private PComparison _comparison_;

    public AAndAndExpression()
    {
        // Constructor
    }

    public AAndAndExpression(
        @SuppressWarnings("hiding") PAndExpression _andExpression_,
        @SuppressWarnings("hiding") TAndTokenFull _andTokenFull_,
        @SuppressWarnings("hiding") PComparison _comparison_)
    {
        // Constructor
        setAndExpression(_andExpression_);

        setAndTokenFull(_andTokenFull_);

        setComparison(_comparison_);

    }

    @Override
    public Object clone()
    {
        return new AAndAndExpression(
            cloneNode(this._andExpression_),
            cloneNode(this._andTokenFull_),
            cloneNode(this._comparison_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndAndExpression(this);
    }

    public PAndExpression getAndExpression()
    {
        return this._andExpression_;
    }

    public void setAndExpression(PAndExpression node)
    {
        if(this._andExpression_ != null)
        {
            this._andExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._andExpression_ = node;
    }

    public TAndTokenFull getAndTokenFull()
    {
        return this._andTokenFull_;
    }

    public void setAndTokenFull(TAndTokenFull node)
    {
        if(this._andTokenFull_ != null)
        {
            this._andTokenFull_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._andTokenFull_ = node;
    }

    public PComparison getComparison()
    {
        return this._comparison_;
    }

    public void setComparison(PComparison node)
    {
        if(this._comparison_ != null)
        {
            this._comparison_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparison_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._andExpression_)
            + toString(this._andTokenFull_)
            + toString(this._comparison_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._andExpression_ == child)
        {
            this._andExpression_ = null;
            return;
        }

        if(this._andTokenFull_ == child)
        {
            this._andTokenFull_ = null;
            return;
        }

        if(this._comparison_ == child)
        {
            this._comparison_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._andExpression_ == oldChild)
        {
            setAndExpression((PAndExpression) newChild);
            return;
        }

        if(this._andTokenFull_ == oldChild)
        {
            setAndTokenFull((TAndTokenFull) newChild);
            return;
        }

        if(this._comparison_ == oldChild)
        {
            setComparison((PComparison) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
