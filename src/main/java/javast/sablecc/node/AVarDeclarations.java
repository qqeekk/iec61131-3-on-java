/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AVarDeclarations extends PVarDeclarations
{
    private TVarToken _varToken_;
    private PConstantTokenOrRetain _constantTokenOrRetain_;
    private PVarInitDecls _varInitDecls_;
    private TEndVarToken _endVarToken_;

    public AVarDeclarations()
    {
        // Constructor
    }

    public AVarDeclarations(
        @SuppressWarnings("hiding") TVarToken _varToken_,
        @SuppressWarnings("hiding") PConstantTokenOrRetain _constantTokenOrRetain_,
        @SuppressWarnings("hiding") PVarInitDecls _varInitDecls_,
        @SuppressWarnings("hiding") TEndVarToken _endVarToken_)
    {
        // Constructor
        setVarToken(_varToken_);

        setConstantTokenOrRetain(_constantTokenOrRetain_);

        setVarInitDecls(_varInitDecls_);

        setEndVarToken(_endVarToken_);

    }

    @Override
    public Object clone()
    {
        return new AVarDeclarations(
            cloneNode(this._varToken_),
            cloneNode(this._constantTokenOrRetain_),
            cloneNode(this._varInitDecls_),
            cloneNode(this._endVarToken_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarDeclarations(this);
    }

    public TVarToken getVarToken()
    {
        return this._varToken_;
    }

    public void setVarToken(TVarToken node)
    {
        if(this._varToken_ != null)
        {
            this._varToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varToken_ = node;
    }

    public PConstantTokenOrRetain getConstantTokenOrRetain()
    {
        return this._constantTokenOrRetain_;
    }

    public void setConstantTokenOrRetain(PConstantTokenOrRetain node)
    {
        if(this._constantTokenOrRetain_ != null)
        {
            this._constantTokenOrRetain_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._constantTokenOrRetain_ = node;
    }

    public PVarInitDecls getVarInitDecls()
    {
        return this._varInitDecls_;
    }

    public void setVarInitDecls(PVarInitDecls node)
    {
        if(this._varInitDecls_ != null)
        {
            this._varInitDecls_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varInitDecls_ = node;
    }

    public TEndVarToken getEndVarToken()
    {
        return this._endVarToken_;
    }

    public void setEndVarToken(TEndVarToken node)
    {
        if(this._endVarToken_ != null)
        {
            this._endVarToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endVarToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._varToken_)
            + toString(this._constantTokenOrRetain_)
            + toString(this._varInitDecls_)
            + toString(this._endVarToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._varToken_ == child)
        {
            this._varToken_ = null;
            return;
        }

        if(this._constantTokenOrRetain_ == child)
        {
            this._constantTokenOrRetain_ = null;
            return;
        }

        if(this._varInitDecls_ == child)
        {
            this._varInitDecls_ = null;
            return;
        }

        if(this._endVarToken_ == child)
        {
            this._endVarToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._varToken_ == oldChild)
        {
            setVarToken((TVarToken) newChild);
            return;
        }

        if(this._constantTokenOrRetain_ == oldChild)
        {
            setConstantTokenOrRetain((PConstantTokenOrRetain) newChild);
            return;
        }

        if(this._varInitDecls_ == oldChild)
        {
            setVarInitDecls((PVarInitDecls) newChild);
            return;
        }

        if(this._endVarToken_ == oldChild)
        {
            setEndVarToken((TEndVarToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
