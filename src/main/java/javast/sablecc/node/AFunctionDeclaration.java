/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import java.util.*;
import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionDeclaration extends PFunctionDeclaration
{
    private TFunctionToken _functionToken_;
    private PFunctionName _functionName_;
    private TColon _colon_;
    private PReturnTypeName _returnTypeName_;
    private final LinkedList<PFunctionVarDeclaration> _functionVarDeclaration_ = new LinkedList<PFunctionVarDeclaration>();
    private PFunctionBody _functionBody_;
    private TEndFunctionToken _endFunctionToken_;

    public AFunctionDeclaration()
    {
        // Constructor
    }

    public AFunctionDeclaration(
        @SuppressWarnings("hiding") TFunctionToken _functionToken_,
        @SuppressWarnings("hiding") PFunctionName _functionName_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PReturnTypeName _returnTypeName_,
        @SuppressWarnings("hiding") List<?> _functionVarDeclaration_,
        @SuppressWarnings("hiding") PFunctionBody _functionBody_,
        @SuppressWarnings("hiding") TEndFunctionToken _endFunctionToken_)
    {
        // Constructor
        setFunctionToken(_functionToken_);

        setFunctionName(_functionName_);

        setColon(_colon_);

        setReturnTypeName(_returnTypeName_);

        setFunctionVarDeclaration(_functionVarDeclaration_);

        setFunctionBody(_functionBody_);

        setEndFunctionToken(_endFunctionToken_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionDeclaration(
            cloneNode(this._functionToken_),
            cloneNode(this._functionName_),
            cloneNode(this._colon_),
            cloneNode(this._returnTypeName_),
            cloneList(this._functionVarDeclaration_),
            cloneNode(this._functionBody_),
            cloneNode(this._endFunctionToken_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionDeclaration(this);
    }

    public TFunctionToken getFunctionToken()
    {
        return this._functionToken_;
    }

    public void setFunctionToken(TFunctionToken node)
    {
        if(this._functionToken_ != null)
        {
            this._functionToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionToken_ = node;
    }

    public PFunctionName getFunctionName()
    {
        return this._functionName_;
    }

    public void setFunctionName(PFunctionName node)
    {
        if(this._functionName_ != null)
        {
            this._functionName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionName_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PReturnTypeName getReturnTypeName()
    {
        return this._returnTypeName_;
    }

    public void setReturnTypeName(PReturnTypeName node)
    {
        if(this._returnTypeName_ != null)
        {
            this._returnTypeName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returnTypeName_ = node;
    }

    public LinkedList<PFunctionVarDeclaration> getFunctionVarDeclaration()
    {
        return this._functionVarDeclaration_;
    }

    public void setFunctionVarDeclaration(List<?> list)
    {
        for(PFunctionVarDeclaration e : this._functionVarDeclaration_)
        {
            e.parent(null);
        }
        this._functionVarDeclaration_.clear();

        for(Object obj_e : list)
        {
            PFunctionVarDeclaration e = (PFunctionVarDeclaration) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._functionVarDeclaration_.add(e);
        }
    }

    public PFunctionBody getFunctionBody()
    {
        return this._functionBody_;
    }

    public void setFunctionBody(PFunctionBody node)
    {
        if(this._functionBody_ != null)
        {
            this._functionBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionBody_ = node;
    }

    public TEndFunctionToken getEndFunctionToken()
    {
        return this._endFunctionToken_;
    }

    public void setEndFunctionToken(TEndFunctionToken node)
    {
        if(this._endFunctionToken_ != null)
        {
            this._endFunctionToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endFunctionToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._functionToken_)
            + toString(this._functionName_)
            + toString(this._colon_)
            + toString(this._returnTypeName_)
            + toString(this._functionVarDeclaration_)
            + toString(this._functionBody_)
            + toString(this._endFunctionToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._functionToken_ == child)
        {
            this._functionToken_ = null;
            return;
        }

        if(this._functionName_ == child)
        {
            this._functionName_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._returnTypeName_ == child)
        {
            this._returnTypeName_ = null;
            return;
        }

        if(this._functionVarDeclaration_.remove(child))
        {
            return;
        }

        if(this._functionBody_ == child)
        {
            this._functionBody_ = null;
            return;
        }

        if(this._endFunctionToken_ == child)
        {
            this._endFunctionToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._functionToken_ == oldChild)
        {
            setFunctionToken((TFunctionToken) newChild);
            return;
        }

        if(this._functionName_ == oldChild)
        {
            setFunctionName((PFunctionName) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._returnTypeName_ == oldChild)
        {
            setReturnTypeName((PReturnTypeName) newChild);
            return;
        }

        for(ListIterator<PFunctionVarDeclaration> i = this._functionVarDeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFunctionVarDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._functionBody_ == oldChild)
        {
            setFunctionBody((PFunctionBody) newChild);
            return;
        }

        if(this._endFunctionToken_ == oldChild)
        {
            setEndFunctionToken((TEndFunctionToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
