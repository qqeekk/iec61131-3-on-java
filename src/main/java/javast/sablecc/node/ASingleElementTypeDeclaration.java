/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASingleElementTypeDeclaration extends PSingleElementTypeDeclaration
{
    private PSimpleTypeDeclaration _simpleTypeDeclaration_;

    public ASingleElementTypeDeclaration()
    {
        // Constructor
    }

    public ASingleElementTypeDeclaration(
        @SuppressWarnings("hiding") PSimpleTypeDeclaration _simpleTypeDeclaration_)
    {
        // Constructor
        setSimpleTypeDeclaration(_simpleTypeDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new ASingleElementTypeDeclaration(
            cloneNode(this._simpleTypeDeclaration_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASingleElementTypeDeclaration(this);
    }

    public PSimpleTypeDeclaration getSimpleTypeDeclaration()
    {
        return this._simpleTypeDeclaration_;
    }

    public void setSimpleTypeDeclaration(PSimpleTypeDeclaration node)
    {
        if(this._simpleTypeDeclaration_ != null)
        {
            this._simpleTypeDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleTypeDeclaration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleTypeDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleTypeDeclaration_ == child)
        {
            this._simpleTypeDeclaration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleTypeDeclaration_ == oldChild)
        {
            setSimpleTypeDeclaration((PSimpleTypeDeclaration) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
