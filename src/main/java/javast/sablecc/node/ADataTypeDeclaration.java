/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import java.util.*;
import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ADataTypeDeclaration extends PDataTypeDeclaration
{
    private TTypeToken _typeToken_;
    private final LinkedList<PDataTypeDeclarationElement> _dataTypeDeclarationElement_ = new LinkedList<PDataTypeDeclarationElement>();
    private TEndTypeToken _endTypeToken_;

    public ADataTypeDeclaration()
    {
        // Constructor
    }

    public ADataTypeDeclaration(
        @SuppressWarnings("hiding") TTypeToken _typeToken_,
        @SuppressWarnings("hiding") List<?> _dataTypeDeclarationElement_,
        @SuppressWarnings("hiding") TEndTypeToken _endTypeToken_)
    {
        // Constructor
        setTypeToken(_typeToken_);

        setDataTypeDeclarationElement(_dataTypeDeclarationElement_);

        setEndTypeToken(_endTypeToken_);

    }

    @Override
    public Object clone()
    {
        return new ADataTypeDeclaration(
            cloneNode(this._typeToken_),
            cloneList(this._dataTypeDeclarationElement_),
            cloneNode(this._endTypeToken_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADataTypeDeclaration(this);
    }

    public TTypeToken getTypeToken()
    {
        return this._typeToken_;
    }

    public void setTypeToken(TTypeToken node)
    {
        if(this._typeToken_ != null)
        {
            this._typeToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeToken_ = node;
    }

    public LinkedList<PDataTypeDeclarationElement> getDataTypeDeclarationElement()
    {
        return this._dataTypeDeclarationElement_;
    }

    public void setDataTypeDeclarationElement(List<?> list)
    {
        for(PDataTypeDeclarationElement e : this._dataTypeDeclarationElement_)
        {
            e.parent(null);
        }
        this._dataTypeDeclarationElement_.clear();

        for(Object obj_e : list)
        {
            PDataTypeDeclarationElement e = (PDataTypeDeclarationElement) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._dataTypeDeclarationElement_.add(e);
        }
    }

    public TEndTypeToken getEndTypeToken()
    {
        return this._endTypeToken_;
    }

    public void setEndTypeToken(TEndTypeToken node)
    {
        if(this._endTypeToken_ != null)
        {
            this._endTypeToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endTypeToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typeToken_)
            + toString(this._dataTypeDeclarationElement_)
            + toString(this._endTypeToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typeToken_ == child)
        {
            this._typeToken_ = null;
            return;
        }

        if(this._dataTypeDeclarationElement_.remove(child))
        {
            return;
        }

        if(this._endTypeToken_ == child)
        {
            this._endTypeToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._typeToken_ == oldChild)
        {
            setTypeToken((TTypeToken) newChild);
            return;
        }

        for(ListIterator<PDataTypeDeclarationElement> i = this._dataTypeDeclarationElement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDataTypeDeclarationElement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endTypeToken_ == oldChild)
        {
            setEndTypeToken((TEndTypeToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
