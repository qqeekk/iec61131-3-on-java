/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ALocatedVarDecl extends PLocatedVarDecl
{
    private TIdentifier _identifier_;
    private PLocation _location_;
    private TColon _colon_;
    private PLocatedVarSpecInit _locatedVarSpecInit_;

    public ALocatedVarDecl()
    {
        // Constructor
    }

    public ALocatedVarDecl(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PLocation _location_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PLocatedVarSpecInit _locatedVarSpecInit_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setLocation(_location_);

        setColon(_colon_);

        setLocatedVarSpecInit(_locatedVarSpecInit_);

    }

    @Override
    public Object clone()
    {
        return new ALocatedVarDecl(
            cloneNode(this._identifier_),
            cloneNode(this._location_),
            cloneNode(this._colon_),
            cloneNode(this._locatedVarSpecInit_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALocatedVarDecl(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PLocation getLocation()
    {
        return this._location_;
    }

    public void setLocation(PLocation node)
    {
        if(this._location_ != null)
        {
            this._location_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._location_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PLocatedVarSpecInit getLocatedVarSpecInit()
    {
        return this._locatedVarSpecInit_;
    }

    public void setLocatedVarSpecInit(PLocatedVarSpecInit node)
    {
        if(this._locatedVarSpecInit_ != null)
        {
            this._locatedVarSpecInit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._locatedVarSpecInit_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._location_)
            + toString(this._colon_)
            + toString(this._locatedVarSpecInit_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._location_ == child)
        {
            this._location_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._locatedVarSpecInit_ == child)
        {
            this._locatedVarSpecInit_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._location_ == oldChild)
        {
            setLocation((PLocation) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._locatedVarSpecInit_ == oldChild)
        {
            setLocatedVarSpecInit((PLocatedVarSpecInit) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
