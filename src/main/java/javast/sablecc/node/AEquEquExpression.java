/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AEquEquExpression extends PEquExpression
{
    private PEquExpression _equExpression_;
    private TComparisonOperator _comparisonOperator_;
    private PAddExpression _addExpression_;

    public AEquEquExpression()
    {
        // Constructor
    }

    public AEquEquExpression(
        @SuppressWarnings("hiding") PEquExpression _equExpression_,
        @SuppressWarnings("hiding") TComparisonOperator _comparisonOperator_,
        @SuppressWarnings("hiding") PAddExpression _addExpression_)
    {
        // Constructor
        setEquExpression(_equExpression_);

        setComparisonOperator(_comparisonOperator_);

        setAddExpression(_addExpression_);

    }

    @Override
    public Object clone()
    {
        return new AEquEquExpression(
            cloneNode(this._equExpression_),
            cloneNode(this._comparisonOperator_),
            cloneNode(this._addExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEquEquExpression(this);
    }

    public PEquExpression getEquExpression()
    {
        return this._equExpression_;
    }

    public void setEquExpression(PEquExpression node)
    {
        if(this._equExpression_ != null)
        {
            this._equExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equExpression_ = node;
    }

    public TComparisonOperator getComparisonOperator()
    {
        return this._comparisonOperator_;
    }

    public void setComparisonOperator(TComparisonOperator node)
    {
        if(this._comparisonOperator_ != null)
        {
            this._comparisonOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparisonOperator_ = node;
    }

    public PAddExpression getAddExpression()
    {
        return this._addExpression_;
    }

    public void setAddExpression(PAddExpression node)
    {
        if(this._addExpression_ != null)
        {
            this._addExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._addExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._equExpression_)
            + toString(this._comparisonOperator_)
            + toString(this._addExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._equExpression_ == child)
        {
            this._equExpression_ = null;
            return;
        }

        if(this._comparisonOperator_ == child)
        {
            this._comparisonOperator_ = null;
            return;
        }

        if(this._addExpression_ == child)
        {
            this._addExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._equExpression_ == oldChild)
        {
            setEquExpression((PEquExpression) newChild);
            return;
        }

        if(this._comparisonOperator_ == oldChild)
        {
            setComparisonOperator((TComparisonOperator) newChild);
            return;
        }

        if(this._addExpression_ == oldChild)
        {
            setAddExpression((PAddExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
