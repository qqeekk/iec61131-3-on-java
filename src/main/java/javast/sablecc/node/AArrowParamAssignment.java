/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AArrowParamAssignment extends PParamAssignment
{
    private TNotToken _notToken_;
    private TIdentifier _identifier_;
    private TArrowToken _arrowToken_;
    private PVariable _variable_;

    public AArrowParamAssignment()
    {
        // Constructor
    }

    public AArrowParamAssignment(
        @SuppressWarnings("hiding") TNotToken _notToken_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TArrowToken _arrowToken_,
        @SuppressWarnings("hiding") PVariable _variable_)
    {
        // Constructor
        setNotToken(_notToken_);

        setIdentifier(_identifier_);

        setArrowToken(_arrowToken_);

        setVariable(_variable_);

    }

    @Override
    public Object clone()
    {
        return new AArrowParamAssignment(
            cloneNode(this._notToken_),
            cloneNode(this._identifier_),
            cloneNode(this._arrowToken_),
            cloneNode(this._variable_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrowParamAssignment(this);
    }

    public TNotToken getNotToken()
    {
        return this._notToken_;
    }

    public void setNotToken(TNotToken node)
    {
        if(this._notToken_ != null)
        {
            this._notToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notToken_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TArrowToken getArrowToken()
    {
        return this._arrowToken_;
    }

    public void setArrowToken(TArrowToken node)
    {
        if(this._arrowToken_ != null)
        {
            this._arrowToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrowToken_ = node;
    }

    public PVariable getVariable()
    {
        return this._variable_;
    }

    public void setVariable(PVariable node)
    {
        if(this._variable_ != null)
        {
            this._variable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variable_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._notToken_)
            + toString(this._identifier_)
            + toString(this._arrowToken_)
            + toString(this._variable_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._notToken_ == child)
        {
            this._notToken_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._arrowToken_ == child)
        {
            this._arrowToken_ = null;
            return;
        }

        if(this._variable_ == child)
        {
            this._variable_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._notToken_ == oldChild)
        {
            setNotToken((TNotToken) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._arrowToken_ == oldChild)
        {
            setArrowToken((TArrowToken) newChild);
            return;
        }

        if(this._variable_ == oldChild)
        {
            setVariable((PVariable) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
