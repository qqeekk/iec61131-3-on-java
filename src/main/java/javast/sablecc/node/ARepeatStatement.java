/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ARepeatStatement extends PRepeatStatement
{
    private TRepeatToken _repeatToken_;
    private PStatementList _statementList_;
    private TUntilToken _untilToken_;
    private PExpression _expression_;
    private TEndRepeatToken _endRepeatToken_;

    public ARepeatStatement()
    {
        // Constructor
    }

    public ARepeatStatement(
        @SuppressWarnings("hiding") TRepeatToken _repeatToken_,
        @SuppressWarnings("hiding") PStatementList _statementList_,
        @SuppressWarnings("hiding") TUntilToken _untilToken_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TEndRepeatToken _endRepeatToken_)
    {
        // Constructor
        setRepeatToken(_repeatToken_);

        setStatementList(_statementList_);

        setUntilToken(_untilToken_);

        setExpression(_expression_);

        setEndRepeatToken(_endRepeatToken_);

    }

    @Override
    public Object clone()
    {
        return new ARepeatStatement(
            cloneNode(this._repeatToken_),
            cloneNode(this._statementList_),
            cloneNode(this._untilToken_),
            cloneNode(this._expression_),
            cloneNode(this._endRepeatToken_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARepeatStatement(this);
    }

    public TRepeatToken getRepeatToken()
    {
        return this._repeatToken_;
    }

    public void setRepeatToken(TRepeatToken node)
    {
        if(this._repeatToken_ != null)
        {
            this._repeatToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._repeatToken_ = node;
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    public TUntilToken getUntilToken()
    {
        return this._untilToken_;
    }

    public void setUntilToken(TUntilToken node)
    {
        if(this._untilToken_ != null)
        {
            this._untilToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._untilToken_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TEndRepeatToken getEndRepeatToken()
    {
        return this._endRepeatToken_;
    }

    public void setEndRepeatToken(TEndRepeatToken node)
    {
        if(this._endRepeatToken_ != null)
        {
            this._endRepeatToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endRepeatToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._repeatToken_)
            + toString(this._statementList_)
            + toString(this._untilToken_)
            + toString(this._expression_)
            + toString(this._endRepeatToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._repeatToken_ == child)
        {
            this._repeatToken_ = null;
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        if(this._untilToken_ == child)
        {
            this._untilToken_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._endRepeatToken_ == child)
        {
            this._endRepeatToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._repeatToken_ == oldChild)
        {
            setRepeatToken((TRepeatToken) newChild);
            return;
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        if(this._untilToken_ == oldChild)
        {
            setUntilToken((TUntilToken) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._endRepeatToken_ == oldChild)
        {
            setEndRepeatToken((TEndRepeatToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
