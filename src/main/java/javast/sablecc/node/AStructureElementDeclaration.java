/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AStructureElementDeclaration extends PStructureElementDeclaration
{
    private PStructureElementName _structureElementName_;
    private TColon _colon_;
    private PStructureElementInit _structureElementInit_;

    public AStructureElementDeclaration()
    {
        // Constructor
    }

    public AStructureElementDeclaration(
        @SuppressWarnings("hiding") PStructureElementName _structureElementName_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PStructureElementInit _structureElementInit_)
    {
        // Constructor
        setStructureElementName(_structureElementName_);

        setColon(_colon_);

        setStructureElementInit(_structureElementInit_);

    }

    @Override
    public Object clone()
    {
        return new AStructureElementDeclaration(
            cloneNode(this._structureElementName_),
            cloneNode(this._colon_),
            cloneNode(this._structureElementInit_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStructureElementDeclaration(this);
    }

    public PStructureElementName getStructureElementName()
    {
        return this._structureElementName_;
    }

    public void setStructureElementName(PStructureElementName node)
    {
        if(this._structureElementName_ != null)
        {
            this._structureElementName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._structureElementName_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PStructureElementInit getStructureElementInit()
    {
        return this._structureElementInit_;
    }

    public void setStructureElementInit(PStructureElementInit node)
    {
        if(this._structureElementInit_ != null)
        {
            this._structureElementInit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._structureElementInit_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._structureElementName_)
            + toString(this._colon_)
            + toString(this._structureElementInit_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._structureElementName_ == child)
        {
            this._structureElementName_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._structureElementInit_ == child)
        {
            this._structureElementInit_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._structureElementName_ == oldChild)
        {
            setStructureElementName((PStructureElementName) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._structureElementInit_ == oldChild)
        {
            setStructureElementInit((PStructureElementInit) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
