/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AElseifStatement extends PElseifStatement
{
    private TElseIfToken _elseIfToken_;
    private PExpression _expression_;
    private TThenToken _thenToken_;
    private PStatementList _statementList_;

    public AElseifStatement()
    {
        // Constructor
    }

    public AElseifStatement(
        @SuppressWarnings("hiding") TElseIfToken _elseIfToken_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TThenToken _thenToken_,
        @SuppressWarnings("hiding") PStatementList _statementList_)
    {
        // Constructor
        setElseIfToken(_elseIfToken_);

        setExpression(_expression_);

        setThenToken(_thenToken_);

        setStatementList(_statementList_);

    }

    @Override
    public Object clone()
    {
        return new AElseifStatement(
            cloneNode(this._elseIfToken_),
            cloneNode(this._expression_),
            cloneNode(this._thenToken_),
            cloneNode(this._statementList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElseifStatement(this);
    }

    public TElseIfToken getElseIfToken()
    {
        return this._elseIfToken_;
    }

    public void setElseIfToken(TElseIfToken node)
    {
        if(this._elseIfToken_ != null)
        {
            this._elseIfToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseIfToken_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TThenToken getThenToken()
    {
        return this._thenToken_;
    }

    public void setThenToken(TThenToken node)
    {
        if(this._thenToken_ != null)
        {
            this._thenToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenToken_ = node;
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._elseIfToken_)
            + toString(this._expression_)
            + toString(this._thenToken_)
            + toString(this._statementList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._elseIfToken_ == child)
        {
            this._elseIfToken_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._thenToken_ == child)
        {
            this._thenToken_ = null;
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._elseIfToken_ == oldChild)
        {
            setElseIfToken((TElseIfToken) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._thenToken_ == oldChild)
        {
            setThenToken((TThenToken) newChild);
            return;
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
