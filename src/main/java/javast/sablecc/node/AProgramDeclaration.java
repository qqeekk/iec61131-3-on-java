/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import java.util.*;
import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AProgramDeclaration extends PProgramDeclaration
{
    private TProgramToken _programToken_;
    private PProgramTypeName _programTypeName_;
    private final LinkedList<PProgramVarDeclarations> _programVarDeclarations_ = new LinkedList<PProgramVarDeclarations>();
    private PFunctionBlockBody _functionBlockBody_;
    private TEndProgramToken _endProgramToken_;

    public AProgramDeclaration()
    {
        // Constructor
    }

    public AProgramDeclaration(
        @SuppressWarnings("hiding") TProgramToken _programToken_,
        @SuppressWarnings("hiding") PProgramTypeName _programTypeName_,
        @SuppressWarnings("hiding") List<?> _programVarDeclarations_,
        @SuppressWarnings("hiding") PFunctionBlockBody _functionBlockBody_,
        @SuppressWarnings("hiding") TEndProgramToken _endProgramToken_)
    {
        // Constructor
        setProgramToken(_programToken_);

        setProgramTypeName(_programTypeName_);

        setProgramVarDeclarations(_programVarDeclarations_);

        setFunctionBlockBody(_functionBlockBody_);

        setEndProgramToken(_endProgramToken_);

    }

    @Override
    public Object clone()
    {
        return new AProgramDeclaration(
            cloneNode(this._programToken_),
            cloneNode(this._programTypeName_),
            cloneList(this._programVarDeclarations_),
            cloneNode(this._functionBlockBody_),
            cloneNode(this._endProgramToken_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgramDeclaration(this);
    }

    public TProgramToken getProgramToken()
    {
        return this._programToken_;
    }

    public void setProgramToken(TProgramToken node)
    {
        if(this._programToken_ != null)
        {
            this._programToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._programToken_ = node;
    }

    public PProgramTypeName getProgramTypeName()
    {
        return this._programTypeName_;
    }

    public void setProgramTypeName(PProgramTypeName node)
    {
        if(this._programTypeName_ != null)
        {
            this._programTypeName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._programTypeName_ = node;
    }

    public LinkedList<PProgramVarDeclarations> getProgramVarDeclarations()
    {
        return this._programVarDeclarations_;
    }

    public void setProgramVarDeclarations(List<?> list)
    {
        for(PProgramVarDeclarations e : this._programVarDeclarations_)
        {
            e.parent(null);
        }
        this._programVarDeclarations_.clear();

        for(Object obj_e : list)
        {
            PProgramVarDeclarations e = (PProgramVarDeclarations) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._programVarDeclarations_.add(e);
        }
    }

    public PFunctionBlockBody getFunctionBlockBody()
    {
        return this._functionBlockBody_;
    }

    public void setFunctionBlockBody(PFunctionBlockBody node)
    {
        if(this._functionBlockBody_ != null)
        {
            this._functionBlockBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionBlockBody_ = node;
    }

    public TEndProgramToken getEndProgramToken()
    {
        return this._endProgramToken_;
    }

    public void setEndProgramToken(TEndProgramToken node)
    {
        if(this._endProgramToken_ != null)
        {
            this._endProgramToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endProgramToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._programToken_)
            + toString(this._programTypeName_)
            + toString(this._programVarDeclarations_)
            + toString(this._functionBlockBody_)
            + toString(this._endProgramToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._programToken_ == child)
        {
            this._programToken_ = null;
            return;
        }

        if(this._programTypeName_ == child)
        {
            this._programTypeName_ = null;
            return;
        }

        if(this._programVarDeclarations_.remove(child))
        {
            return;
        }

        if(this._functionBlockBody_ == child)
        {
            this._functionBlockBody_ = null;
            return;
        }

        if(this._endProgramToken_ == child)
        {
            this._endProgramToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._programToken_ == oldChild)
        {
            setProgramToken((TProgramToken) newChild);
            return;
        }

        if(this._programTypeName_ == oldChild)
        {
            setProgramTypeName((PProgramTypeName) newChild);
            return;
        }

        for(ListIterator<PProgramVarDeclarations> i = this._programVarDeclarations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PProgramVarDeclarations) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._functionBlockBody_ == oldChild)
        {
            setFunctionBlockBody((PFunctionBlockBody) newChild);
            return;
        }

        if(this._endProgramToken_ == oldChild)
        {
            setEndProgramToken((TEndProgramToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
