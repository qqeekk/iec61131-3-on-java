/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AStructureDeclaration extends PStructureDeclaration
{
    private TStructToken _structToken_;
    private PStructureElementDeclarationList _structureElementDeclarationList_;
    private TEndStructToken _endStructToken_;

    public AStructureDeclaration()
    {
        // Constructor
    }

    public AStructureDeclaration(
        @SuppressWarnings("hiding") TStructToken _structToken_,
        @SuppressWarnings("hiding") PStructureElementDeclarationList _structureElementDeclarationList_,
        @SuppressWarnings("hiding") TEndStructToken _endStructToken_)
    {
        // Constructor
        setStructToken(_structToken_);

        setStructureElementDeclarationList(_structureElementDeclarationList_);

        setEndStructToken(_endStructToken_);

    }

    @Override
    public Object clone()
    {
        return new AStructureDeclaration(
            cloneNode(this._structToken_),
            cloneNode(this._structureElementDeclarationList_),
            cloneNode(this._endStructToken_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStructureDeclaration(this);
    }

    public TStructToken getStructToken()
    {
        return this._structToken_;
    }

    public void setStructToken(TStructToken node)
    {
        if(this._structToken_ != null)
        {
            this._structToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._structToken_ = node;
    }

    public PStructureElementDeclarationList getStructureElementDeclarationList()
    {
        return this._structureElementDeclarationList_;
    }

    public void setStructureElementDeclarationList(PStructureElementDeclarationList node)
    {
        if(this._structureElementDeclarationList_ != null)
        {
            this._structureElementDeclarationList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._structureElementDeclarationList_ = node;
    }

    public TEndStructToken getEndStructToken()
    {
        return this._endStructToken_;
    }

    public void setEndStructToken(TEndStructToken node)
    {
        if(this._endStructToken_ != null)
        {
            this._endStructToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endStructToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._structToken_)
            + toString(this._structureElementDeclarationList_)
            + toString(this._endStructToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._structToken_ == child)
        {
            this._structToken_ = null;
            return;
        }

        if(this._structureElementDeclarationList_ == child)
        {
            this._structureElementDeclarationList_ = null;
            return;
        }

        if(this._endStructToken_ == child)
        {
            this._endStructToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._structToken_ == oldChild)
        {
            setStructToken((TStructToken) newChild);
            return;
        }

        if(this._structureElementDeclarationList_ == oldChild)
        {
            setStructureElementDeclarationList((PStructureElementDeclarationList) newChild);
            return;
        }

        if(this._endStructToken_ == oldChild)
        {
            setEndStructToken((TEndStructToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
