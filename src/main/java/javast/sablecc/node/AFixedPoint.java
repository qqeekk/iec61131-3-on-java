/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AFixedPoint extends PFixedPoint
{
    private TInteger _integer_;
    private PFixedPointRealPart _fixedPointRealPart_;

    public AFixedPoint()
    {
        // Constructor
    }

    public AFixedPoint(
        @SuppressWarnings("hiding") TInteger _integer_,
        @SuppressWarnings("hiding") PFixedPointRealPart _fixedPointRealPart_)
    {
        // Constructor
        setInteger(_integer_);

        setFixedPointRealPart(_fixedPointRealPart_);

    }

    @Override
    public Object clone()
    {
        return new AFixedPoint(
            cloneNode(this._integer_),
            cloneNode(this._fixedPointRealPart_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFixedPoint(this);
    }

    public TInteger getInteger()
    {
        return this._integer_;
    }

    public void setInteger(TInteger node)
    {
        if(this._integer_ != null)
        {
            this._integer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._integer_ = node;
    }

    public PFixedPointRealPart getFixedPointRealPart()
    {
        return this._fixedPointRealPart_;
    }

    public void setFixedPointRealPart(PFixedPointRealPart node)
    {
        if(this._fixedPointRealPart_ != null)
        {
            this._fixedPointRealPart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fixedPointRealPart_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._integer_)
            + toString(this._fixedPointRealPart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._integer_ == child)
        {
            this._integer_ = null;
            return;
        }

        if(this._fixedPointRealPart_ == child)
        {
            this._fixedPointRealPart_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._integer_ == oldChild)
        {
            setInteger((TInteger) newChild);
            return;
        }

        if(this._fixedPointRealPart_ == oldChild)
        {
            setFixedPointRealPart((PFixedPointRealPart) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
