/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AProgramAccessDecl extends PProgramAccessDecl
{
    private PAccessName _accessName_;
    private TColon _fst_;
    private PSymbolicVariable _symbolicVariable_;
    private TColon _snd_;
    private PNonGenericTypeName _nonGenericTypeName_;
    private TDirection _direction_;

    public AProgramAccessDecl()
    {
        // Constructor
    }

    public AProgramAccessDecl(
        @SuppressWarnings("hiding") PAccessName _accessName_,
        @SuppressWarnings("hiding") TColon _fst_,
        @SuppressWarnings("hiding") PSymbolicVariable _symbolicVariable_,
        @SuppressWarnings("hiding") TColon _snd_,
        @SuppressWarnings("hiding") PNonGenericTypeName _nonGenericTypeName_,
        @SuppressWarnings("hiding") TDirection _direction_)
    {
        // Constructor
        setAccessName(_accessName_);

        setFst(_fst_);

        setSymbolicVariable(_symbolicVariable_);

        setSnd(_snd_);

        setNonGenericTypeName(_nonGenericTypeName_);

        setDirection(_direction_);

    }

    @Override
    public Object clone()
    {
        return new AProgramAccessDecl(
            cloneNode(this._accessName_),
            cloneNode(this._fst_),
            cloneNode(this._symbolicVariable_),
            cloneNode(this._snd_),
            cloneNode(this._nonGenericTypeName_),
            cloneNode(this._direction_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgramAccessDecl(this);
    }

    public PAccessName getAccessName()
    {
        return this._accessName_;
    }

    public void setAccessName(PAccessName node)
    {
        if(this._accessName_ != null)
        {
            this._accessName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accessName_ = node;
    }

    public TColon getFst()
    {
        return this._fst_;
    }

    public void setFst(TColon node)
    {
        if(this._fst_ != null)
        {
            this._fst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fst_ = node;
    }

    public PSymbolicVariable getSymbolicVariable()
    {
        return this._symbolicVariable_;
    }

    public void setSymbolicVariable(PSymbolicVariable node)
    {
        if(this._symbolicVariable_ != null)
        {
            this._symbolicVariable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._symbolicVariable_ = node;
    }

    public TColon getSnd()
    {
        return this._snd_;
    }

    public void setSnd(TColon node)
    {
        if(this._snd_ != null)
        {
            this._snd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._snd_ = node;
    }

    public PNonGenericTypeName getNonGenericTypeName()
    {
        return this._nonGenericTypeName_;
    }

    public void setNonGenericTypeName(PNonGenericTypeName node)
    {
        if(this._nonGenericTypeName_ != null)
        {
            this._nonGenericTypeName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nonGenericTypeName_ = node;
    }

    public TDirection getDirection()
    {
        return this._direction_;
    }

    public void setDirection(TDirection node)
    {
        if(this._direction_ != null)
        {
            this._direction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._direction_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._accessName_)
            + toString(this._fst_)
            + toString(this._symbolicVariable_)
            + toString(this._snd_)
            + toString(this._nonGenericTypeName_)
            + toString(this._direction_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._accessName_ == child)
        {
            this._accessName_ = null;
            return;
        }

        if(this._fst_ == child)
        {
            this._fst_ = null;
            return;
        }

        if(this._symbolicVariable_ == child)
        {
            this._symbolicVariable_ = null;
            return;
        }

        if(this._snd_ == child)
        {
            this._snd_ = null;
            return;
        }

        if(this._nonGenericTypeName_ == child)
        {
            this._nonGenericTypeName_ = null;
            return;
        }

        if(this._direction_ == child)
        {
            this._direction_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._accessName_ == oldChild)
        {
            setAccessName((PAccessName) newChild);
            return;
        }

        if(this._fst_ == oldChild)
        {
            setFst((TColon) newChild);
            return;
        }

        if(this._symbolicVariable_ == oldChild)
        {
            setSymbolicVariable((PSymbolicVariable) newChild);
            return;
        }

        if(this._snd_ == oldChild)
        {
            setSnd((TColon) newChild);
            return;
        }

        if(this._nonGenericTypeName_ == oldChild)
        {
            setNonGenericTypeName((PNonGenericTypeName) newChild);
            return;
        }

        if(this._direction_ == oldChild)
        {
            setDirection((TDirection) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
