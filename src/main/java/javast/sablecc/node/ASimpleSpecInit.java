/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleSpecInit extends PSimpleSpecInit
{
    private PSimpleSpecification _simpleSpecification_;
    private PSimpleSpecInitialization _simpleSpecInitialization_;

    public ASimpleSpecInit()
    {
        // Constructor
    }

    public ASimpleSpecInit(
        @SuppressWarnings("hiding") PSimpleSpecification _simpleSpecification_,
        @SuppressWarnings("hiding") PSimpleSpecInitialization _simpleSpecInitialization_)
    {
        // Constructor
        setSimpleSpecification(_simpleSpecification_);

        setSimpleSpecInitialization(_simpleSpecInitialization_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleSpecInit(
            cloneNode(this._simpleSpecification_),
            cloneNode(this._simpleSpecInitialization_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleSpecInit(this);
    }

    public PSimpleSpecification getSimpleSpecification()
    {
        return this._simpleSpecification_;
    }

    public void setSimpleSpecification(PSimpleSpecification node)
    {
        if(this._simpleSpecification_ != null)
        {
            this._simpleSpecification_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleSpecification_ = node;
    }

    public PSimpleSpecInitialization getSimpleSpecInitialization()
    {
        return this._simpleSpecInitialization_;
    }

    public void setSimpleSpecInitialization(PSimpleSpecInitialization node)
    {
        if(this._simpleSpecInitialization_ != null)
        {
            this._simpleSpecInitialization_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleSpecInitialization_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleSpecification_)
            + toString(this._simpleSpecInitialization_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleSpecification_ == child)
        {
            this._simpleSpecification_ = null;
            return;
        }

        if(this._simpleSpecInitialization_ == child)
        {
            this._simpleSpecInitialization_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleSpecification_ == oldChild)
        {
            setSimpleSpecification((PSimpleSpecification) newChild);
            return;
        }

        if(this._simpleSpecInitialization_ == oldChild)
        {
            setSimpleSpecInitialization((PSimpleSpecInitialization) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
