/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import java.util.*;
import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ADirectVariable extends PDirectVariable
{
    private TPercent _percent_;
    private TLocationPrefix _locationPrefix_;
    private TSizePrefix _sizePrefix_;
    private TInteger _integer_;
    private final LinkedList<PPrefixedInteger> _prefixedInteger_ = new LinkedList<PPrefixedInteger>();

    public ADirectVariable()
    {
        // Constructor
    }

    public ADirectVariable(
        @SuppressWarnings("hiding") TPercent _percent_,
        @SuppressWarnings("hiding") TLocationPrefix _locationPrefix_,
        @SuppressWarnings("hiding") TSizePrefix _sizePrefix_,
        @SuppressWarnings("hiding") TInteger _integer_,
        @SuppressWarnings("hiding") List<?> _prefixedInteger_)
    {
        // Constructor
        setPercent(_percent_);

        setLocationPrefix(_locationPrefix_);

        setSizePrefix(_sizePrefix_);

        setInteger(_integer_);

        setPrefixedInteger(_prefixedInteger_);

    }

    @Override
    public Object clone()
    {
        return new ADirectVariable(
            cloneNode(this._percent_),
            cloneNode(this._locationPrefix_),
            cloneNode(this._sizePrefix_),
            cloneNode(this._integer_),
            cloneList(this._prefixedInteger_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADirectVariable(this);
    }

    public TPercent getPercent()
    {
        return this._percent_;
    }

    public void setPercent(TPercent node)
    {
        if(this._percent_ != null)
        {
            this._percent_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._percent_ = node;
    }

    public TLocationPrefix getLocationPrefix()
    {
        return this._locationPrefix_;
    }

    public void setLocationPrefix(TLocationPrefix node)
    {
        if(this._locationPrefix_ != null)
        {
            this._locationPrefix_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._locationPrefix_ = node;
    }

    public TSizePrefix getSizePrefix()
    {
        return this._sizePrefix_;
    }

    public void setSizePrefix(TSizePrefix node)
    {
        if(this._sizePrefix_ != null)
        {
            this._sizePrefix_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sizePrefix_ = node;
    }

    public TInteger getInteger()
    {
        return this._integer_;
    }

    public void setInteger(TInteger node)
    {
        if(this._integer_ != null)
        {
            this._integer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._integer_ = node;
    }

    public LinkedList<PPrefixedInteger> getPrefixedInteger()
    {
        return this._prefixedInteger_;
    }

    public void setPrefixedInteger(List<?> list)
    {
        for(PPrefixedInteger e : this._prefixedInteger_)
        {
            e.parent(null);
        }
        this._prefixedInteger_.clear();

        for(Object obj_e : list)
        {
            PPrefixedInteger e = (PPrefixedInteger) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._prefixedInteger_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._percent_)
            + toString(this._locationPrefix_)
            + toString(this._sizePrefix_)
            + toString(this._integer_)
            + toString(this._prefixedInteger_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._percent_ == child)
        {
            this._percent_ = null;
            return;
        }

        if(this._locationPrefix_ == child)
        {
            this._locationPrefix_ = null;
            return;
        }

        if(this._sizePrefix_ == child)
        {
            this._sizePrefix_ = null;
            return;
        }

        if(this._integer_ == child)
        {
            this._integer_ = null;
            return;
        }

        if(this._prefixedInteger_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._percent_ == oldChild)
        {
            setPercent((TPercent) newChild);
            return;
        }

        if(this._locationPrefix_ == oldChild)
        {
            setLocationPrefix((TLocationPrefix) newChild);
            return;
        }

        if(this._sizePrefix_ == oldChild)
        {
            setSizePrefix((TSizePrefix) newChild);
            return;
        }

        if(this._integer_ == oldChild)
        {
            setInteger((TInteger) newChild);
            return;
        }

        for(ListIterator<PPrefixedInteger> i = this._prefixedInteger_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPrefixedInteger) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
