/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASecondlyMinutes extends PMinutes
{
    private TInteger _integer_;
    private TMinuteIdentifier _minuteIdentifier_;
    private TUnderscore _underscore_;
    private PSeconds _seconds_;

    public ASecondlyMinutes()
    {
        // Constructor
    }

    public ASecondlyMinutes(
        @SuppressWarnings("hiding") TInteger _integer_,
        @SuppressWarnings("hiding") TMinuteIdentifier _minuteIdentifier_,
        @SuppressWarnings("hiding") TUnderscore _underscore_,
        @SuppressWarnings("hiding") PSeconds _seconds_)
    {
        // Constructor
        setInteger(_integer_);

        setMinuteIdentifier(_minuteIdentifier_);

        setUnderscore(_underscore_);

        setSeconds(_seconds_);

    }

    @Override
    public Object clone()
    {
        return new ASecondlyMinutes(
            cloneNode(this._integer_),
            cloneNode(this._minuteIdentifier_),
            cloneNode(this._underscore_),
            cloneNode(this._seconds_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASecondlyMinutes(this);
    }

    public TInteger getInteger()
    {
        return this._integer_;
    }

    public void setInteger(TInteger node)
    {
        if(this._integer_ != null)
        {
            this._integer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._integer_ = node;
    }

    public TMinuteIdentifier getMinuteIdentifier()
    {
        return this._minuteIdentifier_;
    }

    public void setMinuteIdentifier(TMinuteIdentifier node)
    {
        if(this._minuteIdentifier_ != null)
        {
            this._minuteIdentifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._minuteIdentifier_ = node;
    }

    public TUnderscore getUnderscore()
    {
        return this._underscore_;
    }

    public void setUnderscore(TUnderscore node)
    {
        if(this._underscore_ != null)
        {
            this._underscore_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._underscore_ = node;
    }

    public PSeconds getSeconds()
    {
        return this._seconds_;
    }

    public void setSeconds(PSeconds node)
    {
        if(this._seconds_ != null)
        {
            this._seconds_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._seconds_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._integer_)
            + toString(this._minuteIdentifier_)
            + toString(this._underscore_)
            + toString(this._seconds_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._integer_ == child)
        {
            this._integer_ = null;
            return;
        }

        if(this._minuteIdentifier_ == child)
        {
            this._minuteIdentifier_ = null;
            return;
        }

        if(this._underscore_ == child)
        {
            this._underscore_ = null;
            return;
        }

        if(this._seconds_ == child)
        {
            this._seconds_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._integer_ == oldChild)
        {
            setInteger((TInteger) newChild);
            return;
        }

        if(this._minuteIdentifier_ == oldChild)
        {
            setMinuteIdentifier((TMinuteIdentifier) newChild);
            return;
        }

        if(this._underscore_ == oldChild)
        {
            setUnderscore((TUnderscore) newChild);
            return;
        }

        if(this._seconds_ == oldChild)
        {
            setSeconds((PSeconds) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
