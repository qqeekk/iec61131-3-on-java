/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ADuration extends PDuration
{
    private TTimeTypeNameFull _timeTypeNameFull_;
    private THash _hash_;
    private TDash _dash_;
    private PInterval _interval_;

    public ADuration()
    {
        // Constructor
    }

    public ADuration(
        @SuppressWarnings("hiding") TTimeTypeNameFull _timeTypeNameFull_,
        @SuppressWarnings("hiding") THash _hash_,
        @SuppressWarnings("hiding") TDash _dash_,
        @SuppressWarnings("hiding") PInterval _interval_)
    {
        // Constructor
        setTimeTypeNameFull(_timeTypeNameFull_);

        setHash(_hash_);

        setDash(_dash_);

        setInterval(_interval_);

    }

    @Override
    public Object clone()
    {
        return new ADuration(
            cloneNode(this._timeTypeNameFull_),
            cloneNode(this._hash_),
            cloneNode(this._dash_),
            cloneNode(this._interval_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADuration(this);
    }

    public TTimeTypeNameFull getTimeTypeNameFull()
    {
        return this._timeTypeNameFull_;
    }

    public void setTimeTypeNameFull(TTimeTypeNameFull node)
    {
        if(this._timeTypeNameFull_ != null)
        {
            this._timeTypeNameFull_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._timeTypeNameFull_ = node;
    }

    public THash getHash()
    {
        return this._hash_;
    }

    public void setHash(THash node)
    {
        if(this._hash_ != null)
        {
            this._hash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._hash_ = node;
    }

    public TDash getDash()
    {
        return this._dash_;
    }

    public void setDash(TDash node)
    {
        if(this._dash_ != null)
        {
            this._dash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dash_ = node;
    }

    public PInterval getInterval()
    {
        return this._interval_;
    }

    public void setInterval(PInterval node)
    {
        if(this._interval_ != null)
        {
            this._interval_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._interval_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._timeTypeNameFull_)
            + toString(this._hash_)
            + toString(this._dash_)
            + toString(this._interval_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._timeTypeNameFull_ == child)
        {
            this._timeTypeNameFull_ = null;
            return;
        }

        if(this._hash_ == child)
        {
            this._hash_ = null;
            return;
        }

        if(this._dash_ == child)
        {
            this._dash_ = null;
            return;
        }

        if(this._interval_ == child)
        {
            this._interval_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._timeTypeNameFull_ == oldChild)
        {
            setTimeTypeNameFull((TTimeTypeNameFull) newChild);
            return;
        }

        if(this._hash_ == oldChild)
        {
            setHash((THash) newChild);
            return;
        }

        if(this._dash_ == oldChild)
        {
            setDash((TDash) newChild);
            return;
        }

        if(this._interval_ == oldChild)
        {
            setInterval((PInterval) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
