/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleTypeDeclaration extends PSimpleTypeDeclaration
{
    private PSimpleTypeName _simpleTypeName_;
    private TColon _colon_;
    private PSimpleSpecInit _simpleSpecInit_;

    public ASimpleTypeDeclaration()
    {
        // Constructor
    }

    public ASimpleTypeDeclaration(
        @SuppressWarnings("hiding") PSimpleTypeName _simpleTypeName_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PSimpleSpecInit _simpleSpecInit_)
    {
        // Constructor
        setSimpleTypeName(_simpleTypeName_);

        setColon(_colon_);

        setSimpleSpecInit(_simpleSpecInit_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleTypeDeclaration(
            cloneNode(this._simpleTypeName_),
            cloneNode(this._colon_),
            cloneNode(this._simpleSpecInit_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleTypeDeclaration(this);
    }

    public PSimpleTypeName getSimpleTypeName()
    {
        return this._simpleTypeName_;
    }

    public void setSimpleTypeName(PSimpleTypeName node)
    {
        if(this._simpleTypeName_ != null)
        {
            this._simpleTypeName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleTypeName_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PSimpleSpecInit getSimpleSpecInit()
    {
        return this._simpleSpecInit_;
    }

    public void setSimpleSpecInit(PSimpleSpecInit node)
    {
        if(this._simpleSpecInit_ != null)
        {
            this._simpleSpecInit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleSpecInit_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleTypeName_)
            + toString(this._colon_)
            + toString(this._simpleSpecInit_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleTypeName_ == child)
        {
            this._simpleTypeName_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._simpleSpecInit_ == child)
        {
            this._simpleSpecInit_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleTypeName_ == oldChild)
        {
            setSimpleTypeName((PSimpleTypeName) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._simpleSpecInit_ == oldChild)
        {
            setSimpleSpecInit((PSimpleSpecInit) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
