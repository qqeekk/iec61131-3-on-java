/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import java.util.*;
import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionBlockDeclaration extends PFunctionBlockDeclaration
{
    private TFunctionBlockToken _functionBlockToken_;
    private PDerivedFunctionBlockName _derivedFunctionBlockName_;
    private final LinkedList<PFunctionBlockVarDeclarations> _functionBlockVarDeclarations_ = new LinkedList<PFunctionBlockVarDeclarations>();
    private PFunctionBlockBody _functionBlockBody_;
    private TEndFunctionBlockToken _endFunctionBlockToken_;

    public AFunctionBlockDeclaration()
    {
        // Constructor
    }

    public AFunctionBlockDeclaration(
        @SuppressWarnings("hiding") TFunctionBlockToken _functionBlockToken_,
        @SuppressWarnings("hiding") PDerivedFunctionBlockName _derivedFunctionBlockName_,
        @SuppressWarnings("hiding") List<?> _functionBlockVarDeclarations_,
        @SuppressWarnings("hiding") PFunctionBlockBody _functionBlockBody_,
        @SuppressWarnings("hiding") TEndFunctionBlockToken _endFunctionBlockToken_)
    {
        // Constructor
        setFunctionBlockToken(_functionBlockToken_);

        setDerivedFunctionBlockName(_derivedFunctionBlockName_);

        setFunctionBlockVarDeclarations(_functionBlockVarDeclarations_);

        setFunctionBlockBody(_functionBlockBody_);

        setEndFunctionBlockToken(_endFunctionBlockToken_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionBlockDeclaration(
            cloneNode(this._functionBlockToken_),
            cloneNode(this._derivedFunctionBlockName_),
            cloneList(this._functionBlockVarDeclarations_),
            cloneNode(this._functionBlockBody_),
            cloneNode(this._endFunctionBlockToken_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionBlockDeclaration(this);
    }

    public TFunctionBlockToken getFunctionBlockToken()
    {
        return this._functionBlockToken_;
    }

    public void setFunctionBlockToken(TFunctionBlockToken node)
    {
        if(this._functionBlockToken_ != null)
        {
            this._functionBlockToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionBlockToken_ = node;
    }

    public PDerivedFunctionBlockName getDerivedFunctionBlockName()
    {
        return this._derivedFunctionBlockName_;
    }

    public void setDerivedFunctionBlockName(PDerivedFunctionBlockName node)
    {
        if(this._derivedFunctionBlockName_ != null)
        {
            this._derivedFunctionBlockName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._derivedFunctionBlockName_ = node;
    }

    public LinkedList<PFunctionBlockVarDeclarations> getFunctionBlockVarDeclarations()
    {
        return this._functionBlockVarDeclarations_;
    }

    public void setFunctionBlockVarDeclarations(List<?> list)
    {
        for(PFunctionBlockVarDeclarations e : this._functionBlockVarDeclarations_)
        {
            e.parent(null);
        }
        this._functionBlockVarDeclarations_.clear();

        for(Object obj_e : list)
        {
            PFunctionBlockVarDeclarations e = (PFunctionBlockVarDeclarations) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._functionBlockVarDeclarations_.add(e);
        }
    }

    public PFunctionBlockBody getFunctionBlockBody()
    {
        return this._functionBlockBody_;
    }

    public void setFunctionBlockBody(PFunctionBlockBody node)
    {
        if(this._functionBlockBody_ != null)
        {
            this._functionBlockBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionBlockBody_ = node;
    }

    public TEndFunctionBlockToken getEndFunctionBlockToken()
    {
        return this._endFunctionBlockToken_;
    }

    public void setEndFunctionBlockToken(TEndFunctionBlockToken node)
    {
        if(this._endFunctionBlockToken_ != null)
        {
            this._endFunctionBlockToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endFunctionBlockToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._functionBlockToken_)
            + toString(this._derivedFunctionBlockName_)
            + toString(this._functionBlockVarDeclarations_)
            + toString(this._functionBlockBody_)
            + toString(this._endFunctionBlockToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._functionBlockToken_ == child)
        {
            this._functionBlockToken_ = null;
            return;
        }

        if(this._derivedFunctionBlockName_ == child)
        {
            this._derivedFunctionBlockName_ = null;
            return;
        }

        if(this._functionBlockVarDeclarations_.remove(child))
        {
            return;
        }

        if(this._functionBlockBody_ == child)
        {
            this._functionBlockBody_ = null;
            return;
        }

        if(this._endFunctionBlockToken_ == child)
        {
            this._endFunctionBlockToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._functionBlockToken_ == oldChild)
        {
            setFunctionBlockToken((TFunctionBlockToken) newChild);
            return;
        }

        if(this._derivedFunctionBlockName_ == oldChild)
        {
            setDerivedFunctionBlockName((PDerivedFunctionBlockName) newChild);
            return;
        }

        for(ListIterator<PFunctionBlockVarDeclarations> i = this._functionBlockVarDeclarations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFunctionBlockVarDeclarations) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._functionBlockBody_ == oldChild)
        {
            setFunctionBlockBody((PFunctionBlockBody) newChild);
            return;
        }

        if(this._endFunctionBlockToken_ == oldChild)
        {
            setEndFunctionBlockToken((TEndFunctionBlockToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
