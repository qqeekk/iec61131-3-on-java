/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AStructureInitialization extends PStructureInitialization
{
    private TLparen _lparen_;
    private PStructureElementInitializationList _structureElementInitializationList_;
    private TRparen _rparen_;

    public AStructureInitialization()
    {
        // Constructor
    }

    public AStructureInitialization(
        @SuppressWarnings("hiding") TLparen _lparen_,
        @SuppressWarnings("hiding") PStructureElementInitializationList _structureElementInitializationList_,
        @SuppressWarnings("hiding") TRparen _rparen_)
    {
        // Constructor
        setLparen(_lparen_);

        setStructureElementInitializationList(_structureElementInitializationList_);

        setRparen(_rparen_);

    }

    @Override
    public Object clone()
    {
        return new AStructureInitialization(
            cloneNode(this._lparen_),
            cloneNode(this._structureElementInitializationList_),
            cloneNode(this._rparen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStructureInitialization(this);
    }

    public TLparen getLparen()
    {
        return this._lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(this._lparen_ != null)
        {
            this._lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparen_ = node;
    }

    public PStructureElementInitializationList getStructureElementInitializationList()
    {
        return this._structureElementInitializationList_;
    }

    public void setStructureElementInitializationList(PStructureElementInitializationList node)
    {
        if(this._structureElementInitializationList_ != null)
        {
            this._structureElementInitializationList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._structureElementInitializationList_ = node;
    }

    public TRparen getRparen()
    {
        return this._rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(this._rparen_ != null)
        {
            this._rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lparen_)
            + toString(this._structureElementInitializationList_)
            + toString(this._rparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lparen_ == child)
        {
            this._lparen_ = null;
            return;
        }

        if(this._structureElementInitializationList_ == child)
        {
            this._structureElementInitializationList_ = null;
            return;
        }

        if(this._rparen_ == child)
        {
            this._rparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(this._structureElementInitializationList_ == oldChild)
        {
            setStructureElementInitializationList((PStructureElementInitializationList) newChild);
            return;
        }

        if(this._rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
