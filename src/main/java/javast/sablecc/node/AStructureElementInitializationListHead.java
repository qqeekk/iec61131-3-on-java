/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AStructureElementInitializationListHead extends PStructureElementInitializationListHead
{
    private PStructureElementInitialization _structureElementInitialization_;
    private TComma _comma_;

    public AStructureElementInitializationListHead()
    {
        // Constructor
    }

    public AStructureElementInitializationListHead(
        @SuppressWarnings("hiding") PStructureElementInitialization _structureElementInitialization_,
        @SuppressWarnings("hiding") TComma _comma_)
    {
        // Constructor
        setStructureElementInitialization(_structureElementInitialization_);

        setComma(_comma_);

    }

    @Override
    public Object clone()
    {
        return new AStructureElementInitializationListHead(
            cloneNode(this._structureElementInitialization_),
            cloneNode(this._comma_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStructureElementInitializationListHead(this);
    }

    public PStructureElementInitialization getStructureElementInitialization()
    {
        return this._structureElementInitialization_;
    }

    public void setStructureElementInitialization(PStructureElementInitialization node)
    {
        if(this._structureElementInitialization_ != null)
        {
            this._structureElementInitialization_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._structureElementInitialization_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._structureElementInitialization_)
            + toString(this._comma_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._structureElementInitialization_ == child)
        {
            this._structureElementInitialization_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._structureElementInitialization_ == oldChild)
        {
            setStructureElementInitialization((PStructureElementInitialization) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
