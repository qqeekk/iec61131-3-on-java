/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ADateAndTime extends PDateAndTime
{
    private TDateAndTimeTypeNameFull _dateAndTimeTypeNameFull_;
    private THash _hash_;
    private PDateLiteral _dateLiteral_;
    private TDash _dash_;
    private PDaytime _daytime_;

    public ADateAndTime()
    {
        // Constructor
    }

    public ADateAndTime(
        @SuppressWarnings("hiding") TDateAndTimeTypeNameFull _dateAndTimeTypeNameFull_,
        @SuppressWarnings("hiding") THash _hash_,
        @SuppressWarnings("hiding") PDateLiteral _dateLiteral_,
        @SuppressWarnings("hiding") TDash _dash_,
        @SuppressWarnings("hiding") PDaytime _daytime_)
    {
        // Constructor
        setDateAndTimeTypeNameFull(_dateAndTimeTypeNameFull_);

        setHash(_hash_);

        setDateLiteral(_dateLiteral_);

        setDash(_dash_);

        setDaytime(_daytime_);

    }

    @Override
    public Object clone()
    {
        return new ADateAndTime(
            cloneNode(this._dateAndTimeTypeNameFull_),
            cloneNode(this._hash_),
            cloneNode(this._dateLiteral_),
            cloneNode(this._dash_),
            cloneNode(this._daytime_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADateAndTime(this);
    }

    public TDateAndTimeTypeNameFull getDateAndTimeTypeNameFull()
    {
        return this._dateAndTimeTypeNameFull_;
    }

    public void setDateAndTimeTypeNameFull(TDateAndTimeTypeNameFull node)
    {
        if(this._dateAndTimeTypeNameFull_ != null)
        {
            this._dateAndTimeTypeNameFull_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dateAndTimeTypeNameFull_ = node;
    }

    public THash getHash()
    {
        return this._hash_;
    }

    public void setHash(THash node)
    {
        if(this._hash_ != null)
        {
            this._hash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._hash_ = node;
    }

    public PDateLiteral getDateLiteral()
    {
        return this._dateLiteral_;
    }

    public void setDateLiteral(PDateLiteral node)
    {
        if(this._dateLiteral_ != null)
        {
            this._dateLiteral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dateLiteral_ = node;
    }

    public TDash getDash()
    {
        return this._dash_;
    }

    public void setDash(TDash node)
    {
        if(this._dash_ != null)
        {
            this._dash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dash_ = node;
    }

    public PDaytime getDaytime()
    {
        return this._daytime_;
    }

    public void setDaytime(PDaytime node)
    {
        if(this._daytime_ != null)
        {
            this._daytime_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._daytime_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dateAndTimeTypeNameFull_)
            + toString(this._hash_)
            + toString(this._dateLiteral_)
            + toString(this._dash_)
            + toString(this._daytime_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dateAndTimeTypeNameFull_ == child)
        {
            this._dateAndTimeTypeNameFull_ = null;
            return;
        }

        if(this._hash_ == child)
        {
            this._hash_ = null;
            return;
        }

        if(this._dateLiteral_ == child)
        {
            this._dateLiteral_ = null;
            return;
        }

        if(this._dash_ == child)
        {
            this._dash_ = null;
            return;
        }

        if(this._daytime_ == child)
        {
            this._daytime_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dateAndTimeTypeNameFull_ == oldChild)
        {
            setDateAndTimeTypeNameFull((TDateAndTimeTypeNameFull) newChild);
            return;
        }

        if(this._hash_ == oldChild)
        {
            setHash((THash) newChild);
            return;
        }

        if(this._dateLiteral_ == oldChild)
        {
            setDateLiteral((PDateLiteral) newChild);
            return;
        }

        if(this._dash_ == oldChild)
        {
            setDash((TDash) newChild);
            return;
        }

        if(this._daytime_ == oldChild)
        {
            setDaytime((PDaytime) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
