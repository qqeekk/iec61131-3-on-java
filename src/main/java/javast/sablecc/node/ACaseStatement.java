/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import java.util.*;
import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ACaseStatement extends PCaseStatement
{
    private TCaseToken _caseToken_;
    private PExpression _expression_;
    private TOfToken _ofToken_;
    private final LinkedList<PCaseElement> _caseElement_ = new LinkedList<PCaseElement>();
    private PCaseStatementElseClause _caseStatementElseClause_;
    private TEndCaseToken _endCaseToken_;

    public ACaseStatement()
    {
        // Constructor
    }

    public ACaseStatement(
        @SuppressWarnings("hiding") TCaseToken _caseToken_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TOfToken _ofToken_,
        @SuppressWarnings("hiding") List<?> _caseElement_,
        @SuppressWarnings("hiding") PCaseStatementElseClause _caseStatementElseClause_,
        @SuppressWarnings("hiding") TEndCaseToken _endCaseToken_)
    {
        // Constructor
        setCaseToken(_caseToken_);

        setExpression(_expression_);

        setOfToken(_ofToken_);

        setCaseElement(_caseElement_);

        setCaseStatementElseClause(_caseStatementElseClause_);

        setEndCaseToken(_endCaseToken_);

    }

    @Override
    public Object clone()
    {
        return new ACaseStatement(
            cloneNode(this._caseToken_),
            cloneNode(this._expression_),
            cloneNode(this._ofToken_),
            cloneList(this._caseElement_),
            cloneNode(this._caseStatementElseClause_),
            cloneNode(this._endCaseToken_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACaseStatement(this);
    }

    public TCaseToken getCaseToken()
    {
        return this._caseToken_;
    }

    public void setCaseToken(TCaseToken node)
    {
        if(this._caseToken_ != null)
        {
            this._caseToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._caseToken_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TOfToken getOfToken()
    {
        return this._ofToken_;
    }

    public void setOfToken(TOfToken node)
    {
        if(this._ofToken_ != null)
        {
            this._ofToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ofToken_ = node;
    }

    public LinkedList<PCaseElement> getCaseElement()
    {
        return this._caseElement_;
    }

    public void setCaseElement(List<?> list)
    {
        for(PCaseElement e : this._caseElement_)
        {
            e.parent(null);
        }
        this._caseElement_.clear();

        for(Object obj_e : list)
        {
            PCaseElement e = (PCaseElement) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._caseElement_.add(e);
        }
    }

    public PCaseStatementElseClause getCaseStatementElseClause()
    {
        return this._caseStatementElseClause_;
    }

    public void setCaseStatementElseClause(PCaseStatementElseClause node)
    {
        if(this._caseStatementElseClause_ != null)
        {
            this._caseStatementElseClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._caseStatementElseClause_ = node;
    }

    public TEndCaseToken getEndCaseToken()
    {
        return this._endCaseToken_;
    }

    public void setEndCaseToken(TEndCaseToken node)
    {
        if(this._endCaseToken_ != null)
        {
            this._endCaseToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endCaseToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._caseToken_)
            + toString(this._expression_)
            + toString(this._ofToken_)
            + toString(this._caseElement_)
            + toString(this._caseStatementElseClause_)
            + toString(this._endCaseToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._caseToken_ == child)
        {
            this._caseToken_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._ofToken_ == child)
        {
            this._ofToken_ = null;
            return;
        }

        if(this._caseElement_.remove(child))
        {
            return;
        }

        if(this._caseStatementElseClause_ == child)
        {
            this._caseStatementElseClause_ = null;
            return;
        }

        if(this._endCaseToken_ == child)
        {
            this._endCaseToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._caseToken_ == oldChild)
        {
            setCaseToken((TCaseToken) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._ofToken_ == oldChild)
        {
            setOfToken((TOfToken) newChild);
            return;
        }

        for(ListIterator<PCaseElement> i = this._caseElement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCaseElement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._caseStatementElseClause_ == oldChild)
        {
            setCaseStatementElseClause((PCaseStatementElseClause) newChild);
            return;
        }

        if(this._endCaseToken_ == oldChild)
        {
            setEndCaseToken((TEndCaseToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
