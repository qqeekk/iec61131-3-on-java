/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ANumericBooleanLiteral extends PBooleanLiteral
{
    private PBoolTypeNameHashed _boolTypeNameHashed_;
    private TBit _bit_;

    public ANumericBooleanLiteral()
    {
        // Constructor
    }

    public ANumericBooleanLiteral(
        @SuppressWarnings("hiding") PBoolTypeNameHashed _boolTypeNameHashed_,
        @SuppressWarnings("hiding") TBit _bit_)
    {
        // Constructor
        setBoolTypeNameHashed(_boolTypeNameHashed_);

        setBit(_bit_);

    }

    @Override
    public Object clone()
    {
        return new ANumericBooleanLiteral(
            cloneNode(this._boolTypeNameHashed_),
            cloneNode(this._bit_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANumericBooleanLiteral(this);
    }

    public PBoolTypeNameHashed getBoolTypeNameHashed()
    {
        return this._boolTypeNameHashed_;
    }

    public void setBoolTypeNameHashed(PBoolTypeNameHashed node)
    {
        if(this._boolTypeNameHashed_ != null)
        {
            this._boolTypeNameHashed_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolTypeNameHashed_ = node;
    }

    public TBit getBit()
    {
        return this._bit_;
    }

    public void setBit(TBit node)
    {
        if(this._bit_ != null)
        {
            this._bit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bit_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._boolTypeNameHashed_)
            + toString(this._bit_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._boolTypeNameHashed_ == child)
        {
            this._boolTypeNameHashed_ = null;
            return;
        }

        if(this._bit_ == child)
        {
            this._bit_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._boolTypeNameHashed_ == oldChild)
        {
            setBoolTypeNameHashed((PBoolTypeNameHashed) newChild);
            return;
        }

        if(this._bit_ == oldChild)
        {
            setBit((TBit) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
