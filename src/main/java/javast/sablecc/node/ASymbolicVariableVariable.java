/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASymbolicVariableVariable extends PVariable
{
    private PSymbolicVariable _symbolicVariable_;

    public ASymbolicVariableVariable()
    {
        // Constructor
    }

    public ASymbolicVariableVariable(
        @SuppressWarnings("hiding") PSymbolicVariable _symbolicVariable_)
    {
        // Constructor
        setSymbolicVariable(_symbolicVariable_);

    }

    @Override
    public Object clone()
    {
        return new ASymbolicVariableVariable(
            cloneNode(this._symbolicVariable_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASymbolicVariableVariable(this);
    }

    public PSymbolicVariable getSymbolicVariable()
    {
        return this._symbolicVariable_;
    }

    public void setSymbolicVariable(PSymbolicVariable node)
    {
        if(this._symbolicVariable_ != null)
        {
            this._symbolicVariable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._symbolicVariable_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._symbolicVariable_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._symbolicVariable_ == child)
        {
            this._symbolicVariable_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._symbolicVariable_ == oldChild)
        {
            setSymbolicVariable((PSymbolicVariable) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
