/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import java.util.*;
import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AProgramAccessDeclList extends PProgramAccessDeclList
{
    private final LinkedList<PProgramAccessDeclListHead> _programAccessDeclListHead_ = new LinkedList<PProgramAccessDeclListHead>();
    private PProgramAccessDecl _programAccessDecl_;

    public AProgramAccessDeclList()
    {
        // Constructor
    }

    public AProgramAccessDeclList(
        @SuppressWarnings("hiding") List<?> _programAccessDeclListHead_,
        @SuppressWarnings("hiding") PProgramAccessDecl _programAccessDecl_)
    {
        // Constructor
        setProgramAccessDeclListHead(_programAccessDeclListHead_);

        setProgramAccessDecl(_programAccessDecl_);

    }

    @Override
    public Object clone()
    {
        return new AProgramAccessDeclList(
            cloneList(this._programAccessDeclListHead_),
            cloneNode(this._programAccessDecl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgramAccessDeclList(this);
    }

    public LinkedList<PProgramAccessDeclListHead> getProgramAccessDeclListHead()
    {
        return this._programAccessDeclListHead_;
    }

    public void setProgramAccessDeclListHead(List<?> list)
    {
        for(PProgramAccessDeclListHead e : this._programAccessDeclListHead_)
        {
            e.parent(null);
        }
        this._programAccessDeclListHead_.clear();

        for(Object obj_e : list)
        {
            PProgramAccessDeclListHead e = (PProgramAccessDeclListHead) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._programAccessDeclListHead_.add(e);
        }
    }

    public PProgramAccessDecl getProgramAccessDecl()
    {
        return this._programAccessDecl_;
    }

    public void setProgramAccessDecl(PProgramAccessDecl node)
    {
        if(this._programAccessDecl_ != null)
        {
            this._programAccessDecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._programAccessDecl_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._programAccessDeclListHead_)
            + toString(this._programAccessDecl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._programAccessDeclListHead_.remove(child))
        {
            return;
        }

        if(this._programAccessDecl_ == child)
        {
            this._programAccessDecl_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PProgramAccessDeclListHead> i = this._programAccessDeclListHead_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PProgramAccessDeclListHead) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._programAccessDecl_ == oldChild)
        {
            setProgramAccessDecl((PProgramAccessDecl) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
