/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AForListByClause extends PForListByClause
{
    private TByToken _byToken_;
    private PExpression _by_;

    public AForListByClause()
    {
        // Constructor
    }

    public AForListByClause(
        @SuppressWarnings("hiding") TByToken _byToken_,
        @SuppressWarnings("hiding") PExpression _by_)
    {
        // Constructor
        setByToken(_byToken_);

        setBy(_by_);

    }

    @Override
    public Object clone()
    {
        return new AForListByClause(
            cloneNode(this._byToken_),
            cloneNode(this._by_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForListByClause(this);
    }

    public TByToken getByToken()
    {
        return this._byToken_;
    }

    public void setByToken(TByToken node)
    {
        if(this._byToken_ != null)
        {
            this._byToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._byToken_ = node;
    }

    public PExpression getBy()
    {
        return this._by_;
    }

    public void setBy(PExpression node)
    {
        if(this._by_ != null)
        {
            this._by_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._by_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._byToken_)
            + toString(this._by_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._byToken_ == child)
        {
            this._byToken_ = null;
            return;
        }

        if(this._by_ == child)
        {
            this._by_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._byToken_ == oldChild)
        {
            setByToken((TByToken) newChild);
            return;
        }

        if(this._by_ == oldChild)
        {
            setBy((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
