/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AVarInitDecl extends PVarInitDecl
{
    private PVar1List _var1List_;
    private TIncomplLocation _incomplLocation_;
    private TColon _colon_;
    private PVarInitDeclSpec _varInitDeclSpec_;

    public AVarInitDecl()
    {
        // Constructor
    }

    public AVarInitDecl(
        @SuppressWarnings("hiding") PVar1List _var1List_,
        @SuppressWarnings("hiding") TIncomplLocation _incomplLocation_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PVarInitDeclSpec _varInitDeclSpec_)
    {
        // Constructor
        setVar1List(_var1List_);

        setIncomplLocation(_incomplLocation_);

        setColon(_colon_);

        setVarInitDeclSpec(_varInitDeclSpec_);

    }

    @Override
    public Object clone()
    {
        return new AVarInitDecl(
            cloneNode(this._var1List_),
            cloneNode(this._incomplLocation_),
            cloneNode(this._colon_),
            cloneNode(this._varInitDeclSpec_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarInitDecl(this);
    }

    public PVar1List getVar1List()
    {
        return this._var1List_;
    }

    public void setVar1List(PVar1List node)
    {
        if(this._var1List_ != null)
        {
            this._var1List_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var1List_ = node;
    }

    public TIncomplLocation getIncomplLocation()
    {
        return this._incomplLocation_;
    }

    public void setIncomplLocation(TIncomplLocation node)
    {
        if(this._incomplLocation_ != null)
        {
            this._incomplLocation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._incomplLocation_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PVarInitDeclSpec getVarInitDeclSpec()
    {
        return this._varInitDeclSpec_;
    }

    public void setVarInitDeclSpec(PVarInitDeclSpec node)
    {
        if(this._varInitDeclSpec_ != null)
        {
            this._varInitDeclSpec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varInitDeclSpec_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var1List_)
            + toString(this._incomplLocation_)
            + toString(this._colon_)
            + toString(this._varInitDeclSpec_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var1List_ == child)
        {
            this._var1List_ = null;
            return;
        }

        if(this._incomplLocation_ == child)
        {
            this._incomplLocation_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._varInitDeclSpec_ == child)
        {
            this._varInitDeclSpec_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var1List_ == oldChild)
        {
            setVar1List((PVar1List) newChild);
            return;
        }

        if(this._incomplLocation_ == oldChild)
        {
            setIncomplLocation((TIncomplLocation) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._varInitDeclSpec_ == oldChild)
        {
            setVarInitDeclSpec((PVarInitDeclSpec) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
