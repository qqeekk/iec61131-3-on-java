/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AStringTypeTypeDeclaration extends PTypeDeclaration
{
    private PStringTypeDeclaration _stringTypeDeclaration_;

    public AStringTypeTypeDeclaration()
    {
        // Constructor
    }

    public AStringTypeTypeDeclaration(
        @SuppressWarnings("hiding") PStringTypeDeclaration _stringTypeDeclaration_)
    {
        // Constructor
        setStringTypeDeclaration(_stringTypeDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new AStringTypeTypeDeclaration(
            cloneNode(this._stringTypeDeclaration_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStringTypeTypeDeclaration(this);
    }

    public PStringTypeDeclaration getStringTypeDeclaration()
    {
        return this._stringTypeDeclaration_;
    }

    public void setStringTypeDeclaration(PStringTypeDeclaration node)
    {
        if(this._stringTypeDeclaration_ != null)
        {
            this._stringTypeDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stringTypeDeclaration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stringTypeDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stringTypeDeclaration_ == child)
        {
            this._stringTypeDeclaration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._stringTypeDeclaration_ == oldChild)
        {
            setStringTypeDeclaration((PStringTypeDeclaration) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
