/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AInlineArraySpecification extends PArraySpecification
{
    private TArrayToken _arrayToken_;
    private TLbrack _lbrack_;
    private PSubrangeList _subrangeList_;
    private TRbrack _rbrack_;
    private TOfToken _ofToken_;
    private PNonGenericTypeName _nonGenericTypeName_;

    public AInlineArraySpecification()
    {
        // Constructor
    }

    public AInlineArraySpecification(
        @SuppressWarnings("hiding") TArrayToken _arrayToken_,
        @SuppressWarnings("hiding") TLbrack _lbrack_,
        @SuppressWarnings("hiding") PSubrangeList _subrangeList_,
        @SuppressWarnings("hiding") TRbrack _rbrack_,
        @SuppressWarnings("hiding") TOfToken _ofToken_,
        @SuppressWarnings("hiding") PNonGenericTypeName _nonGenericTypeName_)
    {
        // Constructor
        setArrayToken(_arrayToken_);

        setLbrack(_lbrack_);

        setSubrangeList(_subrangeList_);

        setRbrack(_rbrack_);

        setOfToken(_ofToken_);

        setNonGenericTypeName(_nonGenericTypeName_);

    }

    @Override
    public Object clone()
    {
        return new AInlineArraySpecification(
            cloneNode(this._arrayToken_),
            cloneNode(this._lbrack_),
            cloneNode(this._subrangeList_),
            cloneNode(this._rbrack_),
            cloneNode(this._ofToken_),
            cloneNode(this._nonGenericTypeName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInlineArraySpecification(this);
    }

    public TArrayToken getArrayToken()
    {
        return this._arrayToken_;
    }

    public void setArrayToken(TArrayToken node)
    {
        if(this._arrayToken_ != null)
        {
            this._arrayToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrayToken_ = node;
    }

    public TLbrack getLbrack()
    {
        return this._lbrack_;
    }

    public void setLbrack(TLbrack node)
    {
        if(this._lbrack_ != null)
        {
            this._lbrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lbrack_ = node;
    }

    public PSubrangeList getSubrangeList()
    {
        return this._subrangeList_;
    }

    public void setSubrangeList(PSubrangeList node)
    {
        if(this._subrangeList_ != null)
        {
            this._subrangeList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._subrangeList_ = node;
    }

    public TRbrack getRbrack()
    {
        return this._rbrack_;
    }

    public void setRbrack(TRbrack node)
    {
        if(this._rbrack_ != null)
        {
            this._rbrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rbrack_ = node;
    }

    public TOfToken getOfToken()
    {
        return this._ofToken_;
    }

    public void setOfToken(TOfToken node)
    {
        if(this._ofToken_ != null)
        {
            this._ofToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ofToken_ = node;
    }

    public PNonGenericTypeName getNonGenericTypeName()
    {
        return this._nonGenericTypeName_;
    }

    public void setNonGenericTypeName(PNonGenericTypeName node)
    {
        if(this._nonGenericTypeName_ != null)
        {
            this._nonGenericTypeName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nonGenericTypeName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._arrayToken_)
            + toString(this._lbrack_)
            + toString(this._subrangeList_)
            + toString(this._rbrack_)
            + toString(this._ofToken_)
            + toString(this._nonGenericTypeName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._arrayToken_ == child)
        {
            this._arrayToken_ = null;
            return;
        }

        if(this._lbrack_ == child)
        {
            this._lbrack_ = null;
            return;
        }

        if(this._subrangeList_ == child)
        {
            this._subrangeList_ = null;
            return;
        }

        if(this._rbrack_ == child)
        {
            this._rbrack_ = null;
            return;
        }

        if(this._ofToken_ == child)
        {
            this._ofToken_ = null;
            return;
        }

        if(this._nonGenericTypeName_ == child)
        {
            this._nonGenericTypeName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._arrayToken_ == oldChild)
        {
            setArrayToken((TArrayToken) newChild);
            return;
        }

        if(this._lbrack_ == oldChild)
        {
            setLbrack((TLbrack) newChild);
            return;
        }

        if(this._subrangeList_ == oldChild)
        {
            setSubrangeList((PSubrangeList) newChild);
            return;
        }

        if(this._rbrack_ == oldChild)
        {
            setRbrack((TRbrack) newChild);
            return;
        }

        if(this._ofToken_ == oldChild)
        {
            setOfToken((TOfToken) newChild);
            return;
        }

        if(this._nonGenericTypeName_ == oldChild)
        {
            setNonGenericTypeName((PNonGenericTypeName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
