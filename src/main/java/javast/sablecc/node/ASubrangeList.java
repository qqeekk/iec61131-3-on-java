/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import java.util.*;
import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASubrangeList extends PSubrangeList
{
    private final LinkedList<PSubrangeListHead> _subrangeListHead_ = new LinkedList<PSubrangeListHead>();
    private PSubrange _subrange_;

    public ASubrangeList()
    {
        // Constructor
    }

    public ASubrangeList(
        @SuppressWarnings("hiding") List<?> _subrangeListHead_,
        @SuppressWarnings("hiding") PSubrange _subrange_)
    {
        // Constructor
        setSubrangeListHead(_subrangeListHead_);

        setSubrange(_subrange_);

    }

    @Override
    public Object clone()
    {
        return new ASubrangeList(
            cloneList(this._subrangeListHead_),
            cloneNode(this._subrange_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASubrangeList(this);
    }

    public LinkedList<PSubrangeListHead> getSubrangeListHead()
    {
        return this._subrangeListHead_;
    }

    public void setSubrangeListHead(List<?> list)
    {
        for(PSubrangeListHead e : this._subrangeListHead_)
        {
            e.parent(null);
        }
        this._subrangeListHead_.clear();

        for(Object obj_e : list)
        {
            PSubrangeListHead e = (PSubrangeListHead) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._subrangeListHead_.add(e);
        }
    }

    public PSubrange getSubrange()
    {
        return this._subrange_;
    }

    public void setSubrange(PSubrange node)
    {
        if(this._subrange_ != null)
        {
            this._subrange_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._subrange_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._subrangeListHead_)
            + toString(this._subrange_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._subrangeListHead_.remove(child))
        {
            return;
        }

        if(this._subrange_ == child)
        {
            this._subrange_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PSubrangeListHead> i = this._subrangeListHead_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSubrangeListHead) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._subrange_ == oldChild)
        {
            setSubrange((PSubrange) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
