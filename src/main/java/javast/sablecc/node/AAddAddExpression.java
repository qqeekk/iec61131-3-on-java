/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AAddAddExpression extends PAddExpression
{
    private PAddExpression _addExpression_;
    private PAddOperator _addOperator_;
    private PTerm _term_;

    public AAddAddExpression()
    {
        // Constructor
    }

    public AAddAddExpression(
        @SuppressWarnings("hiding") PAddExpression _addExpression_,
        @SuppressWarnings("hiding") PAddOperator _addOperator_,
        @SuppressWarnings("hiding") PTerm _term_)
    {
        // Constructor
        setAddExpression(_addExpression_);

        setAddOperator(_addOperator_);

        setTerm(_term_);

    }

    @Override
    public Object clone()
    {
        return new AAddAddExpression(
            cloneNode(this._addExpression_),
            cloneNode(this._addOperator_),
            cloneNode(this._term_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAddAddExpression(this);
    }

    public PAddExpression getAddExpression()
    {
        return this._addExpression_;
    }

    public void setAddExpression(PAddExpression node)
    {
        if(this._addExpression_ != null)
        {
            this._addExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._addExpression_ = node;
    }

    public PAddOperator getAddOperator()
    {
        return this._addOperator_;
    }

    public void setAddOperator(PAddOperator node)
    {
        if(this._addOperator_ != null)
        {
            this._addOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._addOperator_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._addExpression_)
            + toString(this._addOperator_)
            + toString(this._term_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._addExpression_ == child)
        {
            this._addExpression_ = null;
            return;
        }

        if(this._addOperator_ == child)
        {
            this._addOperator_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._addExpression_ == oldChild)
        {
            setAddExpression((PAddExpression) newChild);
            return;
        }

        if(this._addOperator_ == oldChild)
        {
            setAddOperator((PAddOperator) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
