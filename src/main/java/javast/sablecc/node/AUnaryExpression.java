/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import java.util.*;
import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AUnaryExpression extends PUnaryExpression
{
    private final LinkedList<TUnaryOperator> _unaryOperator_ = new LinkedList<TUnaryOperator>();
    private PPrimaryExpression _primaryExpression_;

    public AUnaryExpression()
    {
        // Constructor
    }

    public AUnaryExpression(
        @SuppressWarnings("hiding") List<?> _unaryOperator_,
        @SuppressWarnings("hiding") PPrimaryExpression _primaryExpression_)
    {
        // Constructor
        setUnaryOperator(_unaryOperator_);

        setPrimaryExpression(_primaryExpression_);

    }

    @Override
    public Object clone()
    {
        return new AUnaryExpression(
            cloneList(this._unaryOperator_),
            cloneNode(this._primaryExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnaryExpression(this);
    }

    public LinkedList<TUnaryOperator> getUnaryOperator()
    {
        return this._unaryOperator_;
    }

    public void setUnaryOperator(List<?> list)
    {
        for(TUnaryOperator e : this._unaryOperator_)
        {
            e.parent(null);
        }
        this._unaryOperator_.clear();

        for(Object obj_e : list)
        {
            TUnaryOperator e = (TUnaryOperator) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._unaryOperator_.add(e);
        }
    }

    public PPrimaryExpression getPrimaryExpression()
    {
        return this._primaryExpression_;
    }

    public void setPrimaryExpression(PPrimaryExpression node)
    {
        if(this._primaryExpression_ != null)
        {
            this._primaryExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._primaryExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._unaryOperator_)
            + toString(this._primaryExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._unaryOperator_.remove(child))
        {
            return;
        }

        if(this._primaryExpression_ == child)
        {
            this._primaryExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TUnaryOperator> i = this._unaryOperator_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TUnaryOperator) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._primaryExpression_ == oldChild)
        {
            setPrimaryExpression((PPrimaryExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
