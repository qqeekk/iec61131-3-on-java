/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AWhileStatement extends PWhileStatement
{
    private TWhileToken _whileToken_;
    private PExpression _expression_;
    private TDoToken _doToken_;
    private PStatementList _statementList_;
    private TEndWhileToken _endWhileToken_;

    public AWhileStatement()
    {
        // Constructor
    }

    public AWhileStatement(
        @SuppressWarnings("hiding") TWhileToken _whileToken_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TDoToken _doToken_,
        @SuppressWarnings("hiding") PStatementList _statementList_,
        @SuppressWarnings("hiding") TEndWhileToken _endWhileToken_)
    {
        // Constructor
        setWhileToken(_whileToken_);

        setExpression(_expression_);

        setDoToken(_doToken_);

        setStatementList(_statementList_);

        setEndWhileToken(_endWhileToken_);

    }

    @Override
    public Object clone()
    {
        return new AWhileStatement(
            cloneNode(this._whileToken_),
            cloneNode(this._expression_),
            cloneNode(this._doToken_),
            cloneNode(this._statementList_),
            cloneNode(this._endWhileToken_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileStatement(this);
    }

    public TWhileToken getWhileToken()
    {
        return this._whileToken_;
    }

    public void setWhileToken(TWhileToken node)
    {
        if(this._whileToken_ != null)
        {
            this._whileToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._whileToken_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TDoToken getDoToken()
    {
        return this._doToken_;
    }

    public void setDoToken(TDoToken node)
    {
        if(this._doToken_ != null)
        {
            this._doToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._doToken_ = node;
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    public TEndWhileToken getEndWhileToken()
    {
        return this._endWhileToken_;
    }

    public void setEndWhileToken(TEndWhileToken node)
    {
        if(this._endWhileToken_ != null)
        {
            this._endWhileToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endWhileToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._whileToken_)
            + toString(this._expression_)
            + toString(this._doToken_)
            + toString(this._statementList_)
            + toString(this._endWhileToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._whileToken_ == child)
        {
            this._whileToken_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._doToken_ == child)
        {
            this._doToken_ = null;
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        if(this._endWhileToken_ == child)
        {
            this._endWhileToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._whileToken_ == oldChild)
        {
            setWhileToken((TWhileToken) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._doToken_ == oldChild)
        {
            setDoToken((TDoToken) newChild);
            return;
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        if(this._endWhileToken_ == oldChild)
        {
            setEndWhileToken((TEndWhileToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
