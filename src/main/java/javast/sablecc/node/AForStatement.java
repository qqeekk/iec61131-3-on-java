/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AForStatement extends PForStatement
{
    private TForToken _forToken_;
    private PControlVariable _controlVariable_;
    private TColonEq _colonEq_;
    private PForList _forList_;
    private TDoToken _doToken_;
    private PStatementList _statementList_;
    private TEndForToken _endForToken_;

    public AForStatement()
    {
        // Constructor
    }

    public AForStatement(
        @SuppressWarnings("hiding") TForToken _forToken_,
        @SuppressWarnings("hiding") PControlVariable _controlVariable_,
        @SuppressWarnings("hiding") TColonEq _colonEq_,
        @SuppressWarnings("hiding") PForList _forList_,
        @SuppressWarnings("hiding") TDoToken _doToken_,
        @SuppressWarnings("hiding") PStatementList _statementList_,
        @SuppressWarnings("hiding") TEndForToken _endForToken_)
    {
        // Constructor
        setForToken(_forToken_);

        setControlVariable(_controlVariable_);

        setColonEq(_colonEq_);

        setForList(_forList_);

        setDoToken(_doToken_);

        setStatementList(_statementList_);

        setEndForToken(_endForToken_);

    }

    @Override
    public Object clone()
    {
        return new AForStatement(
            cloneNode(this._forToken_),
            cloneNode(this._controlVariable_),
            cloneNode(this._colonEq_),
            cloneNode(this._forList_),
            cloneNode(this._doToken_),
            cloneNode(this._statementList_),
            cloneNode(this._endForToken_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatement(this);
    }

    public TForToken getForToken()
    {
        return this._forToken_;
    }

    public void setForToken(TForToken node)
    {
        if(this._forToken_ != null)
        {
            this._forToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forToken_ = node;
    }

    public PControlVariable getControlVariable()
    {
        return this._controlVariable_;
    }

    public void setControlVariable(PControlVariable node)
    {
        if(this._controlVariable_ != null)
        {
            this._controlVariable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._controlVariable_ = node;
    }

    public TColonEq getColonEq()
    {
        return this._colonEq_;
    }

    public void setColonEq(TColonEq node)
    {
        if(this._colonEq_ != null)
        {
            this._colonEq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colonEq_ = node;
    }

    public PForList getForList()
    {
        return this._forList_;
    }

    public void setForList(PForList node)
    {
        if(this._forList_ != null)
        {
            this._forList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forList_ = node;
    }

    public TDoToken getDoToken()
    {
        return this._doToken_;
    }

    public void setDoToken(TDoToken node)
    {
        if(this._doToken_ != null)
        {
            this._doToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._doToken_ = node;
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    public TEndForToken getEndForToken()
    {
        return this._endForToken_;
    }

    public void setEndForToken(TEndForToken node)
    {
        if(this._endForToken_ != null)
        {
            this._endForToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endForToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._forToken_)
            + toString(this._controlVariable_)
            + toString(this._colonEq_)
            + toString(this._forList_)
            + toString(this._doToken_)
            + toString(this._statementList_)
            + toString(this._endForToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._forToken_ == child)
        {
            this._forToken_ = null;
            return;
        }

        if(this._controlVariable_ == child)
        {
            this._controlVariable_ = null;
            return;
        }

        if(this._colonEq_ == child)
        {
            this._colonEq_ = null;
            return;
        }

        if(this._forList_ == child)
        {
            this._forList_ = null;
            return;
        }

        if(this._doToken_ == child)
        {
            this._doToken_ = null;
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        if(this._endForToken_ == child)
        {
            this._endForToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._forToken_ == oldChild)
        {
            setForToken((TForToken) newChild);
            return;
        }

        if(this._controlVariable_ == oldChild)
        {
            setControlVariable((PControlVariable) newChild);
            return;
        }

        if(this._colonEq_ == oldChild)
        {
            setColonEq((TColonEq) newChild);
            return;
        }

        if(this._forList_ == oldChild)
        {
            setForList((PForList) newChild);
            return;
        }

        if(this._doToken_ == oldChild)
        {
            setDoToken((TDoToken) newChild);
            return;
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        if(this._endForToken_ == oldChild)
        {
            setEndForToken((TEndForToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
