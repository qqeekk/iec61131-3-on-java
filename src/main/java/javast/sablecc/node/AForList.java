/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.node;

import javast.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AForList extends PForList
{
    private PExpression _from_;
    private TToToken _toToken_;
    private PExpression _to_;
    private PForListByClause _forListByClause_;

    public AForList()
    {
        // Constructor
    }

    public AForList(
        @SuppressWarnings("hiding") PExpression _from_,
        @SuppressWarnings("hiding") TToToken _toToken_,
        @SuppressWarnings("hiding") PExpression _to_,
        @SuppressWarnings("hiding") PForListByClause _forListByClause_)
    {
        // Constructor
        setFrom(_from_);

        setToToken(_toToken_);

        setTo(_to_);

        setForListByClause(_forListByClause_);

    }

    @Override
    public Object clone()
    {
        return new AForList(
            cloneNode(this._from_),
            cloneNode(this._toToken_),
            cloneNode(this._to_),
            cloneNode(this._forListByClause_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForList(this);
    }

    public PExpression getFrom()
    {
        return this._from_;
    }

    public void setFrom(PExpression node)
    {
        if(this._from_ != null)
        {
            this._from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._from_ = node;
    }

    public TToToken getToToken()
    {
        return this._toToken_;
    }

    public void setToToken(TToToken node)
    {
        if(this._toToken_ != null)
        {
            this._toToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._toToken_ = node;
    }

    public PExpression getTo()
    {
        return this._to_;
    }

    public void setTo(PExpression node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PForListByClause getForListByClause()
    {
        return this._forListByClause_;
    }

    public void setForListByClause(PForListByClause node)
    {
        if(this._forListByClause_ != null)
        {
            this._forListByClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forListByClause_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._from_)
            + toString(this._toToken_)
            + toString(this._to_)
            + toString(this._forListByClause_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._from_ == child)
        {
            this._from_ = null;
            return;
        }

        if(this._toToken_ == child)
        {
            this._toToken_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._forListByClause_ == child)
        {
            this._forListByClause_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._from_ == oldChild)
        {
            setFrom((PExpression) newChild);
            return;
        }

        if(this._toToken_ == oldChild)
        {
            setToToken((TToToken) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((PExpression) newChild);
            return;
        }

        if(this._forListByClause_ == oldChild)
        {
            setForListByClause((PForListByClause) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
