/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.analysis;

import javast.sablecc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseALibrary(ALibrary node);
    void caseADataTypeLibraryElementDeclaration(ADataTypeLibraryElementDeclaration node);
    void caseAFunctionLibraryElementDeclaration(AFunctionLibraryElementDeclaration node);
    void caseAFunctionBlockLibraryElementDeclaration(AFunctionBlockLibraryElementDeclaration node);
    void caseAProgramLibraryElementDeclaration(AProgramLibraryElementDeclaration node);
    void caseAElementaryNonGenericTypeName(AElementaryNonGenericTypeName node);
    void caseADerivedNonGenericTypeName(ADerivedNonGenericTypeName node);
    void caseANumericElementaryTypeName(ANumericElementaryTypeName node);
    void caseADateElementaryTypeName(ADateElementaryTypeName node);
    void caseABitStringElementaryTypeName(ABitStringElementaryTypeName node);
    void caseAStringElementaryTypeName(AStringElementaryTypeName node);
    void caseAWstringElementaryTypeName(AWstringElementaryTypeName node);
    void caseATimeElementaryTypeName(ATimeElementaryTypeName node);
    void caseAIntegerNumericTypeName(AIntegerNumericTypeName node);
    void caseARealNumericTypeName(ARealNumericTypeName node);
    void caseASignedIntegerIntegerTypeName(ASignedIntegerIntegerTypeName node);
    void caseAUnsignedIntegerIntegerTypeName(AUnsignedIntegerIntegerTypeName node);
    void caseANumericConstant(ANumericConstant node);
    void caseACharacterConstant(ACharacterConstant node);
    void caseATimeConstant(ATimeConstant node);
    void caseABitStringConstant(ABitStringConstant node);
    void caseABooleanConstant(ABooleanConstant node);
    void caseAIntegerNumericLiteral(AIntegerNumericLiteral node);
    void caseARealNumericLiteral(ARealNumericLiteral node);
    void caseAIntegerTypeNameHashed(AIntegerTypeNameHashed node);
    void caseAIntegerLiteral(AIntegerLiteral node);
    void caseARealTypeNameHashed(ARealTypeNameHashed node);
    void caseARealLiteral(ARealLiteral node);
    void caseABitStringLiteralTypeNameHashed(ABitStringLiteralTypeNameHashed node);
    void caseABitStringLiteral(ABitStringLiteral node);
    void caseABoolTypeNameHashed(ABoolTypeNameHashed node);
    void caseANumericBooleanLiteral(ANumericBooleanLiteral node);
    void caseALiteralBooleanLiteral(ALiteralBooleanLiteral node);
    void caseASingleCharacterString(ASingleCharacterString node);
    void caseADoubleCharacterString(ADoubleCharacterString node);
    void caseADurationTimeLiteral(ADurationTimeLiteral node);
    void caseATimeOfDayTimeLiteral(ATimeOfDayTimeLiteral node);
    void caseADateTimeLiteral(ADateTimeLiteral node);
    void caseADateAndTimeTimeLiteral(ADateAndTimeTimeLiteral node);
    void caseADuration(ADuration node);
    void caseADaysInterval(ADaysInterval node);
    void caseAHoursInterval(AHoursInterval node);
    void caseAMinutesInterval(AMinutesInterval node);
    void caseASecondsInterval(ASecondsInterval node);
    void caseAMillisecondsInterval(AMillisecondsInterval node);
    void caseADecimalDays(ADecimalDays node);
    void caseAHourlyDays(AHourlyDays node);
    void caseAFixedPointRealPart(AFixedPointRealPart node);
    void caseAFixedPoint(AFixedPoint node);
    void caseADecimalHours(ADecimalHours node);
    void caseAMinutelyHours(AMinutelyHours node);
    void caseADecimalMinutes(ADecimalMinutes node);
    void caseASecondlyMinutes(ASecondlyMinutes node);
    void caseADecimalSeconds(ADecimalSeconds node);
    void caseAMillisecondlySeconds(AMillisecondlySeconds node);
    void caseAMilliseconds(AMilliseconds node);
    void caseATimeOfDay(ATimeOfDay node);
    void caseADaytime(ADaytime node);
    void caseADayHour(ADayHour node);
    void caseADayMinute(ADayMinute node);
    void caseADaySecond(ADaySecond node);
    void caseADate(ADate node);
    void caseADateLiteral(ADateLiteral node);
    void caseAYear(AYear node);
    void caseAMonth(AMonth node);
    void caseADay(ADay node);
    void caseADateAndTime(ADateAndTime node);
    void caseAArrayStructStringSimpleDerivedTypeName(AArrayStructStringSimpleDerivedTypeName node);
    void caseASimpleTypeName(ASimpleTypeName node);
    void caseAArrayTypeName(AArrayTypeName node);
    void caseAStructureTypeName(AStructureTypeName node);
    void caseAStringTypeName(AStringTypeName node);
    void caseAStructureElementName(AStructureElementName node);
    void caseADataTypeDeclarationElement(ADataTypeDeclarationElement node);
    void caseADataTypeDeclaration(ADataTypeDeclaration node);
    void caseASingleTypeTypeDeclaration(ASingleTypeTypeDeclaration node);
    void caseAArrayTypeTypeDeclaration(AArrayTypeTypeDeclaration node);
    void caseAStructTypeTypeDeclaration(AStructTypeTypeDeclaration node);
    void caseAStringTypeTypeDeclaration(AStringTypeTypeDeclaration node);
    void caseAArrayTypeDeclaration(AArrayTypeDeclaration node);
    void caseASingleElementTypeDeclaration(ASingleElementTypeDeclaration node);
    void caseASimpleTypeDeclaration(ASimpleTypeDeclaration node);
    void caseASimpleSpecInitialization(ASimpleSpecInitialization node);
    void caseASimpleSpecInit(ASimpleSpecInit node);
    void caseAElementarySimpleSpecification(AElementarySimpleSpecification node);
    void caseASubrange(ASubrange node);
    void caseASubrangeList(ASubrangeList node);
    void caseASubrangeListHead(ASubrangeListHead node);
    void caseAArraySpecInitialization(AArraySpecInitialization node);
    void caseAArraySpecInit(AArraySpecInit node);
    void caseAInlineArraySpecification(AInlineArraySpecification node);
    void caseAArrayInitialization(AArrayInitialization node);
    void caseAArrayInitialElementsList(AArrayInitialElementsList node);
    void caseAArrayInitialElementsListHead(AArrayInitialElementsListHead node);
    void caseASingleArrayInitialElements(ASingleArrayInitialElements node);
    void caseARepeatArrayInitialElements(ARepeatArrayInitialElements node);
    void caseAConstantInitialElement(AConstantInitialElement node);
    void caseAStructInitialElement(AStructInitialElement node);
    void caseAArrayInitialElement(AArrayInitialElement node);
    void caseAStructureTypeDeclaration(AStructureTypeDeclaration node);
    void caseAStructureDeclarationStructureSpecification(AStructureDeclarationStructureSpecification node);
    void caseAInitializedStructureSpecification(AInitializedStructureSpecification node);
    void caseAInitializedStructureInitialization(AInitializedStructureInitialization node);
    void caseAInitializedStructure(AInitializedStructure node);
    void caseAStructureDeclaration(AStructureDeclaration node);
    void caseAStructureElementDeclarationList(AStructureElementDeclarationList node);
    void caseAStructureElementDeclarationListHead(AStructureElementDeclarationListHead node);
    void caseAStructureElementDeclaration(AStructureElementDeclaration node);
    void caseASimpleStructureElementInit(ASimpleStructureElementInit node);
    void caseAArrayStructureElementInit(AArrayStructureElementInit node);
    void caseAStructStructureElementInit(AStructStructureElementInit node);
    void caseAStructureInitialization(AStructureInitialization node);
    void caseAStructureElementInitializationList(AStructureElementInitializationList node);
    void caseAStructureElementInitializationListHead(AStructureElementInitializationListHead node);
    void caseAStructureElementInitialization(AStructureElementInitialization node);
    void caseAStringStringWstringTypeName(AStringStringWstringTypeName node);
    void caseAWstringStringWstringTypeName(AWstringStringWstringTypeName node);
    void caseAStringTypeDeclarationLenSpec(AStringTypeDeclarationLenSpec node);
    void caseAStringTypeDeclarationInitialization(AStringTypeDeclarationInitialization node);
    void caseALenStringTypeDeclaration(ALenStringTypeDeclaration node);
    void caseADirectVariableVariable(ADirectVariableVariable node);
    void caseASymbolicVariableVariable(ASymbolicVariableVariable node);
    void caseADirectVariableVariableComplex(ADirectVariableVariableComplex node);
    void caseASymbolicVariableVariableComplex(ASymbolicVariableVariableComplex node);
    void caseAVariableSymbolicVariable(AVariableSymbolicVariable node);
    void caseAArraySymbolicVariable(AArraySymbolicVariable node);
    void caseAStructSymbolicVariable(AStructSymbolicVariable node);
    void caseAArraySymbolicVariableComplex(AArraySymbolicVariableComplex node);
    void caseAStructSymbolicVariableComplex(AStructSymbolicVariableComplex node);
    void caseADirectVariable(ADirectVariable node);
    void caseAPrefixedInteger(APrefixedInteger node);
    void caseASubscriptList(ASubscriptList node);
    void caseASubscriptListHead(ASubscriptListHead node);
    void caseASubscript(ASubscript node);
    void caseAFieldSelector(AFieldSelector node);
    void caseAInputDeclarations(AInputDeclarations node);
    void caseAOutputDeclarations(AOutputDeclarations node);
    void caseAInputOutputDeclarations(AInputOutputDeclarations node);
    void caseAVarDeclarations(AVarDeclarations node);
    void caseAExternalVarDeclarations(AExternalVarDeclarations node);
    void caseATempVarDeclarations(ATempVarDeclarations node);
    void caseAVarInitDecls(AVarInitDecls node);
    void caseAVarInitDeclsHead(AVarInitDeclsHead node);
    void caseAVarInitDecl(AVarInitDecl node);
    void caseAStructFbNameVarInitDeclSpec(AStructFbNameVarInitDeclSpec node);
    void caseAVarVarInitDeclSpec(AVarVarInitDeclSpec node);
    void caseAArrayVarVarInitDeclSpec(AArrayVarVarInitDeclSpec node);
    void caseASStringVarInitDeclSpec(ASStringVarInitDeclSpec node);
    void caseADStringVarInitDeclSpec(ADStringVarInitDeclSpec node);
    void caseAVar1List(AVar1List node);
    void caseAVar1ListHead(AVar1ListHead node);
    void caseASimpleVar1SpecInit(ASimpleVar1SpecInit node);
    void caseAConstantConstantTokenOrRetain(AConstantConstantTokenOrRetain node);
    void caseARetainConstantTokenOrRetain(ARetainConstantTokenOrRetain node);
    void caseALocatedVarDeclarations(ALocatedVarDeclarations node);
    void caseALocatedVarDeclList(ALocatedVarDeclList node);
    void caseALocatedVarDeclListHead(ALocatedVarDeclListHead node);
    void caseALocatedVarDecl(ALocatedVarDecl node);
    void caseASimpleLocatedVarSpecInit(ASimpleLocatedVarSpecInit node);
    void caseAArrayLocatedVarSpecInit(AArrayLocatedVarSpecInit node);
    void caseAStructLocatedVarSpecInit(AStructLocatedVarSpecInit node);
    void caseASstringLocatedVarSpecInit(ASstringLocatedVarSpecInit node);
    void caseADstringLocatedVarSpecInit(ADstringLocatedVarSpecInit node);
    void caseALocation(ALocation node);
    void caseABrackInteger(ABrackInteger node);
    void caseASingleByteStringSpecInitialization(ASingleByteStringSpecInitialization node);
    void caseASingleByteStringSpec(ASingleByteStringSpec node);
    void caseADoubleByteStringSpecInitialization(ADoubleByteStringSpecInitialization node);
    void caseADoubleByteStringSpec(ADoubleByteStringSpec node);
    void caseAFunctionName(AFunctionName node);
    void caseAFunctionDeclaration(AFunctionDeclaration node);
    void caseAElementaryReturnTypeName(AElementaryReturnTypeName node);
    void caseADerivedReturnTypeName(ADerivedReturnTypeName node);
    void caseAIoFunctionVarDeclaration(AIoFunctionVarDeclaration node);
    void caseAFunctionFunctionVarDeclaration(AFunctionFunctionVarDeclaration node);
    void caseAInputIoVarDeclarations(AInputIoVarDeclarations node);
    void caseAOuputIoVarDeclarations(AOuputIoVarDeclarations node);
    void caseAIoIoVarDeclarations(AIoIoVarDeclarations node);
    void caseAFunctionBody(AFunctionBody node);
    void caseAStandardFunctionBlockTypeName(AStandardFunctionBlockTypeName node);
    void caseADerivedFunctionBlockTypeName(ADerivedFunctionBlockTypeName node);
    void caseADerivedFunctionBlockName(ADerivedFunctionBlockName node);
    void caseAFunctionBlockDeclaration(AFunctionBlockDeclaration node);
    void caseAIoFunctionBlockVarDeclarations(AIoFunctionBlockVarDeclarations node);
    void caseAOtherFunctionBlockVarDeclarations(AOtherFunctionBlockVarDeclarations node);
    void caseAExternalOtherVarDeclarations(AExternalOtherVarDeclarations node);
    void caseAVarOtherVarDeclarations(AVarOtherVarDeclarations node);
    void caseATempOtherVarDeclarations(ATempOtherVarDeclarations node);
    void caseAFunctionBlockBody(AFunctionBlockBody node);
    void caseAProgramTypeName(AProgramTypeName node);
    void caseAAccessName(AAccessName node);
    void caseAProgramDeclaration(AProgramDeclaration node);
    void caseAIoProgramVarDeclarations(AIoProgramVarDeclarations node);
    void caseAOtherProgramVarDeclarations(AOtherProgramVarDeclarations node);
    void caseALocatedProgramVarDeclarations(ALocatedProgramVarDeclarations node);
    void caseAAccessProgramVarDeclarations(AAccessProgramVarDeclarations node);
    void caseAProgramAccessDecls(AProgramAccessDecls node);
    void caseAProgramAccessDeclList(AProgramAccessDeclList node);
    void caseAProgramAccessDeclListHead(AProgramAccessDeclListHead node);
    void caseAProgramAccessDecl(AProgramAccessDecl node);
    void caseAOrExpression(AOrExpression node);
    void caseAUnaryExpressionExpression(AUnaryExpressionExpression node);
    void caseAXorXorExpression(AXorXorExpression node);
    void caseAUnaryXorExpression(AUnaryXorExpression node);
    void caseAAndAndExpression(AAndAndExpression node);
    void caseAUnaryAndExpression(AUnaryAndExpression node);
    void caseAComparisonComparison(AComparisonComparison node);
    void caseAUnaryComparison(AUnaryComparison node);
    void caseAEquEquExpression(AEquEquExpression node);
    void caseAUnaryEquExpression(AUnaryEquExpression node);
    void caseAAddAddExpression(AAddAddExpression node);
    void caseAUnaryAddExpression(AUnaryAddExpression node);
    void caseAAddOperator(AAddOperator node);
    void caseAMulTerm(AMulTerm node);
    void caseATermTerm(ATermTerm node);
    void caseAPowerPowerExpression(APowerPowerExpression node);
    void caseAUnaryPowerExpression(AUnaryPowerExpression node);
    void caseAUnaryExpression(AUnaryExpression node);
    void caseAConstantPrimaryExpression(AConstantPrimaryExpression node);
    void caseAVariablePrimaryExpression(AVariablePrimaryExpression node);
    void caseAParenPrimaryExpression(AParenPrimaryExpression node);
    void caseACallPrimaryExpression(ACallPrimaryExpression node);
    void caseAParamAssignmentList(AParamAssignmentList node);
    void caseAParamAssignmentListHead(AParamAssignmentListHead node);
    void caseAStatementList(AStatementList node);
    void caseAStatementListHead(AStatementListHead node);
    void caseAAssignStatement(AAssignStatement node);
    void caseACallStatement(ACallStatement node);
    void caseAAssign2Statement(AAssign2Statement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseASelectionStatement(ASelectionStatement node);
    void caseAIterStatement(AIterStatement node);
    void caseAParamAssignmentLvalue(AParamAssignmentLvalue node);
    void caseAExprParamAssignment(AExprParamAssignment node);
    void caseAArrowParamAssignment(AArrowParamAssignment node);
    void caseAIfSelectionStatement(AIfSelectionStatement node);
    void caseACaseSelectionStatement(ACaseSelectionStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAElseifStatement(AElseifStatement node);
    void caseAElseStatement(AElseStatement node);
    void caseACaseStatementElseClause(ACaseStatementElseClause node);
    void caseACaseStatement(ACaseStatement node);
    void caseACaseElement(ACaseElement node);
    void caseACaseList(ACaseList node);
    void caseACaseListHead(ACaseListHead node);
    void caseASubrangeCaseListElement(ASubrangeCaseListElement node);
    void caseAIntegerCaseListElement(AIntegerCaseListElement node);
    void caseAForIterationStatement(AForIterationStatement node);
    void caseAWhileIterationStatement(AWhileIterationStatement node);
    void caseARepeatIterationStatement(ARepeatIterationStatement node);
    void caseAExitIterationStatement(AExitIterationStatement node);
    void caseAForStatement(AForStatement node);
    void caseAControlVariable(AControlVariable node);
    void caseAForListByClause(AForListByClause node);
    void caseAForList(AForList node);
    void caseAWhileStatement(AWhileStatement node);
    void caseARepeatStatement(ARepeatStatement node);
    void caseAExitStatement(AExitStatement node);

    void caseTBit(TBit node);
    void caseTSign(TSign node);
    void caseTDollar(TDollar node);
    void caseTHash(THash node);
    void caseTDot(TDot node);
    void caseTDash(TDash node);
    void caseTUnderscore(TUnderscore node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTColonEq(TColonEq node);
    void caseTDotDot(TDotDot node);
    void caseTComma(TComma node);
    void caseTLparen(TLparen node);
    void caseTRparen(TRparen node);
    void caseTLbrack(TLbrack node);
    void caseTRbrack(TRbrack node);
    void caseTPercent(TPercent node);
    void caseTOrToken(TOrToken node);
    void caseTXorToken(TXorToken node);
    void caseTAndTokenFull(TAndTokenFull node);
    void caseTEqTokenFull(TEqTokenFull node);
    void caseTComparisonOperator(TComparisonOperator node);
    void caseTMulOperator(TMulOperator node);
    void caseTUnaryOperator(TUnaryOperator node);
    void caseTNotToken(TNotToken node);
    void caseTPowerToken(TPowerToken node);
    void caseTReturnToken(TReturnToken node);
    void caseTArrowToken(TArrowToken node);
    void caseTIdentifier(TIdentifier node);
    void caseTSingleByteCharacterString(TSingleByteCharacterString node);
    void caseTDoubleByteCharacterString(TDoubleByteCharacterString node);
    void caseTExponentSign(TExponentSign node);
    void caseTExponent(TExponent node);
    void caseTSignedInteger(TSignedInteger node);
    void caseTInteger(TInteger node);
    void caseTSignedIntegerLiteral(TSignedIntegerLiteral node);
    void caseTUnsignedIntegerLiteral(TUnsignedIntegerLiteral node);
    void caseTString1TypeName(TString1TypeName node);
    void caseTWstringTypeName(TWstringTypeName node);
    void caseTTimeTypeName(TTimeTypeName node);
    void caseTTimeTypeNameFull(TTimeTypeNameFull node);
    void caseTSignedIntegerTypeName(TSignedIntegerTypeName node);
    void caseTUnsignedIntegerTypeName(TUnsignedIntegerTypeName node);
    void caseTRealTypeName(TRealTypeName node);
    void caseTDateTypeName(TDateTypeName node);
    void caseTBitStringTypeName(TBitStringTypeName node);
    void caseTBitStringLiteralTypeName(TBitStringLiteralTypeName node);
    void caseTBoolTypeName(TBoolTypeName node);
    void caseTTimeOfDayTypeNameFull(TTimeOfDayTypeNameFull node);
    void caseTDateTypeNameFull(TDateTypeNameFull node);
    void caseTDateAndTimeTypeNameFull(TDateAndTimeTypeNameFull node);
    void caseTTrueFalseLiteral(TTrueFalseLiteral node);
    void caseTDayIdentifier(TDayIdentifier node);
    void caseTHourIdentifier(THourIdentifier node);
    void caseTMinuteIdentifier(TMinuteIdentifier node);
    void caseTSecondIdentifier(TSecondIdentifier node);
    void caseTMillisecondIdentifier(TMillisecondIdentifier node);
    void caseTTypeToken(TTypeToken node);
    void caseTEndTypeToken(TEndTypeToken node);
    void caseTArrayToken(TArrayToken node);
    void caseTOfToken(TOfToken node);
    void caseTStructToken(TStructToken node);
    void caseTEndStructToken(TEndStructToken node);
    void caseTVarToken(TVarToken node);
    void caseTEndVarToken(TEndVarToken node);
    void caseTConstantToken(TConstantToken node);
    void caseTVarInputToken(TVarInputToken node);
    void caseTVarOutputToken(TVarOutputToken node);
    void caseTVarInOutToken(TVarInOutToken node);
    void caseTVarExternalToken(TVarExternalToken node);
    void caseTVarTempToken(TVarTempToken node);
    void caseTVarAccessToken(TVarAccessToken node);
    void caseTFunctionToken(TFunctionToken node);
    void caseTEndFunctionToken(TEndFunctionToken node);
    void caseTFunctionBlockToken(TFunctionBlockToken node);
    void caseTEndFunctionBlockToken(TEndFunctionBlockToken node);
    void caseTProgramToken(TProgramToken node);
    void caseTEndProgramToken(TEndProgramToken node);
    void caseTAtToken(TAtToken node);
    void caseTIfToken(TIfToken node);
    void caseTThenToken(TThenToken node);
    void caseTEndIfToken(TEndIfToken node);
    void caseTElseIfToken(TElseIfToken node);
    void caseTElseToken(TElseToken node);
    void caseTCaseToken(TCaseToken node);
    void caseTEndCaseToken(TEndCaseToken node);
    void caseTForToken(TForToken node);
    void caseTDoToken(TDoToken node);
    void caseTEndForToken(TEndForToken node);
    void caseTToToken(TToToken node);
    void caseTByToken(TByToken node);
    void caseTWhileToken(TWhileToken node);
    void caseTEndWhileToken(TEndWhileToken node);
    void caseTRepeatToken(TRepeatToken node);
    void caseTEndRepeatToken(TEndRepeatToken node);
    void caseTUntilToken(TUntilToken node);
    void caseTExitToken(TExitToken node);
    void caseTLocationPrefix(TLocationPrefix node);
    void caseTSizePrefix(TSizePrefix node);
    void caseTIncomplLocation(TIncomplLocation node);
    void caseTEdge(TEdge node);
    void caseTRetainToken(TRetainToken node);
    void caseTNonRetainToken(TNonRetainToken node);
    void caseTRetain(TRetain node);
    void caseTStandardFunctionBlockName(TStandardFunctionBlockName node);
    void caseTDirection(TDirection node);
    void caseTWhiteSpaces(TWhiteSpaces node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
