/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.analysis;

import java.util.*;
import javast.sablecc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALibrary(ALibrary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADataTypeLibraryElementDeclaration(ADataTypeLibraryElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionLibraryElementDeclaration(AFunctionLibraryElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionBlockLibraryElementDeclaration(AFunctionBlockLibraryElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramLibraryElementDeclaration(AProgramLibraryElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementaryNonGenericTypeName(AElementaryNonGenericTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADerivedNonGenericTypeName(ADerivedNonGenericTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumericElementaryTypeName(ANumericElementaryTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADateElementaryTypeName(ADateElementaryTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABitStringElementaryTypeName(ABitStringElementaryTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringElementaryTypeName(AStringElementaryTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWstringElementaryTypeName(AWstringElementaryTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATimeElementaryTypeName(ATimeElementaryTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerNumericTypeName(AIntegerNumericTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealNumericTypeName(ARealNumericTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASignedIntegerIntegerTypeName(ASignedIntegerIntegerTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnsignedIntegerIntegerTypeName(AUnsignedIntegerIntegerTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumericConstant(ANumericConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharacterConstant(ACharacterConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATimeConstant(ATimeConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABitStringConstant(ABitStringConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanConstant(ABooleanConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerNumericLiteral(AIntegerNumericLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealNumericLiteral(ARealNumericLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerTypeNameHashed(AIntegerTypeNameHashed node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealTypeNameHashed(ARealTypeNameHashed node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealLiteral(ARealLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABitStringLiteralTypeNameHashed(ABitStringLiteralTypeNameHashed node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABitStringLiteral(ABitStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolTypeNameHashed(ABoolTypeNameHashed node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumericBooleanLiteral(ANumericBooleanLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiteralBooleanLiteral(ALiteralBooleanLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleCharacterString(ASingleCharacterString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleCharacterString(ADoubleCharacterString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADurationTimeLiteral(ADurationTimeLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATimeOfDayTimeLiteral(ATimeOfDayTimeLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADateTimeLiteral(ADateTimeLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADateAndTimeTimeLiteral(ADateAndTimeTimeLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADuration(ADuration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADaysInterval(ADaysInterval node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHoursInterval(AHoursInterval node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinutesInterval(AMinutesInterval node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASecondsInterval(ASecondsInterval node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMillisecondsInterval(AMillisecondsInterval node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecimalDays(ADecimalDays node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHourlyDays(AHourlyDays node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFixedPointRealPart(AFixedPointRealPart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFixedPoint(AFixedPoint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecimalHours(ADecimalHours node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinutelyHours(AMinutelyHours node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecimalMinutes(ADecimalMinutes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASecondlyMinutes(ASecondlyMinutes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecimalSeconds(ADecimalSeconds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMillisecondlySeconds(AMillisecondlySeconds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMilliseconds(AMilliseconds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATimeOfDay(ATimeOfDay node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADaytime(ADaytime node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADayHour(ADayHour node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADayMinute(ADayMinute node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADaySecond(ADaySecond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADate(ADate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADateLiteral(ADateLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAYear(AYear node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMonth(AMonth node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADay(ADay node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADateAndTime(ADateAndTime node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayStructStringSimpleDerivedTypeName(AArrayStructStringSimpleDerivedTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleTypeName(ASimpleTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayTypeName(AArrayTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureTypeName(AStructureTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringTypeName(AStringTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureElementName(AStructureElementName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADataTypeDeclarationElement(ADataTypeDeclarationElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADataTypeDeclaration(ADataTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleTypeTypeDeclaration(ASingleTypeTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayTypeTypeDeclaration(AArrayTypeTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructTypeTypeDeclaration(AStructTypeTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringTypeTypeDeclaration(AStringTypeTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayTypeDeclaration(AArrayTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleElementTypeDeclaration(ASingleElementTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleTypeDeclaration(ASimpleTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleSpecInitialization(ASimpleSpecInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleSpecInit(ASimpleSpecInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementarySimpleSpecification(AElementarySimpleSpecification node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubrange(ASubrange node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubrangeList(ASubrangeList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubrangeListHead(ASubrangeListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArraySpecInitialization(AArraySpecInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArraySpecInit(AArraySpecInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInlineArraySpecification(AInlineArraySpecification node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayInitialization(AArrayInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayInitialElementsList(AArrayInitialElementsList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayInitialElementsListHead(AArrayInitialElementsListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleArrayInitialElements(ASingleArrayInitialElements node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARepeatArrayInitialElements(ARepeatArrayInitialElements node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantInitialElement(AConstantInitialElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructInitialElement(AStructInitialElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayInitialElement(AArrayInitialElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureTypeDeclaration(AStructureTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureDeclarationStructureSpecification(AStructureDeclarationStructureSpecification node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializedStructureSpecification(AInitializedStructureSpecification node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializedStructureInitialization(AInitializedStructureInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializedStructure(AInitializedStructure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureDeclaration(AStructureDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureElementDeclarationList(AStructureElementDeclarationList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureElementDeclarationListHead(AStructureElementDeclarationListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureElementDeclaration(AStructureElementDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleStructureElementInit(ASimpleStructureElementInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayStructureElementInit(AArrayStructureElementInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructStructureElementInit(AStructStructureElementInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureInitialization(AStructureInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureElementInitializationList(AStructureElementInitializationList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureElementInitializationListHead(AStructureElementInitializationListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureElementInitialization(AStructureElementInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringStringWstringTypeName(AStringStringWstringTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWstringStringWstringTypeName(AWstringStringWstringTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringTypeDeclarationLenSpec(AStringTypeDeclarationLenSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringTypeDeclarationInitialization(AStringTypeDeclarationInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALenStringTypeDeclaration(ALenStringTypeDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADirectVariableVariable(ADirectVariableVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASymbolicVariableVariable(ASymbolicVariableVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADirectVariableVariableComplex(ADirectVariableVariableComplex node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASymbolicVariableVariableComplex(ASymbolicVariableVariableComplex node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableSymbolicVariable(AVariableSymbolicVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArraySymbolicVariable(AArraySymbolicVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructSymbolicVariable(AStructSymbolicVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArraySymbolicVariableComplex(AArraySymbolicVariableComplex node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructSymbolicVariableComplex(AStructSymbolicVariableComplex node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADirectVariable(ADirectVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrefixedInteger(APrefixedInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscriptList(ASubscriptList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscriptListHead(ASubscriptListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscript(ASubscript node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldSelector(AFieldSelector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInputDeclarations(AInputDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOutputDeclarations(AOutputDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInputOutputDeclarations(AInputOutputDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDeclarations(AVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExternalVarDeclarations(AExternalVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATempVarDeclarations(ATempVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarInitDecls(AVarInitDecls node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarInitDeclsHead(AVarInitDeclsHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarInitDecl(AVarInitDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructFbNameVarInitDeclSpec(AStructFbNameVarInitDeclSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarVarInitDeclSpec(AVarVarInitDeclSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayVarVarInitDeclSpec(AArrayVarVarInitDeclSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASStringVarInitDeclSpec(ASStringVarInitDeclSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADStringVarInitDeclSpec(ADStringVarInitDeclSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVar1List(AVar1List node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVar1ListHead(AVar1ListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleVar1SpecInit(ASimpleVar1SpecInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantConstantTokenOrRetain(AConstantConstantTokenOrRetain node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARetainConstantTokenOrRetain(ARetainConstantTokenOrRetain node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocatedVarDeclarations(ALocatedVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocatedVarDeclList(ALocatedVarDeclList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocatedVarDeclListHead(ALocatedVarDeclListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocatedVarDecl(ALocatedVarDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleLocatedVarSpecInit(ASimpleLocatedVarSpecInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayLocatedVarSpecInit(AArrayLocatedVarSpecInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructLocatedVarSpecInit(AStructLocatedVarSpecInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASstringLocatedVarSpecInit(ASstringLocatedVarSpecInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADstringLocatedVarSpecInit(ADstringLocatedVarSpecInit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocation(ALocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABrackInteger(ABrackInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleByteStringSpecInitialization(ASingleByteStringSpecInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleByteStringSpec(ASingleByteStringSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleByteStringSpecInitialization(ADoubleByteStringSpecInitialization node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleByteStringSpec(ADoubleByteStringSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionName(AFunctionName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementaryReturnTypeName(AElementaryReturnTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADerivedReturnTypeName(ADerivedReturnTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIoFunctionVarDeclaration(AIoFunctionVarDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionFunctionVarDeclaration(AFunctionFunctionVarDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInputIoVarDeclarations(AInputIoVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuputIoVarDeclarations(AOuputIoVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIoIoVarDeclarations(AIoIoVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionBody(AFunctionBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStandardFunctionBlockTypeName(AStandardFunctionBlockTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADerivedFunctionBlockTypeName(ADerivedFunctionBlockTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADerivedFunctionBlockName(ADerivedFunctionBlockName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionBlockDeclaration(AFunctionBlockDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIoFunctionBlockVarDeclarations(AIoFunctionBlockVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOtherFunctionBlockVarDeclarations(AOtherFunctionBlockVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExternalOtherVarDeclarations(AExternalOtherVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarOtherVarDeclarations(AVarOtherVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATempOtherVarDeclarations(ATempOtherVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionBlockBody(AFunctionBlockBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramTypeName(AProgramTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAccessName(AAccessName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramDeclaration(AProgramDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIoProgramVarDeclarations(AIoProgramVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOtherProgramVarDeclarations(AOtherProgramVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocatedProgramVarDeclarations(ALocatedProgramVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAccessProgramVarDeclarations(AAccessProgramVarDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramAccessDecls(AProgramAccessDecls node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramAccessDeclList(AProgramAccessDeclList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramAccessDeclListHead(AProgramAccessDeclListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramAccessDecl(AProgramAccessDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExpression(AOrExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryExpressionExpression(AUnaryExpressionExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXorXorExpression(AXorXorExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryXorExpression(AUnaryXorExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndAndExpression(AAndAndExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryAndExpression(AUnaryAndExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComparisonComparison(AComparisonComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryComparison(AUnaryComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEquEquExpression(AEquEquExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryEquExpression(AUnaryEquExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddAddExpression(AAddAddExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryAddExpression(AUnaryAddExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddOperator(AAddOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulTerm(AMulTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermTerm(ATermTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPowerPowerExpression(APowerPowerExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryPowerExpression(AUnaryPowerExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryExpression(AUnaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantPrimaryExpression(AConstantPrimaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariablePrimaryExpression(AVariablePrimaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenPrimaryExpression(AParenPrimaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallPrimaryExpression(ACallPrimaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParamAssignmentList(AParamAssignmentList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParamAssignmentListHead(AParamAssignmentListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementList(AStatementList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementListHead(AStatementListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallStatement(ACallStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssign2Statement(AAssign2Statement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASelectionStatement(ASelectionStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIterStatement(AIterStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParamAssignmentLvalue(AParamAssignmentLvalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprParamAssignment(AExprParamAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrowParamAssignment(AArrowParamAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfSelectionStatement(AIfSelectionStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaseSelectionStatement(ACaseSelectionStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseifStatement(AElseifStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaseStatementElseClause(ACaseStatementElseClause node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaseStatement(ACaseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaseElement(ACaseElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaseList(ACaseList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaseListHead(ACaseListHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubrangeCaseListElement(ASubrangeCaseListElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerCaseListElement(AIntegerCaseListElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForIterationStatement(AForIterationStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileIterationStatement(AWhileIterationStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARepeatIterationStatement(ARepeatIterationStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExitIterationStatement(AExitIterationStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAControlVariable(AControlVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForListByClause(AForListByClause node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForList(AForList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARepeatStatement(ARepeatStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExitStatement(AExitStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBit(TBit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSign(TSign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDollar(TDollar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHash(THash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDash(TDash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnderscore(TUnderscore node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColonEq(TColonEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDotDot(TDotDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLparen(TLparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRparen(TRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLbrack(TLbrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRbrack(TRbrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPercent(TPercent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOrToken(TOrToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXorToken(TXorToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAndTokenFull(TAndTokenFull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqTokenFull(TEqTokenFull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComparisonOperator(TComparisonOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMulOperator(TMulOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnaryOperator(TUnaryOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotToken(TNotToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPowerToken(TPowerToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturnToken(TReturnToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArrowToken(TArrowToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSingleByteCharacterString(TSingleByteCharacterString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoubleByteCharacterString(TDoubleByteCharacterString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExponentSign(TExponentSign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExponent(TExponent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignedInteger(TSignedInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignedIntegerLiteral(TSignedIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnsignedIntegerLiteral(TUnsignedIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString1TypeName(TString1TypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWstringTypeName(TWstringTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTimeTypeName(TTimeTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTimeTypeNameFull(TTimeTypeNameFull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignedIntegerTypeName(TSignedIntegerTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnsignedIntegerTypeName(TUnsignedIntegerTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRealTypeName(TRealTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDateTypeName(TDateTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitStringTypeName(TBitStringTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitStringLiteralTypeName(TBitStringLiteralTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolTypeName(TBoolTypeName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTimeOfDayTypeNameFull(TTimeOfDayTypeNameFull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDateTypeNameFull(TDateTypeNameFull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDateAndTimeTypeNameFull(TDateAndTimeTypeNameFull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrueFalseLiteral(TTrueFalseLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDayIdentifier(TDayIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHourIdentifier(THourIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinuteIdentifier(TMinuteIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSecondIdentifier(TSecondIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMillisecondIdentifier(TMillisecondIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTypeToken(TTypeToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndTypeToken(TEndTypeToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArrayToken(TArrayToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOfToken(TOfToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStructToken(TStructToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndStructToken(TEndStructToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVarToken(TVarToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndVarToken(TEndVarToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstantToken(TConstantToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVarInputToken(TVarInputToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVarOutputToken(TVarOutputToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVarInOutToken(TVarInOutToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVarExternalToken(TVarExternalToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVarTempToken(TVarTempToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVarAccessToken(TVarAccessToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunctionToken(TFunctionToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndFunctionToken(TEndFunctionToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunctionBlockToken(TFunctionBlockToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndFunctionBlockToken(TEndFunctionBlockToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProgramToken(TProgramToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndProgramToken(TEndProgramToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtToken(TAtToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIfToken(TIfToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThenToken(TThenToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndIfToken(TEndIfToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElseIfToken(TElseIfToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElseToken(TElseToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaseToken(TCaseToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndCaseToken(TEndCaseToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTForToken(TForToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoToken(TDoToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndForToken(TEndForToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTToToken(TToToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTByToken(TByToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhileToken(TWhileToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndWhileToken(TEndWhileToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRepeatToken(TRepeatToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndRepeatToken(TEndRepeatToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUntilToken(TUntilToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExitToken(TExitToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLocationPrefix(TLocationPrefix node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSizePrefix(TSizePrefix node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIncomplLocation(TIncomplLocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEdge(TEdge node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRetainToken(TRetainToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNonRetainToken(TNonRetainToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRetain(TRetain node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStandardFunctionBlockName(TStandardFunctionBlockName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDirection(TDirection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhiteSpaces(TWhiteSpaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
