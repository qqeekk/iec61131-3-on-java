/* This file was generated by SableCC (http://www.sablecc.org/). */

package javast.sablecc.analysis;

import java.util.*;
import javast.sablecc.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPLibrary().apply(this);
        outStart(node);
    }

    public void inALibrary(ALibrary node)
    {
        defaultIn(node);
    }

    public void outALibrary(ALibrary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALibrary(ALibrary node)
    {
        inALibrary(node);
        {
            List<PLibraryElementDeclaration> copy = new ArrayList<PLibraryElementDeclaration>(node.getLibraryElementDeclaration());
            Collections.reverse(copy);
            for(PLibraryElementDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outALibrary(node);
    }

    public void inADataTypeLibraryElementDeclaration(ADataTypeLibraryElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outADataTypeLibraryElementDeclaration(ADataTypeLibraryElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataTypeLibraryElementDeclaration(ADataTypeLibraryElementDeclaration node)
    {
        inADataTypeLibraryElementDeclaration(node);
        if(node.getDataTypeDeclaration() != null)
        {
            node.getDataTypeDeclaration().apply(this);
        }
        outADataTypeLibraryElementDeclaration(node);
    }

    public void inAFunctionLibraryElementDeclaration(AFunctionLibraryElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionLibraryElementDeclaration(AFunctionLibraryElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionLibraryElementDeclaration(AFunctionLibraryElementDeclaration node)
    {
        inAFunctionLibraryElementDeclaration(node);
        if(node.getFunctionDeclaration() != null)
        {
            node.getFunctionDeclaration().apply(this);
        }
        outAFunctionLibraryElementDeclaration(node);
    }

    public void inAFunctionBlockLibraryElementDeclaration(AFunctionBlockLibraryElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionBlockLibraryElementDeclaration(AFunctionBlockLibraryElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionBlockLibraryElementDeclaration(AFunctionBlockLibraryElementDeclaration node)
    {
        inAFunctionBlockLibraryElementDeclaration(node);
        if(node.getFunctionBlockDeclaration() != null)
        {
            node.getFunctionBlockDeclaration().apply(this);
        }
        outAFunctionBlockLibraryElementDeclaration(node);
    }

    public void inAProgramLibraryElementDeclaration(AProgramLibraryElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAProgramLibraryElementDeclaration(AProgramLibraryElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramLibraryElementDeclaration(AProgramLibraryElementDeclaration node)
    {
        inAProgramLibraryElementDeclaration(node);
        if(node.getProgramDeclaration() != null)
        {
            node.getProgramDeclaration().apply(this);
        }
        outAProgramLibraryElementDeclaration(node);
    }

    public void inAElementaryNonGenericTypeName(AElementaryNonGenericTypeName node)
    {
        defaultIn(node);
    }

    public void outAElementaryNonGenericTypeName(AElementaryNonGenericTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementaryNonGenericTypeName(AElementaryNonGenericTypeName node)
    {
        inAElementaryNonGenericTypeName(node);
        if(node.getElementaryTypeName() != null)
        {
            node.getElementaryTypeName().apply(this);
        }
        outAElementaryNonGenericTypeName(node);
    }

    public void inADerivedNonGenericTypeName(ADerivedNonGenericTypeName node)
    {
        defaultIn(node);
    }

    public void outADerivedNonGenericTypeName(ADerivedNonGenericTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADerivedNonGenericTypeName(ADerivedNonGenericTypeName node)
    {
        inADerivedNonGenericTypeName(node);
        if(node.getDerivedTypeName() != null)
        {
            node.getDerivedTypeName().apply(this);
        }
        outADerivedNonGenericTypeName(node);
    }

    public void inANumericElementaryTypeName(ANumericElementaryTypeName node)
    {
        defaultIn(node);
    }

    public void outANumericElementaryTypeName(ANumericElementaryTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericElementaryTypeName(ANumericElementaryTypeName node)
    {
        inANumericElementaryTypeName(node);
        if(node.getNumericTypeName() != null)
        {
            node.getNumericTypeName().apply(this);
        }
        outANumericElementaryTypeName(node);
    }

    public void inADateElementaryTypeName(ADateElementaryTypeName node)
    {
        defaultIn(node);
    }

    public void outADateElementaryTypeName(ADateElementaryTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADateElementaryTypeName(ADateElementaryTypeName node)
    {
        inADateElementaryTypeName(node);
        if(node.getDateTypeName() != null)
        {
            node.getDateTypeName().apply(this);
        }
        outADateElementaryTypeName(node);
    }

    public void inABitStringElementaryTypeName(ABitStringElementaryTypeName node)
    {
        defaultIn(node);
    }

    public void outABitStringElementaryTypeName(ABitStringElementaryTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitStringElementaryTypeName(ABitStringElementaryTypeName node)
    {
        inABitStringElementaryTypeName(node);
        if(node.getEdge() != null)
        {
            node.getEdge().apply(this);
        }
        if(node.getBitStringTypeName() != null)
        {
            node.getBitStringTypeName().apply(this);
        }
        outABitStringElementaryTypeName(node);
    }

    public void inAStringElementaryTypeName(AStringElementaryTypeName node)
    {
        defaultIn(node);
    }

    public void outAStringElementaryTypeName(AStringElementaryTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringElementaryTypeName(AStringElementaryTypeName node)
    {
        inAStringElementaryTypeName(node);
        if(node.getString1TypeName() != null)
        {
            node.getString1TypeName().apply(this);
        }
        outAStringElementaryTypeName(node);
    }

    public void inAWstringElementaryTypeName(AWstringElementaryTypeName node)
    {
        defaultIn(node);
    }

    public void outAWstringElementaryTypeName(AWstringElementaryTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWstringElementaryTypeName(AWstringElementaryTypeName node)
    {
        inAWstringElementaryTypeName(node);
        if(node.getWstringTypeName() != null)
        {
            node.getWstringTypeName().apply(this);
        }
        outAWstringElementaryTypeName(node);
    }

    public void inATimeElementaryTypeName(ATimeElementaryTypeName node)
    {
        defaultIn(node);
    }

    public void outATimeElementaryTypeName(ATimeElementaryTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimeElementaryTypeName(ATimeElementaryTypeName node)
    {
        inATimeElementaryTypeName(node);
        if(node.getTimeTypeName() != null)
        {
            node.getTimeTypeName().apply(this);
        }
        outATimeElementaryTypeName(node);
    }

    public void inAIntegerNumericTypeName(AIntegerNumericTypeName node)
    {
        defaultIn(node);
    }

    public void outAIntegerNumericTypeName(AIntegerNumericTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerNumericTypeName(AIntegerNumericTypeName node)
    {
        inAIntegerNumericTypeName(node);
        if(node.getIntegerTypeName() != null)
        {
            node.getIntegerTypeName().apply(this);
        }
        outAIntegerNumericTypeName(node);
    }

    public void inARealNumericTypeName(ARealNumericTypeName node)
    {
        defaultIn(node);
    }

    public void outARealNumericTypeName(ARealNumericTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealNumericTypeName(ARealNumericTypeName node)
    {
        inARealNumericTypeName(node);
        if(node.getRealTypeName() != null)
        {
            node.getRealTypeName().apply(this);
        }
        outARealNumericTypeName(node);
    }

    public void inASignedIntegerIntegerTypeName(ASignedIntegerIntegerTypeName node)
    {
        defaultIn(node);
    }

    public void outASignedIntegerIntegerTypeName(ASignedIntegerIntegerTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignedIntegerIntegerTypeName(ASignedIntegerIntegerTypeName node)
    {
        inASignedIntegerIntegerTypeName(node);
        if(node.getSignedIntegerTypeName() != null)
        {
            node.getSignedIntegerTypeName().apply(this);
        }
        outASignedIntegerIntegerTypeName(node);
    }

    public void inAUnsignedIntegerIntegerTypeName(AUnsignedIntegerIntegerTypeName node)
    {
        defaultIn(node);
    }

    public void outAUnsignedIntegerIntegerTypeName(AUnsignedIntegerIntegerTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnsignedIntegerIntegerTypeName(AUnsignedIntegerIntegerTypeName node)
    {
        inAUnsignedIntegerIntegerTypeName(node);
        if(node.getUnsignedIntegerTypeName() != null)
        {
            node.getUnsignedIntegerTypeName().apply(this);
        }
        outAUnsignedIntegerIntegerTypeName(node);
    }

    public void inANumericConstant(ANumericConstant node)
    {
        defaultIn(node);
    }

    public void outANumericConstant(ANumericConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericConstant(ANumericConstant node)
    {
        inANumericConstant(node);
        if(node.getNumericLiteral() != null)
        {
            node.getNumericLiteral().apply(this);
        }
        outANumericConstant(node);
    }

    public void inACharacterConstant(ACharacterConstant node)
    {
        defaultIn(node);
    }

    public void outACharacterConstant(ACharacterConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterConstant(ACharacterConstant node)
    {
        inACharacterConstant(node);
        if(node.getCharacterString() != null)
        {
            node.getCharacterString().apply(this);
        }
        outACharacterConstant(node);
    }

    public void inATimeConstant(ATimeConstant node)
    {
        defaultIn(node);
    }

    public void outATimeConstant(ATimeConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimeConstant(ATimeConstant node)
    {
        inATimeConstant(node);
        if(node.getTimeLiteral() != null)
        {
            node.getTimeLiteral().apply(this);
        }
        outATimeConstant(node);
    }

    public void inABitStringConstant(ABitStringConstant node)
    {
        defaultIn(node);
    }

    public void outABitStringConstant(ABitStringConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitStringConstant(ABitStringConstant node)
    {
        inABitStringConstant(node);
        if(node.getBitStringLiteral() != null)
        {
            node.getBitStringLiteral().apply(this);
        }
        outABitStringConstant(node);
    }

    public void inABooleanConstant(ABooleanConstant node)
    {
        defaultIn(node);
    }

    public void outABooleanConstant(ABooleanConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanConstant(ABooleanConstant node)
    {
        inABooleanConstant(node);
        if(node.getBooleanLiteral() != null)
        {
            node.getBooleanLiteral().apply(this);
        }
        outABooleanConstant(node);
    }

    public void inAIntegerNumericLiteral(AIntegerNumericLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerNumericLiteral(AIntegerNumericLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerNumericLiteral(AIntegerNumericLiteral node)
    {
        inAIntegerNumericLiteral(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerNumericLiteral(node);
    }

    public void inARealNumericLiteral(ARealNumericLiteral node)
    {
        defaultIn(node);
    }

    public void outARealNumericLiteral(ARealNumericLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealNumericLiteral(ARealNumericLiteral node)
    {
        inARealNumericLiteral(node);
        if(node.getRealLiteral() != null)
        {
            node.getRealLiteral().apply(this);
        }
        outARealNumericLiteral(node);
    }

    public void inAIntegerTypeNameHashed(AIntegerTypeNameHashed node)
    {
        defaultIn(node);
    }

    public void outAIntegerTypeNameHashed(AIntegerTypeNameHashed node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerTypeNameHashed(AIntegerTypeNameHashed node)
    {
        inAIntegerTypeNameHashed(node);
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getIntegerTypeName() != null)
        {
            node.getIntegerTypeName().apply(this);
        }
        outAIntegerTypeNameHashed(node);
    }

    public void inAIntegerLiteral(AIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteral(AIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        inAIntegerLiteral(node);
        if(node.getSignedIntegerLiteral() != null)
        {
            node.getSignedIntegerLiteral().apply(this);
        }
        if(node.getIntegerTypeNameHashed() != null)
        {
            node.getIntegerTypeNameHashed().apply(this);
        }
        outAIntegerLiteral(node);
    }

    public void inARealTypeNameHashed(ARealTypeNameHashed node)
    {
        defaultIn(node);
    }

    public void outARealTypeNameHashed(ARealTypeNameHashed node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTypeNameHashed(ARealTypeNameHashed node)
    {
        inARealTypeNameHashed(node);
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getRealTypeName() != null)
        {
            node.getRealTypeName().apply(this);
        }
        outARealTypeNameHashed(node);
    }

    public void inARealLiteral(ARealLiteral node)
    {
        defaultIn(node);
    }

    public void outARealLiteral(ARealLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealLiteral(ARealLiteral node)
    {
        inARealLiteral(node);
        if(node.getExponent() != null)
        {
            node.getExponent().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getSignedInteger() != null)
        {
            node.getSignedInteger().apply(this);
        }
        if(node.getRealTypeNameHashed() != null)
        {
            node.getRealTypeNameHashed().apply(this);
        }
        outARealLiteral(node);
    }

    public void inABitStringLiteralTypeNameHashed(ABitStringLiteralTypeNameHashed node)
    {
        defaultIn(node);
    }

    public void outABitStringLiteralTypeNameHashed(ABitStringLiteralTypeNameHashed node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitStringLiteralTypeNameHashed(ABitStringLiteralTypeNameHashed node)
    {
        inABitStringLiteralTypeNameHashed(node);
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getBitStringLiteralTypeName() != null)
        {
            node.getBitStringLiteralTypeName().apply(this);
        }
        outABitStringLiteralTypeNameHashed(node);
    }

    public void inABitStringLiteral(ABitStringLiteral node)
    {
        defaultIn(node);
    }

    public void outABitStringLiteral(ABitStringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitStringLiteral(ABitStringLiteral node)
    {
        inABitStringLiteral(node);
        if(node.getUnsignedIntegerLiteral() != null)
        {
            node.getUnsignedIntegerLiteral().apply(this);
        }
        if(node.getBitStringLiteralTypeNameHashed() != null)
        {
            node.getBitStringLiteralTypeNameHashed().apply(this);
        }
        outABitStringLiteral(node);
    }

    public void inABoolTypeNameHashed(ABoolTypeNameHashed node)
    {
        defaultIn(node);
    }

    public void outABoolTypeNameHashed(ABoolTypeNameHashed node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTypeNameHashed(ABoolTypeNameHashed node)
    {
        inABoolTypeNameHashed(node);
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getBoolTypeName() != null)
        {
            node.getBoolTypeName().apply(this);
        }
        outABoolTypeNameHashed(node);
    }

    public void inANumericBooleanLiteral(ANumericBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outANumericBooleanLiteral(ANumericBooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericBooleanLiteral(ANumericBooleanLiteral node)
    {
        inANumericBooleanLiteral(node);
        if(node.getBit() != null)
        {
            node.getBit().apply(this);
        }
        if(node.getBoolTypeNameHashed() != null)
        {
            node.getBoolTypeNameHashed().apply(this);
        }
        outANumericBooleanLiteral(node);
    }

    public void inALiteralBooleanLiteral(ALiteralBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outALiteralBooleanLiteral(ALiteralBooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralBooleanLiteral(ALiteralBooleanLiteral node)
    {
        inALiteralBooleanLiteral(node);
        if(node.getTrueFalseLiteral() != null)
        {
            node.getTrueFalseLiteral().apply(this);
        }
        outALiteralBooleanLiteral(node);
    }

    public void inASingleCharacterString(ASingleCharacterString node)
    {
        defaultIn(node);
    }

    public void outASingleCharacterString(ASingleCharacterString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleCharacterString(ASingleCharacterString node)
    {
        inASingleCharacterString(node);
        if(node.getSingleByteCharacterString() != null)
        {
            node.getSingleByteCharacterString().apply(this);
        }
        outASingleCharacterString(node);
    }

    public void inADoubleCharacterString(ADoubleCharacterString node)
    {
        defaultIn(node);
    }

    public void outADoubleCharacterString(ADoubleCharacterString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleCharacterString(ADoubleCharacterString node)
    {
        inADoubleCharacterString(node);
        if(node.getDoubleByteCharacterString() != null)
        {
            node.getDoubleByteCharacterString().apply(this);
        }
        outADoubleCharacterString(node);
    }

    public void inADurationTimeLiteral(ADurationTimeLiteral node)
    {
        defaultIn(node);
    }

    public void outADurationTimeLiteral(ADurationTimeLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADurationTimeLiteral(ADurationTimeLiteral node)
    {
        inADurationTimeLiteral(node);
        if(node.getDuration() != null)
        {
            node.getDuration().apply(this);
        }
        outADurationTimeLiteral(node);
    }

    public void inATimeOfDayTimeLiteral(ATimeOfDayTimeLiteral node)
    {
        defaultIn(node);
    }

    public void outATimeOfDayTimeLiteral(ATimeOfDayTimeLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimeOfDayTimeLiteral(ATimeOfDayTimeLiteral node)
    {
        inATimeOfDayTimeLiteral(node);
        if(node.getTimeOfDay() != null)
        {
            node.getTimeOfDay().apply(this);
        }
        outATimeOfDayTimeLiteral(node);
    }

    public void inADateTimeLiteral(ADateTimeLiteral node)
    {
        defaultIn(node);
    }

    public void outADateTimeLiteral(ADateTimeLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADateTimeLiteral(ADateTimeLiteral node)
    {
        inADateTimeLiteral(node);
        if(node.getDate() != null)
        {
            node.getDate().apply(this);
        }
        outADateTimeLiteral(node);
    }

    public void inADateAndTimeTimeLiteral(ADateAndTimeTimeLiteral node)
    {
        defaultIn(node);
    }

    public void outADateAndTimeTimeLiteral(ADateAndTimeTimeLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADateAndTimeTimeLiteral(ADateAndTimeTimeLiteral node)
    {
        inADateAndTimeTimeLiteral(node);
        if(node.getDateAndTime() != null)
        {
            node.getDateAndTime().apply(this);
        }
        outADateAndTimeTimeLiteral(node);
    }

    public void inADuration(ADuration node)
    {
        defaultIn(node);
    }

    public void outADuration(ADuration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADuration(ADuration node)
    {
        inADuration(node);
        if(node.getInterval() != null)
        {
            node.getInterval().apply(this);
        }
        if(node.getDash() != null)
        {
            node.getDash().apply(this);
        }
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getTimeTypeNameFull() != null)
        {
            node.getTimeTypeNameFull().apply(this);
        }
        outADuration(node);
    }

    public void inADaysInterval(ADaysInterval node)
    {
        defaultIn(node);
    }

    public void outADaysInterval(ADaysInterval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADaysInterval(ADaysInterval node)
    {
        inADaysInterval(node);
        if(node.getDays() != null)
        {
            node.getDays().apply(this);
        }
        outADaysInterval(node);
    }

    public void inAHoursInterval(AHoursInterval node)
    {
        defaultIn(node);
    }

    public void outAHoursInterval(AHoursInterval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHoursInterval(AHoursInterval node)
    {
        inAHoursInterval(node);
        if(node.getHours() != null)
        {
            node.getHours().apply(this);
        }
        outAHoursInterval(node);
    }

    public void inAMinutesInterval(AMinutesInterval node)
    {
        defaultIn(node);
    }

    public void outAMinutesInterval(AMinutesInterval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinutesInterval(AMinutesInterval node)
    {
        inAMinutesInterval(node);
        if(node.getMinutes() != null)
        {
            node.getMinutes().apply(this);
        }
        outAMinutesInterval(node);
    }

    public void inASecondsInterval(ASecondsInterval node)
    {
        defaultIn(node);
    }

    public void outASecondsInterval(ASecondsInterval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASecondsInterval(ASecondsInterval node)
    {
        inASecondsInterval(node);
        if(node.getSeconds() != null)
        {
            node.getSeconds().apply(this);
        }
        outASecondsInterval(node);
    }

    public void inAMillisecondsInterval(AMillisecondsInterval node)
    {
        defaultIn(node);
    }

    public void outAMillisecondsInterval(AMillisecondsInterval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMillisecondsInterval(AMillisecondsInterval node)
    {
        inAMillisecondsInterval(node);
        if(node.getMilliseconds() != null)
        {
            node.getMilliseconds().apply(this);
        }
        outAMillisecondsInterval(node);
    }

    public void inADecimalDays(ADecimalDays node)
    {
        defaultIn(node);
    }

    public void outADecimalDays(ADecimalDays node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimalDays(ADecimalDays node)
    {
        inADecimalDays(node);
        if(node.getDayIdentifier() != null)
        {
            node.getDayIdentifier().apply(this);
        }
        if(node.getFixedPoint() != null)
        {
            node.getFixedPoint().apply(this);
        }
        outADecimalDays(node);
    }

    public void inAHourlyDays(AHourlyDays node)
    {
        defaultIn(node);
    }

    public void outAHourlyDays(AHourlyDays node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHourlyDays(AHourlyDays node)
    {
        inAHourlyDays(node);
        if(node.getHours() != null)
        {
            node.getHours().apply(this);
        }
        if(node.getUnderscore() != null)
        {
            node.getUnderscore().apply(this);
        }
        if(node.getDayIdentifier() != null)
        {
            node.getDayIdentifier().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAHourlyDays(node);
    }

    public void inAFixedPointRealPart(AFixedPointRealPart node)
    {
        defaultIn(node);
    }

    public void outAFixedPointRealPart(AFixedPointRealPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFixedPointRealPart(AFixedPointRealPart node)
    {
        inAFixedPointRealPart(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAFixedPointRealPart(node);
    }

    public void inAFixedPoint(AFixedPoint node)
    {
        defaultIn(node);
    }

    public void outAFixedPoint(AFixedPoint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFixedPoint(AFixedPoint node)
    {
        inAFixedPoint(node);
        if(node.getFixedPointRealPart() != null)
        {
            node.getFixedPointRealPart().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAFixedPoint(node);
    }

    public void inADecimalHours(ADecimalHours node)
    {
        defaultIn(node);
    }

    public void outADecimalHours(ADecimalHours node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimalHours(ADecimalHours node)
    {
        inADecimalHours(node);
        if(node.getHourIdentifier() != null)
        {
            node.getHourIdentifier().apply(this);
        }
        if(node.getFixedPoint() != null)
        {
            node.getFixedPoint().apply(this);
        }
        outADecimalHours(node);
    }

    public void inAMinutelyHours(AMinutelyHours node)
    {
        defaultIn(node);
    }

    public void outAMinutelyHours(AMinutelyHours node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinutelyHours(AMinutelyHours node)
    {
        inAMinutelyHours(node);
        if(node.getMinutes() != null)
        {
            node.getMinutes().apply(this);
        }
        if(node.getUnderscore() != null)
        {
            node.getUnderscore().apply(this);
        }
        if(node.getHourIdentifier() != null)
        {
            node.getHourIdentifier().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAMinutelyHours(node);
    }

    public void inADecimalMinutes(ADecimalMinutes node)
    {
        defaultIn(node);
    }

    public void outADecimalMinutes(ADecimalMinutes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimalMinutes(ADecimalMinutes node)
    {
        inADecimalMinutes(node);
        if(node.getMinuteIdentifier() != null)
        {
            node.getMinuteIdentifier().apply(this);
        }
        if(node.getFixedPoint() != null)
        {
            node.getFixedPoint().apply(this);
        }
        outADecimalMinutes(node);
    }

    public void inASecondlyMinutes(ASecondlyMinutes node)
    {
        defaultIn(node);
    }

    public void outASecondlyMinutes(ASecondlyMinutes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASecondlyMinutes(ASecondlyMinutes node)
    {
        inASecondlyMinutes(node);
        if(node.getSeconds() != null)
        {
            node.getSeconds().apply(this);
        }
        if(node.getUnderscore() != null)
        {
            node.getUnderscore().apply(this);
        }
        if(node.getMinuteIdentifier() != null)
        {
            node.getMinuteIdentifier().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outASecondlyMinutes(node);
    }

    public void inADecimalSeconds(ADecimalSeconds node)
    {
        defaultIn(node);
    }

    public void outADecimalSeconds(ADecimalSeconds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimalSeconds(ADecimalSeconds node)
    {
        inADecimalSeconds(node);
        if(node.getSecondIdentifier() != null)
        {
            node.getSecondIdentifier().apply(this);
        }
        if(node.getFixedPoint() != null)
        {
            node.getFixedPoint().apply(this);
        }
        outADecimalSeconds(node);
    }

    public void inAMillisecondlySeconds(AMillisecondlySeconds node)
    {
        defaultIn(node);
    }

    public void outAMillisecondlySeconds(AMillisecondlySeconds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMillisecondlySeconds(AMillisecondlySeconds node)
    {
        inAMillisecondlySeconds(node);
        if(node.getMilliseconds() != null)
        {
            node.getMilliseconds().apply(this);
        }
        if(node.getUnderscore() != null)
        {
            node.getUnderscore().apply(this);
        }
        if(node.getSecondIdentifier() != null)
        {
            node.getSecondIdentifier().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAMillisecondlySeconds(node);
    }

    public void inAMilliseconds(AMilliseconds node)
    {
        defaultIn(node);
    }

    public void outAMilliseconds(AMilliseconds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMilliseconds(AMilliseconds node)
    {
        inAMilliseconds(node);
        if(node.getMillisecondIdentifier() != null)
        {
            node.getMillisecondIdentifier().apply(this);
        }
        if(node.getFixedPoint() != null)
        {
            node.getFixedPoint().apply(this);
        }
        outAMilliseconds(node);
    }

    public void inATimeOfDay(ATimeOfDay node)
    {
        defaultIn(node);
    }

    public void outATimeOfDay(ATimeOfDay node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimeOfDay(ATimeOfDay node)
    {
        inATimeOfDay(node);
        if(node.getDaytime() != null)
        {
            node.getDaytime().apply(this);
        }
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getTimeOfDayTypeNameFull() != null)
        {
            node.getTimeOfDayTypeNameFull().apply(this);
        }
        outATimeOfDay(node);
    }

    public void inADaytime(ADaytime node)
    {
        defaultIn(node);
    }

    public void outADaytime(ADaytime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADaytime(ADaytime node)
    {
        inADaytime(node);
        if(node.getDaySecond() != null)
        {
            node.getDaySecond().apply(this);
        }
        if(node.getSnd() != null)
        {
            node.getSnd().apply(this);
        }
        if(node.getDayMinute() != null)
        {
            node.getDayMinute().apply(this);
        }
        if(node.getFst() != null)
        {
            node.getFst().apply(this);
        }
        if(node.getDayHour() != null)
        {
            node.getDayHour().apply(this);
        }
        outADaytime(node);
    }

    public void inADayHour(ADayHour node)
    {
        defaultIn(node);
    }

    public void outADayHour(ADayHour node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADayHour(ADayHour node)
    {
        inADayHour(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outADayHour(node);
    }

    public void inADayMinute(ADayMinute node)
    {
        defaultIn(node);
    }

    public void outADayMinute(ADayMinute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADayMinute(ADayMinute node)
    {
        inADayMinute(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outADayMinute(node);
    }

    public void inADaySecond(ADaySecond node)
    {
        defaultIn(node);
    }

    public void outADaySecond(ADaySecond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADaySecond(ADaySecond node)
    {
        inADaySecond(node);
        if(node.getFixedPoint() != null)
        {
            node.getFixedPoint().apply(this);
        }
        outADaySecond(node);
    }

    public void inADate(ADate node)
    {
        defaultIn(node);
    }

    public void outADate(ADate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADate(ADate node)
    {
        inADate(node);
        if(node.getDateLiteral() != null)
        {
            node.getDateLiteral().apply(this);
        }
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getDateTypeNameFull() != null)
        {
            node.getDateTypeNameFull().apply(this);
        }
        outADate(node);
    }

    public void inADateLiteral(ADateLiteral node)
    {
        defaultIn(node);
    }

    public void outADateLiteral(ADateLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADateLiteral(ADateLiteral node)
    {
        inADateLiteral(node);
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getSnd() != null)
        {
            node.getSnd().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getFst() != null)
        {
            node.getFst().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        outADateLiteral(node);
    }

    public void inAYear(AYear node)
    {
        defaultIn(node);
    }

    public void outAYear(AYear node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAYear(AYear node)
    {
        inAYear(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAYear(node);
    }

    public void inAMonth(AMonth node)
    {
        defaultIn(node);
    }

    public void outAMonth(AMonth node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMonth(AMonth node)
    {
        inAMonth(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAMonth(node);
    }

    public void inADay(ADay node)
    {
        defaultIn(node);
    }

    public void outADay(ADay node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADay(ADay node)
    {
        inADay(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outADay(node);
    }

    public void inADateAndTime(ADateAndTime node)
    {
        defaultIn(node);
    }

    public void outADateAndTime(ADateAndTime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADateAndTime(ADateAndTime node)
    {
        inADateAndTime(node);
        if(node.getDaytime() != null)
        {
            node.getDaytime().apply(this);
        }
        if(node.getDash() != null)
        {
            node.getDash().apply(this);
        }
        if(node.getDateLiteral() != null)
        {
            node.getDateLiteral().apply(this);
        }
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getDateAndTimeTypeNameFull() != null)
        {
            node.getDateAndTimeTypeNameFull().apply(this);
        }
        outADateAndTime(node);
    }

    public void inAArrayStructStringSimpleDerivedTypeName(AArrayStructStringSimpleDerivedTypeName node)
    {
        defaultIn(node);
    }

    public void outAArrayStructStringSimpleDerivedTypeName(AArrayStructStringSimpleDerivedTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayStructStringSimpleDerivedTypeName(AArrayStructStringSimpleDerivedTypeName node)
    {
        inAArrayStructStringSimpleDerivedTypeName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArrayStructStringSimpleDerivedTypeName(node);
    }

    public void inASimpleTypeName(ASimpleTypeName node)
    {
        defaultIn(node);
    }

    public void outASimpleTypeName(ASimpleTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTypeName(ASimpleTypeName node)
    {
        inASimpleTypeName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleTypeName(node);
    }

    public void inAArrayTypeName(AArrayTypeName node)
    {
        defaultIn(node);
    }

    public void outAArrayTypeName(AArrayTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayTypeName(AArrayTypeName node)
    {
        inAArrayTypeName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArrayTypeName(node);
    }

    public void inAStructureTypeName(AStructureTypeName node)
    {
        defaultIn(node);
    }

    public void outAStructureTypeName(AStructureTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureTypeName(AStructureTypeName node)
    {
        inAStructureTypeName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAStructureTypeName(node);
    }

    public void inAStringTypeName(AStringTypeName node)
    {
        defaultIn(node);
    }

    public void outAStringTypeName(AStringTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeName(AStringTypeName node)
    {
        inAStringTypeName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAStringTypeName(node);
    }

    public void inAStructureElementName(AStructureElementName node)
    {
        defaultIn(node);
    }

    public void outAStructureElementName(AStructureElementName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureElementName(AStructureElementName node)
    {
        inAStructureElementName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAStructureElementName(node);
    }

    public void inADataTypeDeclarationElement(ADataTypeDeclarationElement node)
    {
        defaultIn(node);
    }

    public void outADataTypeDeclarationElement(ADataTypeDeclarationElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataTypeDeclarationElement(ADataTypeDeclarationElement node)
    {
        inADataTypeDeclarationElement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        outADataTypeDeclarationElement(node);
    }

    public void inADataTypeDeclaration(ADataTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outADataTypeDeclaration(ADataTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataTypeDeclaration(ADataTypeDeclaration node)
    {
        inADataTypeDeclaration(node);
        if(node.getEndTypeToken() != null)
        {
            node.getEndTypeToken().apply(this);
        }
        {
            List<PDataTypeDeclarationElement> copy = new ArrayList<PDataTypeDeclarationElement>(node.getDataTypeDeclarationElement());
            Collections.reverse(copy);
            for(PDataTypeDeclarationElement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeToken() != null)
        {
            node.getTypeToken().apply(this);
        }
        outADataTypeDeclaration(node);
    }

    public void inASingleTypeTypeDeclaration(ASingleTypeTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleTypeTypeDeclaration(ASingleTypeTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleTypeTypeDeclaration(ASingleTypeTypeDeclaration node)
    {
        inASingleTypeTypeDeclaration(node);
        if(node.getSingleElementTypeDeclaration() != null)
        {
            node.getSingleElementTypeDeclaration().apply(this);
        }
        outASingleTypeTypeDeclaration(node);
    }

    public void inAArrayTypeTypeDeclaration(AArrayTypeTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAArrayTypeTypeDeclaration(AArrayTypeTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayTypeTypeDeclaration(AArrayTypeTypeDeclaration node)
    {
        inAArrayTypeTypeDeclaration(node);
        if(node.getArrayTypeDeclaration() != null)
        {
            node.getArrayTypeDeclaration().apply(this);
        }
        outAArrayTypeTypeDeclaration(node);
    }

    public void inAStructTypeTypeDeclaration(AStructTypeTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStructTypeTypeDeclaration(AStructTypeTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructTypeTypeDeclaration(AStructTypeTypeDeclaration node)
    {
        inAStructTypeTypeDeclaration(node);
        if(node.getStructureTypeDeclaration() != null)
        {
            node.getStructureTypeDeclaration().apply(this);
        }
        outAStructTypeTypeDeclaration(node);
    }

    public void inAStringTypeTypeDeclaration(AStringTypeTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStringTypeTypeDeclaration(AStringTypeTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeTypeDeclaration(AStringTypeTypeDeclaration node)
    {
        inAStringTypeTypeDeclaration(node);
        if(node.getStringTypeDeclaration() != null)
        {
            node.getStringTypeDeclaration().apply(this);
        }
        outAStringTypeTypeDeclaration(node);
    }

    public void inAArrayTypeDeclaration(AArrayTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAArrayTypeDeclaration(AArrayTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayTypeDeclaration(AArrayTypeDeclaration node)
    {
        inAArrayTypeDeclaration(node);
        if(node.getArraySpecInit() != null)
        {
            node.getArraySpecInit().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getArrayTypeName() != null)
        {
            node.getArrayTypeName().apply(this);
        }
        outAArrayTypeDeclaration(node);
    }

    public void inASingleElementTypeDeclaration(ASingleElementTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleElementTypeDeclaration(ASingleElementTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleElementTypeDeclaration(ASingleElementTypeDeclaration node)
    {
        inASingleElementTypeDeclaration(node);
        if(node.getSimpleTypeDeclaration() != null)
        {
            node.getSimpleTypeDeclaration().apply(this);
        }
        outASingleElementTypeDeclaration(node);
    }

    public void inASimpleTypeDeclaration(ASimpleTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outASimpleTypeDeclaration(ASimpleTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTypeDeclaration(ASimpleTypeDeclaration node)
    {
        inASimpleTypeDeclaration(node);
        if(node.getSimpleSpecInit() != null)
        {
            node.getSimpleSpecInit().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getSimpleTypeName() != null)
        {
            node.getSimpleTypeName().apply(this);
        }
        outASimpleTypeDeclaration(node);
    }

    public void inASimpleSpecInitialization(ASimpleSpecInitialization node)
    {
        defaultIn(node);
    }

    public void outASimpleSpecInitialization(ASimpleSpecInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSpecInitialization(ASimpleSpecInitialization node)
    {
        inASimpleSpecInitialization(node);
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        outASimpleSpecInitialization(node);
    }

    public void inASimpleSpecInit(ASimpleSpecInit node)
    {
        defaultIn(node);
    }

    public void outASimpleSpecInit(ASimpleSpecInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSpecInit(ASimpleSpecInit node)
    {
        inASimpleSpecInit(node);
        if(node.getSimpleSpecInitialization() != null)
        {
            node.getSimpleSpecInitialization().apply(this);
        }
        if(node.getSimpleSpecification() != null)
        {
            node.getSimpleSpecification().apply(this);
        }
        outASimpleSpecInit(node);
    }

    public void inAElementarySimpleSpecification(AElementarySimpleSpecification node)
    {
        defaultIn(node);
    }

    public void outAElementarySimpleSpecification(AElementarySimpleSpecification node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementarySimpleSpecification(AElementarySimpleSpecification node)
    {
        inAElementarySimpleSpecification(node);
        if(node.getElementaryTypeName() != null)
        {
            node.getElementaryTypeName().apply(this);
        }
        outAElementarySimpleSpecification(node);
    }

    public void inASubrange(ASubrange node)
    {
        defaultIn(node);
    }

    public void outASubrange(ASubrange node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubrange(ASubrange node)
    {
        inASubrange(node);
        if(node.getSnd() != null)
        {
            node.getSnd().apply(this);
        }
        if(node.getDotDot() != null)
        {
            node.getDotDot().apply(this);
        }
        if(node.getFst() != null)
        {
            node.getFst().apply(this);
        }
        outASubrange(node);
    }

    public void inASubrangeList(ASubrangeList node)
    {
        defaultIn(node);
    }

    public void outASubrangeList(ASubrangeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubrangeList(ASubrangeList node)
    {
        inASubrangeList(node);
        if(node.getSubrange() != null)
        {
            node.getSubrange().apply(this);
        }
        {
            List<PSubrangeListHead> copy = new ArrayList<PSubrangeListHead>(node.getSubrangeListHead());
            Collections.reverse(copy);
            for(PSubrangeListHead e : copy)
            {
                e.apply(this);
            }
        }
        outASubrangeList(node);
    }

    public void inASubrangeListHead(ASubrangeListHead node)
    {
        defaultIn(node);
    }

    public void outASubrangeListHead(ASubrangeListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubrangeListHead(ASubrangeListHead node)
    {
        inASubrangeListHead(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSubrange() != null)
        {
            node.getSubrange().apply(this);
        }
        outASubrangeListHead(node);
    }

    public void inAArraySpecInitialization(AArraySpecInitialization node)
    {
        defaultIn(node);
    }

    public void outAArraySpecInitialization(AArraySpecInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraySpecInitialization(AArraySpecInitialization node)
    {
        inAArraySpecInitialization(node);
        if(node.getArrayInitialization() != null)
        {
            node.getArrayInitialization().apply(this);
        }
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        outAArraySpecInitialization(node);
    }

    public void inAArraySpecInit(AArraySpecInit node)
    {
        defaultIn(node);
    }

    public void outAArraySpecInit(AArraySpecInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraySpecInit(AArraySpecInit node)
    {
        inAArraySpecInit(node);
        if(node.getArraySpecInitialization() != null)
        {
            node.getArraySpecInitialization().apply(this);
        }
        if(node.getArraySpecification() != null)
        {
            node.getArraySpecification().apply(this);
        }
        outAArraySpecInit(node);
    }

    public void inAInlineArraySpecification(AInlineArraySpecification node)
    {
        defaultIn(node);
    }

    public void outAInlineArraySpecification(AInlineArraySpecification node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInlineArraySpecification(AInlineArraySpecification node)
    {
        inAInlineArraySpecification(node);
        if(node.getNonGenericTypeName() != null)
        {
            node.getNonGenericTypeName().apply(this);
        }
        if(node.getOfToken() != null)
        {
            node.getOfToken().apply(this);
        }
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        if(node.getSubrangeList() != null)
        {
            node.getSubrangeList().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        if(node.getArrayToken() != null)
        {
            node.getArrayToken().apply(this);
        }
        outAInlineArraySpecification(node);
    }

    public void inAArrayInitialization(AArrayInitialization node)
    {
        defaultIn(node);
    }

    public void outAArrayInitialization(AArrayInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInitialization(AArrayInitialization node)
    {
        inAArrayInitialization(node);
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        if(node.getArrayInitialElementsList() != null)
        {
            node.getArrayInitialElementsList().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        outAArrayInitialization(node);
    }

    public void inAArrayInitialElementsList(AArrayInitialElementsList node)
    {
        defaultIn(node);
    }

    public void outAArrayInitialElementsList(AArrayInitialElementsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInitialElementsList(AArrayInitialElementsList node)
    {
        inAArrayInitialElementsList(node);
        if(node.getArrayInitialElements() != null)
        {
            node.getArrayInitialElements().apply(this);
        }
        {
            List<PArrayInitialElementsListHead> copy = new ArrayList<PArrayInitialElementsListHead>(node.getArrayInitialElementsListHead());
            Collections.reverse(copy);
            for(PArrayInitialElementsListHead e : copy)
            {
                e.apply(this);
            }
        }
        outAArrayInitialElementsList(node);
    }

    public void inAArrayInitialElementsListHead(AArrayInitialElementsListHead node)
    {
        defaultIn(node);
    }

    public void outAArrayInitialElementsListHead(AArrayInitialElementsListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInitialElementsListHead(AArrayInitialElementsListHead node)
    {
        inAArrayInitialElementsListHead(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArrayInitialElements() != null)
        {
            node.getArrayInitialElements().apply(this);
        }
        outAArrayInitialElementsListHead(node);
    }

    public void inASingleArrayInitialElements(ASingleArrayInitialElements node)
    {
        defaultIn(node);
    }

    public void outASingleArrayInitialElements(ASingleArrayInitialElements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleArrayInitialElements(ASingleArrayInitialElements node)
    {
        inASingleArrayInitialElements(node);
        if(node.getInitialElement() != null)
        {
            node.getInitialElement().apply(this);
        }
        outASingleArrayInitialElements(node);
    }

    public void inARepeatArrayInitialElements(ARepeatArrayInitialElements node)
    {
        defaultIn(node);
    }

    public void outARepeatArrayInitialElements(ARepeatArrayInitialElements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatArrayInitialElements(ARepeatArrayInitialElements node)
    {
        inARepeatArrayInitialElements(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getInitialElement() != null)
        {
            node.getInitialElement().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outARepeatArrayInitialElements(node);
    }

    public void inAConstantInitialElement(AConstantInitialElement node)
    {
        defaultIn(node);
    }

    public void outAConstantInitialElement(AConstantInitialElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantInitialElement(AConstantInitialElement node)
    {
        inAConstantInitialElement(node);
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        outAConstantInitialElement(node);
    }

    public void inAStructInitialElement(AStructInitialElement node)
    {
        defaultIn(node);
    }

    public void outAStructInitialElement(AStructInitialElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructInitialElement(AStructInitialElement node)
    {
        inAStructInitialElement(node);
        if(node.getStructureInitialization() != null)
        {
            node.getStructureInitialization().apply(this);
        }
        outAStructInitialElement(node);
    }

    public void inAArrayInitialElement(AArrayInitialElement node)
    {
        defaultIn(node);
    }

    public void outAArrayInitialElement(AArrayInitialElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInitialElement(AArrayInitialElement node)
    {
        inAArrayInitialElement(node);
        if(node.getArrayInitialization() != null)
        {
            node.getArrayInitialization().apply(this);
        }
        outAArrayInitialElement(node);
    }

    public void inAStructureTypeDeclaration(AStructureTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStructureTypeDeclaration(AStructureTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureTypeDeclaration(AStructureTypeDeclaration node)
    {
        inAStructureTypeDeclaration(node);
        if(node.getStructureSpecification() != null)
        {
            node.getStructureSpecification().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getStructureTypeName() != null)
        {
            node.getStructureTypeName().apply(this);
        }
        outAStructureTypeDeclaration(node);
    }

    public void inAStructureDeclarationStructureSpecification(AStructureDeclarationStructureSpecification node)
    {
        defaultIn(node);
    }

    public void outAStructureDeclarationStructureSpecification(AStructureDeclarationStructureSpecification node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureDeclarationStructureSpecification(AStructureDeclarationStructureSpecification node)
    {
        inAStructureDeclarationStructureSpecification(node);
        if(node.getStructureDeclaration() != null)
        {
            node.getStructureDeclaration().apply(this);
        }
        outAStructureDeclarationStructureSpecification(node);
    }

    public void inAInitializedStructureSpecification(AInitializedStructureSpecification node)
    {
        defaultIn(node);
    }

    public void outAInitializedStructureSpecification(AInitializedStructureSpecification node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializedStructureSpecification(AInitializedStructureSpecification node)
    {
        inAInitializedStructureSpecification(node);
        if(node.getInitializedStructure() != null)
        {
            node.getInitializedStructure().apply(this);
        }
        outAInitializedStructureSpecification(node);
    }

    public void inAInitializedStructureInitialization(AInitializedStructureInitialization node)
    {
        defaultIn(node);
    }

    public void outAInitializedStructureInitialization(AInitializedStructureInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializedStructureInitialization(AInitializedStructureInitialization node)
    {
        inAInitializedStructureInitialization(node);
        if(node.getStructureInitialization() != null)
        {
            node.getStructureInitialization().apply(this);
        }
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        outAInitializedStructureInitialization(node);
    }

    public void inAInitializedStructure(AInitializedStructure node)
    {
        defaultIn(node);
    }

    public void outAInitializedStructure(AInitializedStructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializedStructure(AInitializedStructure node)
    {
        inAInitializedStructure(node);
        if(node.getInitializedStructureInitialization() != null)
        {
            node.getInitializedStructureInitialization().apply(this);
        }
        if(node.getStructureTypeName() != null)
        {
            node.getStructureTypeName().apply(this);
        }
        outAInitializedStructure(node);
    }

    public void inAStructureDeclaration(AStructureDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStructureDeclaration(AStructureDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureDeclaration(AStructureDeclaration node)
    {
        inAStructureDeclaration(node);
        if(node.getEndStructToken() != null)
        {
            node.getEndStructToken().apply(this);
        }
        if(node.getStructureElementDeclarationList() != null)
        {
            node.getStructureElementDeclarationList().apply(this);
        }
        if(node.getStructToken() != null)
        {
            node.getStructToken().apply(this);
        }
        outAStructureDeclaration(node);
    }

    public void inAStructureElementDeclarationList(AStructureElementDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAStructureElementDeclarationList(AStructureElementDeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureElementDeclarationList(AStructureElementDeclarationList node)
    {
        inAStructureElementDeclarationList(node);
        if(node.getStructureElementDeclaration() != null)
        {
            node.getStructureElementDeclaration().apply(this);
        }
        {
            List<PStructureElementDeclarationListHead> copy = new ArrayList<PStructureElementDeclarationListHead>(node.getStructureElementDeclarationListHead());
            Collections.reverse(copy);
            for(PStructureElementDeclarationListHead e : copy)
            {
                e.apply(this);
            }
        }
        outAStructureElementDeclarationList(node);
    }

    public void inAStructureElementDeclarationListHead(AStructureElementDeclarationListHead node)
    {
        defaultIn(node);
    }

    public void outAStructureElementDeclarationListHead(AStructureElementDeclarationListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureElementDeclarationListHead(AStructureElementDeclarationListHead node)
    {
        inAStructureElementDeclarationListHead(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getStructureElementDeclaration() != null)
        {
            node.getStructureElementDeclaration().apply(this);
        }
        outAStructureElementDeclarationListHead(node);
    }

    public void inAStructureElementDeclaration(AStructureElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStructureElementDeclaration(AStructureElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureElementDeclaration(AStructureElementDeclaration node)
    {
        inAStructureElementDeclaration(node);
        if(node.getStructureElementInit() != null)
        {
            node.getStructureElementInit().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getStructureElementName() != null)
        {
            node.getStructureElementName().apply(this);
        }
        outAStructureElementDeclaration(node);
    }

    public void inASimpleStructureElementInit(ASimpleStructureElementInit node)
    {
        defaultIn(node);
    }

    public void outASimpleStructureElementInit(ASimpleStructureElementInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStructureElementInit(ASimpleStructureElementInit node)
    {
        inASimpleStructureElementInit(node);
        if(node.getSimpleSpecInit() != null)
        {
            node.getSimpleSpecInit().apply(this);
        }
        outASimpleStructureElementInit(node);
    }

    public void inAArrayStructureElementInit(AArrayStructureElementInit node)
    {
        defaultIn(node);
    }

    public void outAArrayStructureElementInit(AArrayStructureElementInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayStructureElementInit(AArrayStructureElementInit node)
    {
        inAArrayStructureElementInit(node);
        if(node.getArraySpecInit() != null)
        {
            node.getArraySpecInit().apply(this);
        }
        outAArrayStructureElementInit(node);
    }

    public void inAStructStructureElementInit(AStructStructureElementInit node)
    {
        defaultIn(node);
    }

    public void outAStructStructureElementInit(AStructStructureElementInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructStructureElementInit(AStructStructureElementInit node)
    {
        inAStructStructureElementInit(node);
        if(node.getInitializedStructure() != null)
        {
            node.getInitializedStructure().apply(this);
        }
        outAStructStructureElementInit(node);
    }

    public void inAStructureInitialization(AStructureInitialization node)
    {
        defaultIn(node);
    }

    public void outAStructureInitialization(AStructureInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureInitialization(AStructureInitialization node)
    {
        inAStructureInitialization(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getStructureElementInitializationList() != null)
        {
            node.getStructureElementInitializationList().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outAStructureInitialization(node);
    }

    public void inAStructureElementInitializationList(AStructureElementInitializationList node)
    {
        defaultIn(node);
    }

    public void outAStructureElementInitializationList(AStructureElementInitializationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureElementInitializationList(AStructureElementInitializationList node)
    {
        inAStructureElementInitializationList(node);
        if(node.getStructureElementInitialization() != null)
        {
            node.getStructureElementInitialization().apply(this);
        }
        {
            List<PStructureElementInitializationListHead> copy = new ArrayList<PStructureElementInitializationListHead>(node.getStructureElementInitializationListHead());
            Collections.reverse(copy);
            for(PStructureElementInitializationListHead e : copy)
            {
                e.apply(this);
            }
        }
        outAStructureElementInitializationList(node);
    }

    public void inAStructureElementInitializationListHead(AStructureElementInitializationListHead node)
    {
        defaultIn(node);
    }

    public void outAStructureElementInitializationListHead(AStructureElementInitializationListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureElementInitializationListHead(AStructureElementInitializationListHead node)
    {
        inAStructureElementInitializationListHead(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getStructureElementInitialization() != null)
        {
            node.getStructureElementInitialization().apply(this);
        }
        outAStructureElementInitializationListHead(node);
    }

    public void inAStructureElementInitialization(AStructureElementInitialization node)
    {
        defaultIn(node);
    }

    public void outAStructureElementInitialization(AStructureElementInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureElementInitialization(AStructureElementInitialization node)
    {
        inAStructureElementInitialization(node);
        if(node.getInitialElement() != null)
        {
            node.getInitialElement().apply(this);
        }
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        if(node.getStructureElementName() != null)
        {
            node.getStructureElementName().apply(this);
        }
        outAStructureElementInitialization(node);
    }

    public void inAStringStringWstringTypeName(AStringStringWstringTypeName node)
    {
        defaultIn(node);
    }

    public void outAStringStringWstringTypeName(AStringStringWstringTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringStringWstringTypeName(AStringStringWstringTypeName node)
    {
        inAStringStringWstringTypeName(node);
        if(node.getString1TypeName() != null)
        {
            node.getString1TypeName().apply(this);
        }
        outAStringStringWstringTypeName(node);
    }

    public void inAWstringStringWstringTypeName(AWstringStringWstringTypeName node)
    {
        defaultIn(node);
    }

    public void outAWstringStringWstringTypeName(AWstringStringWstringTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWstringStringWstringTypeName(AWstringStringWstringTypeName node)
    {
        inAWstringStringWstringTypeName(node);
        if(node.getWstringTypeName() != null)
        {
            node.getWstringTypeName().apply(this);
        }
        outAWstringStringWstringTypeName(node);
    }

    public void inAStringTypeDeclarationLenSpec(AStringTypeDeclarationLenSpec node)
    {
        defaultIn(node);
    }

    public void outAStringTypeDeclarationLenSpec(AStringTypeDeclarationLenSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeDeclarationLenSpec(AStringTypeDeclarationLenSpec node)
    {
        inAStringTypeDeclarationLenSpec(node);
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        if(node.getLen() != null)
        {
            node.getLen().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        outAStringTypeDeclarationLenSpec(node);
    }

    public void inAStringTypeDeclarationInitialization(AStringTypeDeclarationInitialization node)
    {
        defaultIn(node);
    }

    public void outAStringTypeDeclarationInitialization(AStringTypeDeclarationInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeDeclarationInitialization(AStringTypeDeclarationInitialization node)
    {
        inAStringTypeDeclarationInitialization(node);
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        outAStringTypeDeclarationInitialization(node);
    }

    public void inALenStringTypeDeclaration(ALenStringTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outALenStringTypeDeclaration(ALenStringTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALenStringTypeDeclaration(ALenStringTypeDeclaration node)
    {
        inALenStringTypeDeclaration(node);
        if(node.getStringTypeDeclarationInitialization() != null)
        {
            node.getStringTypeDeclarationInitialization().apply(this);
        }
        if(node.getStringTypeDeclarationLenSpec() != null)
        {
            node.getStringTypeDeclarationLenSpec().apply(this);
        }
        if(node.getStringWstringTypeName() != null)
        {
            node.getStringWstringTypeName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getStringTypeName() != null)
        {
            node.getStringTypeName().apply(this);
        }
        outALenStringTypeDeclaration(node);
    }

    public void inADirectVariableVariable(ADirectVariableVariable node)
    {
        defaultIn(node);
    }

    public void outADirectVariableVariable(ADirectVariableVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirectVariableVariable(ADirectVariableVariable node)
    {
        inADirectVariableVariable(node);
        if(node.getDirectVariable() != null)
        {
            node.getDirectVariable().apply(this);
        }
        outADirectVariableVariable(node);
    }

    public void inASymbolicVariableVariable(ASymbolicVariableVariable node)
    {
        defaultIn(node);
    }

    public void outASymbolicVariableVariable(ASymbolicVariableVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolicVariableVariable(ASymbolicVariableVariable node)
    {
        inASymbolicVariableVariable(node);
        if(node.getSymbolicVariable() != null)
        {
            node.getSymbolicVariable().apply(this);
        }
        outASymbolicVariableVariable(node);
    }

    public void inADirectVariableVariableComplex(ADirectVariableVariableComplex node)
    {
        defaultIn(node);
    }

    public void outADirectVariableVariableComplex(ADirectVariableVariableComplex node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirectVariableVariableComplex(ADirectVariableVariableComplex node)
    {
        inADirectVariableVariableComplex(node);
        if(node.getDirectVariable() != null)
        {
            node.getDirectVariable().apply(this);
        }
        outADirectVariableVariableComplex(node);
    }

    public void inASymbolicVariableVariableComplex(ASymbolicVariableVariableComplex node)
    {
        defaultIn(node);
    }

    public void outASymbolicVariableVariableComplex(ASymbolicVariableVariableComplex node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolicVariableVariableComplex(ASymbolicVariableVariableComplex node)
    {
        inASymbolicVariableVariableComplex(node);
        if(node.getSymbolicVariableComplex() != null)
        {
            node.getSymbolicVariableComplex().apply(this);
        }
        outASymbolicVariableVariableComplex(node);
    }

    public void inAVariableSymbolicVariable(AVariableSymbolicVariable node)
    {
        defaultIn(node);
    }

    public void outAVariableSymbolicVariable(AVariableSymbolicVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableSymbolicVariable(AVariableSymbolicVariable node)
    {
        inAVariableSymbolicVariable(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVariableSymbolicVariable(node);
    }

    public void inAArraySymbolicVariable(AArraySymbolicVariable node)
    {
        defaultIn(node);
    }

    public void outAArraySymbolicVariable(AArraySymbolicVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraySymbolicVariable(AArraySymbolicVariable node)
    {
        inAArraySymbolicVariable(node);
        if(node.getSubscriptList() != null)
        {
            node.getSubscriptList().apply(this);
        }
        if(node.getSymbolicVariable() != null)
        {
            node.getSymbolicVariable().apply(this);
        }
        outAArraySymbolicVariable(node);
    }

    public void inAStructSymbolicVariable(AStructSymbolicVariable node)
    {
        defaultIn(node);
    }

    public void outAStructSymbolicVariable(AStructSymbolicVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructSymbolicVariable(AStructSymbolicVariable node)
    {
        inAStructSymbolicVariable(node);
        if(node.getFieldSelector() != null)
        {
            node.getFieldSelector().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getSymbolicVariable() != null)
        {
            node.getSymbolicVariable().apply(this);
        }
        outAStructSymbolicVariable(node);
    }

    public void inAArraySymbolicVariableComplex(AArraySymbolicVariableComplex node)
    {
        defaultIn(node);
    }

    public void outAArraySymbolicVariableComplex(AArraySymbolicVariableComplex node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraySymbolicVariableComplex(AArraySymbolicVariableComplex node)
    {
        inAArraySymbolicVariableComplex(node);
        if(node.getSubscriptList() != null)
        {
            node.getSubscriptList().apply(this);
        }
        if(node.getSymbolicVariable() != null)
        {
            node.getSymbolicVariable().apply(this);
        }
        outAArraySymbolicVariableComplex(node);
    }

    public void inAStructSymbolicVariableComplex(AStructSymbolicVariableComplex node)
    {
        defaultIn(node);
    }

    public void outAStructSymbolicVariableComplex(AStructSymbolicVariableComplex node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructSymbolicVariableComplex(AStructSymbolicVariableComplex node)
    {
        inAStructSymbolicVariableComplex(node);
        if(node.getFieldSelector() != null)
        {
            node.getFieldSelector().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getSymbolicVariable() != null)
        {
            node.getSymbolicVariable().apply(this);
        }
        outAStructSymbolicVariableComplex(node);
    }

    public void inADirectVariable(ADirectVariable node)
    {
        defaultIn(node);
    }

    public void outADirectVariable(ADirectVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirectVariable(ADirectVariable node)
    {
        inADirectVariable(node);
        {
            List<PPrefixedInteger> copy = new ArrayList<PPrefixedInteger>(node.getPrefixedInteger());
            Collections.reverse(copy);
            for(PPrefixedInteger e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getSizePrefix() != null)
        {
            node.getSizePrefix().apply(this);
        }
        if(node.getLocationPrefix() != null)
        {
            node.getLocationPrefix().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        outADirectVariable(node);
    }

    public void inAPrefixedInteger(APrefixedInteger node)
    {
        defaultIn(node);
    }

    public void outAPrefixedInteger(APrefixedInteger node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrefixedInteger(APrefixedInteger node)
    {
        inAPrefixedInteger(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAPrefixedInteger(node);
    }

    public void inASubscriptList(ASubscriptList node)
    {
        defaultIn(node);
    }

    public void outASubscriptList(ASubscriptList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubscriptList(ASubscriptList node)
    {
        inASubscriptList(node);
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        if(node.getSubscript() != null)
        {
            node.getSubscript().apply(this);
        }
        {
            List<PSubscriptListHead> copy = new ArrayList<PSubscriptListHead>(node.getSubscriptListHead());
            Collections.reverse(copy);
            for(PSubscriptListHead e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        outASubscriptList(node);
    }

    public void inASubscriptListHead(ASubscriptListHead node)
    {
        defaultIn(node);
    }

    public void outASubscriptListHead(ASubscriptListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubscriptListHead(ASubscriptListHead node)
    {
        inASubscriptListHead(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSubscript() != null)
        {
            node.getSubscript().apply(this);
        }
        outASubscriptListHead(node);
    }

    public void inASubscript(ASubscript node)
    {
        defaultIn(node);
    }

    public void outASubscript(ASubscript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubscript(ASubscript node)
    {
        inASubscript(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASubscript(node);
    }

    public void inAFieldSelector(AFieldSelector node)
    {
        defaultIn(node);
    }

    public void outAFieldSelector(AFieldSelector node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldSelector(AFieldSelector node)
    {
        inAFieldSelector(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFieldSelector(node);
    }

    public void inAInputDeclarations(AInputDeclarations node)
    {
        defaultIn(node);
    }

    public void outAInputDeclarations(AInputDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputDeclarations(AInputDeclarations node)
    {
        inAInputDeclarations(node);
        if(node.getEndVarToken() != null)
        {
            node.getEndVarToken().apply(this);
        }
        if(node.getVarInitDecls() != null)
        {
            node.getVarInitDecls().apply(this);
        }
        if(node.getRetain() != null)
        {
            node.getRetain().apply(this);
        }
        if(node.getVarInputToken() != null)
        {
            node.getVarInputToken().apply(this);
        }
        outAInputDeclarations(node);
    }

    public void inAOutputDeclarations(AOutputDeclarations node)
    {
        defaultIn(node);
    }

    public void outAOutputDeclarations(AOutputDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutputDeclarations(AOutputDeclarations node)
    {
        inAOutputDeclarations(node);
        if(node.getEndVarToken() != null)
        {
            node.getEndVarToken().apply(this);
        }
        if(node.getVarInitDecls() != null)
        {
            node.getVarInitDecls().apply(this);
        }
        if(node.getRetain() != null)
        {
            node.getRetain().apply(this);
        }
        if(node.getVarOutputToken() != null)
        {
            node.getVarOutputToken().apply(this);
        }
        outAOutputDeclarations(node);
    }

    public void inAInputOutputDeclarations(AInputOutputDeclarations node)
    {
        defaultIn(node);
    }

    public void outAInputOutputDeclarations(AInputOutputDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputOutputDeclarations(AInputOutputDeclarations node)
    {
        inAInputOutputDeclarations(node);
        if(node.getEndVarToken() != null)
        {
            node.getEndVarToken().apply(this);
        }
        if(node.getVarInitDecls() != null)
        {
            node.getVarInitDecls().apply(this);
        }
        if(node.getVarInOutToken() != null)
        {
            node.getVarInOutToken().apply(this);
        }
        outAInputOutputDeclarations(node);
    }

    public void inAVarDeclarations(AVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAVarDeclarations(AVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclarations(AVarDeclarations node)
    {
        inAVarDeclarations(node);
        if(node.getEndVarToken() != null)
        {
            node.getEndVarToken().apply(this);
        }
        if(node.getVarInitDecls() != null)
        {
            node.getVarInitDecls().apply(this);
        }
        if(node.getConstantTokenOrRetain() != null)
        {
            node.getConstantTokenOrRetain().apply(this);
        }
        if(node.getVarToken() != null)
        {
            node.getVarToken().apply(this);
        }
        outAVarDeclarations(node);
    }

    public void inAExternalVarDeclarations(AExternalVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAExternalVarDeclarations(AExternalVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExternalVarDeclarations(AExternalVarDeclarations node)
    {
        inAExternalVarDeclarations(node);
        if(node.getEndVarToken() != null)
        {
            node.getEndVarToken().apply(this);
        }
        if(node.getVarInitDecls() != null)
        {
            node.getVarInitDecls().apply(this);
        }
        if(node.getConstantToken() != null)
        {
            node.getConstantToken().apply(this);
        }
        if(node.getVarExternalToken() != null)
        {
            node.getVarExternalToken().apply(this);
        }
        outAExternalVarDeclarations(node);
    }

    public void inATempVarDeclarations(ATempVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outATempVarDeclarations(ATempVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATempVarDeclarations(ATempVarDeclarations node)
    {
        inATempVarDeclarations(node);
        if(node.getEndVarToken() != null)
        {
            node.getEndVarToken().apply(this);
        }
        if(node.getVarInitDecls() != null)
        {
            node.getVarInitDecls().apply(this);
        }
        if(node.getVarTempToken() != null)
        {
            node.getVarTempToken().apply(this);
        }
        outATempVarDeclarations(node);
    }

    public void inAVarInitDecls(AVarInitDecls node)
    {
        defaultIn(node);
    }

    public void outAVarInitDecls(AVarInitDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarInitDecls(AVarInitDecls node)
    {
        inAVarInitDecls(node);
        if(node.getVarInitDecl() != null)
        {
            node.getVarInitDecl().apply(this);
        }
        {
            List<PVarInitDeclsHead> copy = new ArrayList<PVarInitDeclsHead>(node.getVarInitDeclsHead());
            Collections.reverse(copy);
            for(PVarInitDeclsHead e : copy)
            {
                e.apply(this);
            }
        }
        outAVarInitDecls(node);
    }

    public void inAVarInitDeclsHead(AVarInitDeclsHead node)
    {
        defaultIn(node);
    }

    public void outAVarInitDeclsHead(AVarInitDeclsHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarInitDeclsHead(AVarInitDeclsHead node)
    {
        inAVarInitDeclsHead(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVarInitDecl() != null)
        {
            node.getVarInitDecl().apply(this);
        }
        outAVarInitDeclsHead(node);
    }

    public void inAVarInitDecl(AVarInitDecl node)
    {
        defaultIn(node);
    }

    public void outAVarInitDecl(AVarInitDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarInitDecl(AVarInitDecl node)
    {
        inAVarInitDecl(node);
        if(node.getVarInitDeclSpec() != null)
        {
            node.getVarInitDeclSpec().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIncomplLocation() != null)
        {
            node.getIncomplLocation().apply(this);
        }
        if(node.getVar1List() != null)
        {
            node.getVar1List().apply(this);
        }
        outAVarInitDecl(node);
    }

    public void inAStructFbNameVarInitDeclSpec(AStructFbNameVarInitDeclSpec node)
    {
        defaultIn(node);
    }

    public void outAStructFbNameVarInitDeclSpec(AStructFbNameVarInitDeclSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructFbNameVarInitDeclSpec(AStructFbNameVarInitDeclSpec node)
    {
        inAStructFbNameVarInitDeclSpec(node);
        if(node.getInitializedStructureInitialization() != null)
        {
            node.getInitializedStructureInitialization().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAStructFbNameVarInitDeclSpec(node);
    }

    public void inAVarVarInitDeclSpec(AVarVarInitDeclSpec node)
    {
        defaultIn(node);
    }

    public void outAVarVarInitDeclSpec(AVarVarInitDeclSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVarInitDeclSpec(AVarVarInitDeclSpec node)
    {
        inAVarVarInitDeclSpec(node);
        if(node.getVar1SpecInit() != null)
        {
            node.getVar1SpecInit().apply(this);
        }
        outAVarVarInitDeclSpec(node);
    }

    public void inAArrayVarVarInitDeclSpec(AArrayVarVarInitDeclSpec node)
    {
        defaultIn(node);
    }

    public void outAArrayVarVarInitDeclSpec(AArrayVarVarInitDeclSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVarVarInitDeclSpec(AArrayVarVarInitDeclSpec node)
    {
        inAArrayVarVarInitDeclSpec(node);
        if(node.getArraySpecInit() != null)
        {
            node.getArraySpecInit().apply(this);
        }
        outAArrayVarVarInitDeclSpec(node);
    }

    public void inASStringVarInitDeclSpec(ASStringVarInitDeclSpec node)
    {
        defaultIn(node);
    }

    public void outASStringVarInitDeclSpec(ASStringVarInitDeclSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASStringVarInitDeclSpec(ASStringVarInitDeclSpec node)
    {
        inASStringVarInitDeclSpec(node);
        if(node.getSingleByteStringSpec() != null)
        {
            node.getSingleByteStringSpec().apply(this);
        }
        outASStringVarInitDeclSpec(node);
    }

    public void inADStringVarInitDeclSpec(ADStringVarInitDeclSpec node)
    {
        defaultIn(node);
    }

    public void outADStringVarInitDeclSpec(ADStringVarInitDeclSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADStringVarInitDeclSpec(ADStringVarInitDeclSpec node)
    {
        inADStringVarInitDeclSpec(node);
        if(node.getDoubleByteStringSpec() != null)
        {
            node.getDoubleByteStringSpec().apply(this);
        }
        outADStringVarInitDeclSpec(node);
    }

    public void inAVar1List(AVar1List node)
    {
        defaultIn(node);
    }

    public void outAVar1List(AVar1List node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVar1List(AVar1List node)
    {
        inAVar1List(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PVar1ListHead> copy = new ArrayList<PVar1ListHead>(node.getVar1ListHead());
            Collections.reverse(copy);
            for(PVar1ListHead e : copy)
            {
                e.apply(this);
            }
        }
        outAVar1List(node);
    }

    public void inAVar1ListHead(AVar1ListHead node)
    {
        defaultIn(node);
    }

    public void outAVar1ListHead(AVar1ListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVar1ListHead(AVar1ListHead node)
    {
        inAVar1ListHead(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVar1ListHead(node);
    }

    public void inASimpleVar1SpecInit(ASimpleVar1SpecInit node)
    {
        defaultIn(node);
    }

    public void outASimpleVar1SpecInit(ASimpleVar1SpecInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleVar1SpecInit(ASimpleVar1SpecInit node)
    {
        inASimpleVar1SpecInit(node);
        if(node.getSimpleSpecInit() != null)
        {
            node.getSimpleSpecInit().apply(this);
        }
        outASimpleVar1SpecInit(node);
    }

    public void inAConstantConstantTokenOrRetain(AConstantConstantTokenOrRetain node)
    {
        defaultIn(node);
    }

    public void outAConstantConstantTokenOrRetain(AConstantConstantTokenOrRetain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantConstantTokenOrRetain(AConstantConstantTokenOrRetain node)
    {
        inAConstantConstantTokenOrRetain(node);
        if(node.getConstantToken() != null)
        {
            node.getConstantToken().apply(this);
        }
        outAConstantConstantTokenOrRetain(node);
    }

    public void inARetainConstantTokenOrRetain(ARetainConstantTokenOrRetain node)
    {
        defaultIn(node);
    }

    public void outARetainConstantTokenOrRetain(ARetainConstantTokenOrRetain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetainConstantTokenOrRetain(ARetainConstantTokenOrRetain node)
    {
        inARetainConstantTokenOrRetain(node);
        if(node.getRetain() != null)
        {
            node.getRetain().apply(this);
        }
        outARetainConstantTokenOrRetain(node);
    }

    public void inALocatedVarDeclarations(ALocatedVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outALocatedVarDeclarations(ALocatedVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocatedVarDeclarations(ALocatedVarDeclarations node)
    {
        inALocatedVarDeclarations(node);
        if(node.getEndVarToken() != null)
        {
            node.getEndVarToken().apply(this);
        }
        if(node.getLocatedVarDeclList() != null)
        {
            node.getLocatedVarDeclList().apply(this);
        }
        if(node.getConstantTokenOrRetain() != null)
        {
            node.getConstantTokenOrRetain().apply(this);
        }
        if(node.getVarToken() != null)
        {
            node.getVarToken().apply(this);
        }
        outALocatedVarDeclarations(node);
    }

    public void inALocatedVarDeclList(ALocatedVarDeclList node)
    {
        defaultIn(node);
    }

    public void outALocatedVarDeclList(ALocatedVarDeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocatedVarDeclList(ALocatedVarDeclList node)
    {
        inALocatedVarDeclList(node);
        if(node.getLocatedVarDecl() != null)
        {
            node.getLocatedVarDecl().apply(this);
        }
        {
            List<PLocatedVarDeclListHead> copy = new ArrayList<PLocatedVarDeclListHead>(node.getLocatedVarDeclListHead());
            Collections.reverse(copy);
            for(PLocatedVarDeclListHead e : copy)
            {
                e.apply(this);
            }
        }
        outALocatedVarDeclList(node);
    }

    public void inALocatedVarDeclListHead(ALocatedVarDeclListHead node)
    {
        defaultIn(node);
    }

    public void outALocatedVarDeclListHead(ALocatedVarDeclListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocatedVarDeclListHead(ALocatedVarDeclListHead node)
    {
        inALocatedVarDeclListHead(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getLocatedVarDecl() != null)
        {
            node.getLocatedVarDecl().apply(this);
        }
        outALocatedVarDeclListHead(node);
    }

    public void inALocatedVarDecl(ALocatedVarDecl node)
    {
        defaultIn(node);
    }

    public void outALocatedVarDecl(ALocatedVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocatedVarDecl(ALocatedVarDecl node)
    {
        inALocatedVarDecl(node);
        if(node.getLocatedVarSpecInit() != null)
        {
            node.getLocatedVarSpecInit().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getLocation() != null)
        {
            node.getLocation().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALocatedVarDecl(node);
    }

    public void inASimpleLocatedVarSpecInit(ASimpleLocatedVarSpecInit node)
    {
        defaultIn(node);
    }

    public void outASimpleLocatedVarSpecInit(ASimpleLocatedVarSpecInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleLocatedVarSpecInit(ASimpleLocatedVarSpecInit node)
    {
        inASimpleLocatedVarSpecInit(node);
        if(node.getSimpleSpecInit() != null)
        {
            node.getSimpleSpecInit().apply(this);
        }
        outASimpleLocatedVarSpecInit(node);
    }

    public void inAArrayLocatedVarSpecInit(AArrayLocatedVarSpecInit node)
    {
        defaultIn(node);
    }

    public void outAArrayLocatedVarSpecInit(AArrayLocatedVarSpecInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayLocatedVarSpecInit(AArrayLocatedVarSpecInit node)
    {
        inAArrayLocatedVarSpecInit(node);
        if(node.getArraySpecInit() != null)
        {
            node.getArraySpecInit().apply(this);
        }
        outAArrayLocatedVarSpecInit(node);
    }

    public void inAStructLocatedVarSpecInit(AStructLocatedVarSpecInit node)
    {
        defaultIn(node);
    }

    public void outAStructLocatedVarSpecInit(AStructLocatedVarSpecInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructLocatedVarSpecInit(AStructLocatedVarSpecInit node)
    {
        inAStructLocatedVarSpecInit(node);
        if(node.getInitializedStructure() != null)
        {
            node.getInitializedStructure().apply(this);
        }
        outAStructLocatedVarSpecInit(node);
    }

    public void inASstringLocatedVarSpecInit(ASstringLocatedVarSpecInit node)
    {
        defaultIn(node);
    }

    public void outASstringLocatedVarSpecInit(ASstringLocatedVarSpecInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASstringLocatedVarSpecInit(ASstringLocatedVarSpecInit node)
    {
        inASstringLocatedVarSpecInit(node);
        if(node.getSingleByteStringSpec() != null)
        {
            node.getSingleByteStringSpec().apply(this);
        }
        outASstringLocatedVarSpecInit(node);
    }

    public void inADstringLocatedVarSpecInit(ADstringLocatedVarSpecInit node)
    {
        defaultIn(node);
    }

    public void outADstringLocatedVarSpecInit(ADstringLocatedVarSpecInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADstringLocatedVarSpecInit(ADstringLocatedVarSpecInit node)
    {
        inADstringLocatedVarSpecInit(node);
        if(node.getDoubleByteStringSpec() != null)
        {
            node.getDoubleByteStringSpec().apply(this);
        }
        outADstringLocatedVarSpecInit(node);
    }

    public void inALocation(ALocation node)
    {
        defaultIn(node);
    }

    public void outALocation(ALocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocation(ALocation node)
    {
        inALocation(node);
        if(node.getDirectVariable() != null)
        {
            node.getDirectVariable().apply(this);
        }
        if(node.getAtToken() != null)
        {
            node.getAtToken().apply(this);
        }
        outALocation(node);
    }

    public void inABrackInteger(ABrackInteger node)
    {
        defaultIn(node);
    }

    public void outABrackInteger(ABrackInteger node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrackInteger(ABrackInteger node)
    {
        inABrackInteger(node);
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        outABrackInteger(node);
    }

    public void inASingleByteStringSpecInitialization(ASingleByteStringSpecInitialization node)
    {
        defaultIn(node);
    }

    public void outASingleByteStringSpecInitialization(ASingleByteStringSpecInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleByteStringSpecInitialization(ASingleByteStringSpecInitialization node)
    {
        inASingleByteStringSpecInitialization(node);
        if(node.getSingleByteCharacterString() != null)
        {
            node.getSingleByteCharacterString().apply(this);
        }
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        outASingleByteStringSpecInitialization(node);
    }

    public void inASingleByteStringSpec(ASingleByteStringSpec node)
    {
        defaultIn(node);
    }

    public void outASingleByteStringSpec(ASingleByteStringSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleByteStringSpec(ASingleByteStringSpec node)
    {
        inASingleByteStringSpec(node);
        if(node.getSingleByteStringSpecInitialization() != null)
        {
            node.getSingleByteStringSpecInitialization().apply(this);
        }
        if(node.getBrackInteger() != null)
        {
            node.getBrackInteger().apply(this);
        }
        if(node.getString1TypeName() != null)
        {
            node.getString1TypeName().apply(this);
        }
        outASingleByteStringSpec(node);
    }

    public void inADoubleByteStringSpecInitialization(ADoubleByteStringSpecInitialization node)
    {
        defaultIn(node);
    }

    public void outADoubleByteStringSpecInitialization(ADoubleByteStringSpecInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleByteStringSpecInitialization(ADoubleByteStringSpecInitialization node)
    {
        inADoubleByteStringSpecInitialization(node);
        if(node.getDoubleByteCharacterString() != null)
        {
            node.getDoubleByteCharacterString().apply(this);
        }
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        outADoubleByteStringSpecInitialization(node);
    }

    public void inADoubleByteStringSpec(ADoubleByteStringSpec node)
    {
        defaultIn(node);
    }

    public void outADoubleByteStringSpec(ADoubleByteStringSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleByteStringSpec(ADoubleByteStringSpec node)
    {
        inADoubleByteStringSpec(node);
        if(node.getDoubleByteStringSpecInitialization() != null)
        {
            node.getDoubleByteStringSpecInitialization().apply(this);
        }
        if(node.getBrackInteger() != null)
        {
            node.getBrackInteger().apply(this);
        }
        if(node.getWstringTypeName() != null)
        {
            node.getWstringTypeName().apply(this);
        }
        outADoubleByteStringSpec(node);
    }

    public void inAFunctionName(AFunctionName node)
    {
        defaultIn(node);
    }

    public void outAFunctionName(AFunctionName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionName(AFunctionName node)
    {
        inAFunctionName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFunctionName(node);
    }

    public void inAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        inAFunctionDeclaration(node);
        if(node.getEndFunctionToken() != null)
        {
            node.getEndFunctionToken().apply(this);
        }
        if(node.getFunctionBody() != null)
        {
            node.getFunctionBody().apply(this);
        }
        {
            List<PFunctionVarDeclaration> copy = new ArrayList<PFunctionVarDeclaration>(node.getFunctionVarDeclaration());
            Collections.reverse(copy);
            for(PFunctionVarDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getReturnTypeName() != null)
        {
            node.getReturnTypeName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFunctionName() != null)
        {
            node.getFunctionName().apply(this);
        }
        if(node.getFunctionToken() != null)
        {
            node.getFunctionToken().apply(this);
        }
        outAFunctionDeclaration(node);
    }

    public void inAElementaryReturnTypeName(AElementaryReturnTypeName node)
    {
        defaultIn(node);
    }

    public void outAElementaryReturnTypeName(AElementaryReturnTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementaryReturnTypeName(AElementaryReturnTypeName node)
    {
        inAElementaryReturnTypeName(node);
        if(node.getElementaryTypeName() != null)
        {
            node.getElementaryTypeName().apply(this);
        }
        outAElementaryReturnTypeName(node);
    }

    public void inADerivedReturnTypeName(ADerivedReturnTypeName node)
    {
        defaultIn(node);
    }

    public void outADerivedReturnTypeName(ADerivedReturnTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADerivedReturnTypeName(ADerivedReturnTypeName node)
    {
        inADerivedReturnTypeName(node);
        if(node.getDerivedTypeName() != null)
        {
            node.getDerivedTypeName().apply(this);
        }
        outADerivedReturnTypeName(node);
    }

    public void inAIoFunctionVarDeclaration(AIoFunctionVarDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIoFunctionVarDeclaration(AIoFunctionVarDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIoFunctionVarDeclaration(AIoFunctionVarDeclaration node)
    {
        inAIoFunctionVarDeclaration(node);
        if(node.getIoVarDeclarations() != null)
        {
            node.getIoVarDeclarations().apply(this);
        }
        outAIoFunctionVarDeclaration(node);
    }

    public void inAFunctionFunctionVarDeclaration(AFunctionFunctionVarDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionFunctionVarDeclaration(AFunctionFunctionVarDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionFunctionVarDeclaration(AFunctionFunctionVarDeclaration node)
    {
        inAFunctionFunctionVarDeclaration(node);
        if(node.getVarDeclarations() != null)
        {
            node.getVarDeclarations().apply(this);
        }
        outAFunctionFunctionVarDeclaration(node);
    }

    public void inAInputIoVarDeclarations(AInputIoVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAInputIoVarDeclarations(AInputIoVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputIoVarDeclarations(AInputIoVarDeclarations node)
    {
        inAInputIoVarDeclarations(node);
        if(node.getInputDeclarations() != null)
        {
            node.getInputDeclarations().apply(this);
        }
        outAInputIoVarDeclarations(node);
    }

    public void inAOuputIoVarDeclarations(AOuputIoVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAOuputIoVarDeclarations(AOuputIoVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuputIoVarDeclarations(AOuputIoVarDeclarations node)
    {
        inAOuputIoVarDeclarations(node);
        if(node.getOutputDeclarations() != null)
        {
            node.getOutputDeclarations().apply(this);
        }
        outAOuputIoVarDeclarations(node);
    }

    public void inAIoIoVarDeclarations(AIoIoVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAIoIoVarDeclarations(AIoIoVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIoIoVarDeclarations(AIoIoVarDeclarations node)
    {
        inAIoIoVarDeclarations(node);
        if(node.getInputOutputDeclarations() != null)
        {
            node.getInputOutputDeclarations().apply(this);
        }
        outAIoIoVarDeclarations(node);
    }

    public void inAFunctionBody(AFunctionBody node)
    {
        defaultIn(node);
    }

    public void outAFunctionBody(AFunctionBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionBody(AFunctionBody node)
    {
        inAFunctionBody(node);
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        outAFunctionBody(node);
    }

    public void inAStandardFunctionBlockTypeName(AStandardFunctionBlockTypeName node)
    {
        defaultIn(node);
    }

    public void outAStandardFunctionBlockTypeName(AStandardFunctionBlockTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStandardFunctionBlockTypeName(AStandardFunctionBlockTypeName node)
    {
        inAStandardFunctionBlockTypeName(node);
        if(node.getStandardFunctionBlockName() != null)
        {
            node.getStandardFunctionBlockName().apply(this);
        }
        outAStandardFunctionBlockTypeName(node);
    }

    public void inADerivedFunctionBlockTypeName(ADerivedFunctionBlockTypeName node)
    {
        defaultIn(node);
    }

    public void outADerivedFunctionBlockTypeName(ADerivedFunctionBlockTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADerivedFunctionBlockTypeName(ADerivedFunctionBlockTypeName node)
    {
        inADerivedFunctionBlockTypeName(node);
        if(node.getDerivedFunctionBlockName() != null)
        {
            node.getDerivedFunctionBlockName().apply(this);
        }
        outADerivedFunctionBlockTypeName(node);
    }

    public void inADerivedFunctionBlockName(ADerivedFunctionBlockName node)
    {
        defaultIn(node);
    }

    public void outADerivedFunctionBlockName(ADerivedFunctionBlockName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADerivedFunctionBlockName(ADerivedFunctionBlockName node)
    {
        inADerivedFunctionBlockName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outADerivedFunctionBlockName(node);
    }

    public void inAFunctionBlockDeclaration(AFunctionBlockDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionBlockDeclaration(AFunctionBlockDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionBlockDeclaration(AFunctionBlockDeclaration node)
    {
        inAFunctionBlockDeclaration(node);
        if(node.getEndFunctionBlockToken() != null)
        {
            node.getEndFunctionBlockToken().apply(this);
        }
        if(node.getFunctionBlockBody() != null)
        {
            node.getFunctionBlockBody().apply(this);
        }
        {
            List<PFunctionBlockVarDeclarations> copy = new ArrayList<PFunctionBlockVarDeclarations>(node.getFunctionBlockVarDeclarations());
            Collections.reverse(copy);
            for(PFunctionBlockVarDeclarations e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDerivedFunctionBlockName() != null)
        {
            node.getDerivedFunctionBlockName().apply(this);
        }
        if(node.getFunctionBlockToken() != null)
        {
            node.getFunctionBlockToken().apply(this);
        }
        outAFunctionBlockDeclaration(node);
    }

    public void inAIoFunctionBlockVarDeclarations(AIoFunctionBlockVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAIoFunctionBlockVarDeclarations(AIoFunctionBlockVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIoFunctionBlockVarDeclarations(AIoFunctionBlockVarDeclarations node)
    {
        inAIoFunctionBlockVarDeclarations(node);
        if(node.getIoVarDeclarations() != null)
        {
            node.getIoVarDeclarations().apply(this);
        }
        outAIoFunctionBlockVarDeclarations(node);
    }

    public void inAOtherFunctionBlockVarDeclarations(AOtherFunctionBlockVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAOtherFunctionBlockVarDeclarations(AOtherFunctionBlockVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherFunctionBlockVarDeclarations(AOtherFunctionBlockVarDeclarations node)
    {
        inAOtherFunctionBlockVarDeclarations(node);
        if(node.getOtherVarDeclarations() != null)
        {
            node.getOtherVarDeclarations().apply(this);
        }
        outAOtherFunctionBlockVarDeclarations(node);
    }

    public void inAExternalOtherVarDeclarations(AExternalOtherVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAExternalOtherVarDeclarations(AExternalOtherVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExternalOtherVarDeclarations(AExternalOtherVarDeclarations node)
    {
        inAExternalOtherVarDeclarations(node);
        if(node.getExternalVarDeclarations() != null)
        {
            node.getExternalVarDeclarations().apply(this);
        }
        outAExternalOtherVarDeclarations(node);
    }

    public void inAVarOtherVarDeclarations(AVarOtherVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAVarOtherVarDeclarations(AVarOtherVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarOtherVarDeclarations(AVarOtherVarDeclarations node)
    {
        inAVarOtherVarDeclarations(node);
        if(node.getVarDeclarations() != null)
        {
            node.getVarDeclarations().apply(this);
        }
        outAVarOtherVarDeclarations(node);
    }

    public void inATempOtherVarDeclarations(ATempOtherVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outATempOtherVarDeclarations(ATempOtherVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATempOtherVarDeclarations(ATempOtherVarDeclarations node)
    {
        inATempOtherVarDeclarations(node);
        if(node.getTempVarDeclarations() != null)
        {
            node.getTempVarDeclarations().apply(this);
        }
        outATempOtherVarDeclarations(node);
    }

    public void inAFunctionBlockBody(AFunctionBlockBody node)
    {
        defaultIn(node);
    }

    public void outAFunctionBlockBody(AFunctionBlockBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionBlockBody(AFunctionBlockBody node)
    {
        inAFunctionBlockBody(node);
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        outAFunctionBlockBody(node);
    }

    public void inAProgramTypeName(AProgramTypeName node)
    {
        defaultIn(node);
    }

    public void outAProgramTypeName(AProgramTypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramTypeName(AProgramTypeName node)
    {
        inAProgramTypeName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAProgramTypeName(node);
    }

    public void inAAccessName(AAccessName node)
    {
        defaultIn(node);
    }

    public void outAAccessName(AAccessName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAccessName(AAccessName node)
    {
        inAAccessName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAccessName(node);
    }

    public void inAProgramDeclaration(AProgramDeclaration node)
    {
        defaultIn(node);
    }

    public void outAProgramDeclaration(AProgramDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramDeclaration(AProgramDeclaration node)
    {
        inAProgramDeclaration(node);
        if(node.getEndProgramToken() != null)
        {
            node.getEndProgramToken().apply(this);
        }
        if(node.getFunctionBlockBody() != null)
        {
            node.getFunctionBlockBody().apply(this);
        }
        {
            List<PProgramVarDeclarations> copy = new ArrayList<PProgramVarDeclarations>(node.getProgramVarDeclarations());
            Collections.reverse(copy);
            for(PProgramVarDeclarations e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getProgramTypeName() != null)
        {
            node.getProgramTypeName().apply(this);
        }
        if(node.getProgramToken() != null)
        {
            node.getProgramToken().apply(this);
        }
        outAProgramDeclaration(node);
    }

    public void inAIoProgramVarDeclarations(AIoProgramVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAIoProgramVarDeclarations(AIoProgramVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIoProgramVarDeclarations(AIoProgramVarDeclarations node)
    {
        inAIoProgramVarDeclarations(node);
        if(node.getIoVarDeclarations() != null)
        {
            node.getIoVarDeclarations().apply(this);
        }
        outAIoProgramVarDeclarations(node);
    }

    public void inAOtherProgramVarDeclarations(AOtherProgramVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAOtherProgramVarDeclarations(AOtherProgramVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherProgramVarDeclarations(AOtherProgramVarDeclarations node)
    {
        inAOtherProgramVarDeclarations(node);
        if(node.getOtherVarDeclarations() != null)
        {
            node.getOtherVarDeclarations().apply(this);
        }
        outAOtherProgramVarDeclarations(node);
    }

    public void inALocatedProgramVarDeclarations(ALocatedProgramVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outALocatedProgramVarDeclarations(ALocatedProgramVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocatedProgramVarDeclarations(ALocatedProgramVarDeclarations node)
    {
        inALocatedProgramVarDeclarations(node);
        if(node.getLocatedVarDeclarations() != null)
        {
            node.getLocatedVarDeclarations().apply(this);
        }
        outALocatedProgramVarDeclarations(node);
    }

    public void inAAccessProgramVarDeclarations(AAccessProgramVarDeclarations node)
    {
        defaultIn(node);
    }

    public void outAAccessProgramVarDeclarations(AAccessProgramVarDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAccessProgramVarDeclarations(AAccessProgramVarDeclarations node)
    {
        inAAccessProgramVarDeclarations(node);
        if(node.getProgramAccessDecls() != null)
        {
            node.getProgramAccessDecls().apply(this);
        }
        outAAccessProgramVarDeclarations(node);
    }

    public void inAProgramAccessDecls(AProgramAccessDecls node)
    {
        defaultIn(node);
    }

    public void outAProgramAccessDecls(AProgramAccessDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramAccessDecls(AProgramAccessDecls node)
    {
        inAProgramAccessDecls(node);
        if(node.getEndVarToken() != null)
        {
            node.getEndVarToken().apply(this);
        }
        if(node.getProgramAccessDeclList() != null)
        {
            node.getProgramAccessDeclList().apply(this);
        }
        if(node.getVarAccessToken() != null)
        {
            node.getVarAccessToken().apply(this);
        }
        outAProgramAccessDecls(node);
    }

    public void inAProgramAccessDeclList(AProgramAccessDeclList node)
    {
        defaultIn(node);
    }

    public void outAProgramAccessDeclList(AProgramAccessDeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramAccessDeclList(AProgramAccessDeclList node)
    {
        inAProgramAccessDeclList(node);
        if(node.getProgramAccessDecl() != null)
        {
            node.getProgramAccessDecl().apply(this);
        }
        {
            List<PProgramAccessDeclListHead> copy = new ArrayList<PProgramAccessDeclListHead>(node.getProgramAccessDeclListHead());
            Collections.reverse(copy);
            for(PProgramAccessDeclListHead e : copy)
            {
                e.apply(this);
            }
        }
        outAProgramAccessDeclList(node);
    }

    public void inAProgramAccessDeclListHead(AProgramAccessDeclListHead node)
    {
        defaultIn(node);
    }

    public void outAProgramAccessDeclListHead(AProgramAccessDeclListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramAccessDeclListHead(AProgramAccessDeclListHead node)
    {
        inAProgramAccessDeclListHead(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getProgramAccessDecl() != null)
        {
            node.getProgramAccessDecl().apply(this);
        }
        outAProgramAccessDeclListHead(node);
    }

    public void inAProgramAccessDecl(AProgramAccessDecl node)
    {
        defaultIn(node);
    }

    public void outAProgramAccessDecl(AProgramAccessDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramAccessDecl(AProgramAccessDecl node)
    {
        inAProgramAccessDecl(node);
        if(node.getDirection() != null)
        {
            node.getDirection().apply(this);
        }
        if(node.getNonGenericTypeName() != null)
        {
            node.getNonGenericTypeName().apply(this);
        }
        if(node.getSnd() != null)
        {
            node.getSnd().apply(this);
        }
        if(node.getSymbolicVariable() != null)
        {
            node.getSymbolicVariable().apply(this);
        }
        if(node.getFst() != null)
        {
            node.getFst().apply(this);
        }
        if(node.getAccessName() != null)
        {
            node.getAccessName().apply(this);
        }
        outAProgramAccessDecl(node);
    }

    public void inAOrExpression(AOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExpression(AOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpression(AOrExpression node)
    {
        inAOrExpression(node);
        if(node.getXorExpression() != null)
        {
            node.getXorExpression().apply(this);
        }
        if(node.getOrToken() != null)
        {
            node.getOrToken().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAOrExpression(node);
    }

    public void inAUnaryExpressionExpression(AUnaryExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryExpressionExpression(AUnaryExpressionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryExpressionExpression(AUnaryExpressionExpression node)
    {
        inAUnaryExpressionExpression(node);
        if(node.getXorExpression() != null)
        {
            node.getXorExpression().apply(this);
        }
        outAUnaryExpressionExpression(node);
    }

    public void inAXorXorExpression(AXorXorExpression node)
    {
        defaultIn(node);
    }

    public void outAXorXorExpression(AXorXorExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorXorExpression(AXorXorExpression node)
    {
        inAXorXorExpression(node);
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        if(node.getXorToken() != null)
        {
            node.getXorToken().apply(this);
        }
        if(node.getXorExpression() != null)
        {
            node.getXorExpression().apply(this);
        }
        outAXorXorExpression(node);
    }

    public void inAUnaryXorExpression(AUnaryXorExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryXorExpression(AUnaryXorExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryXorExpression(AUnaryXorExpression node)
    {
        inAUnaryXorExpression(node);
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        outAUnaryXorExpression(node);
    }

    public void inAAndAndExpression(AAndAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndAndExpression(AAndAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAndExpression(AAndAndExpression node)
    {
        inAAndAndExpression(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getAndTokenFull() != null)
        {
            node.getAndTokenFull().apply(this);
        }
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        outAAndAndExpression(node);
    }

    public void inAUnaryAndExpression(AUnaryAndExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryAndExpression(AUnaryAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryAndExpression(AUnaryAndExpression node)
    {
        inAUnaryAndExpression(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAUnaryAndExpression(node);
    }

    public void inAComparisonComparison(AComparisonComparison node)
    {
        defaultIn(node);
    }

    public void outAComparisonComparison(AComparisonComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisonComparison(AComparisonComparison node)
    {
        inAComparisonComparison(node);
        if(node.getEquExpression() != null)
        {
            node.getEquExpression().apply(this);
        }
        if(node.getEqTokenFull() != null)
        {
            node.getEqTokenFull().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAComparisonComparison(node);
    }

    public void inAUnaryComparison(AUnaryComparison node)
    {
        defaultIn(node);
    }

    public void outAUnaryComparison(AUnaryComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryComparison(AUnaryComparison node)
    {
        inAUnaryComparison(node);
        if(node.getEquExpression() != null)
        {
            node.getEquExpression().apply(this);
        }
        outAUnaryComparison(node);
    }

    public void inAEquEquExpression(AEquEquExpression node)
    {
        defaultIn(node);
    }

    public void outAEquEquExpression(AEquEquExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquEquExpression(AEquEquExpression node)
    {
        inAEquEquExpression(node);
        if(node.getAddExpression() != null)
        {
            node.getAddExpression().apply(this);
        }
        if(node.getComparisonOperator() != null)
        {
            node.getComparisonOperator().apply(this);
        }
        if(node.getEquExpression() != null)
        {
            node.getEquExpression().apply(this);
        }
        outAEquEquExpression(node);
    }

    public void inAUnaryEquExpression(AUnaryEquExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryEquExpression(AUnaryEquExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryEquExpression(AUnaryEquExpression node)
    {
        inAUnaryEquExpression(node);
        if(node.getAddExpression() != null)
        {
            node.getAddExpression().apply(this);
        }
        outAUnaryEquExpression(node);
    }

    public void inAAddAddExpression(AAddAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddAddExpression(AAddAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddAddExpression(AAddAddExpression node)
    {
        inAAddAddExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getAddOperator() != null)
        {
            node.getAddOperator().apply(this);
        }
        if(node.getAddExpression() != null)
        {
            node.getAddExpression().apply(this);
        }
        outAAddAddExpression(node);
    }

    public void inAUnaryAddExpression(AUnaryAddExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryAddExpression(AUnaryAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryAddExpression(AUnaryAddExpression node)
    {
        inAUnaryAddExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAUnaryAddExpression(node);
    }

    public void inAAddOperator(AAddOperator node)
    {
        defaultIn(node);
    }

    public void outAAddOperator(AAddOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddOperator(AAddOperator node)
    {
        inAAddOperator(node);
        if(node.getSign() != null)
        {
            node.getSign().apply(this);
        }
        outAAddOperator(node);
    }

    public void inAMulTerm(AMulTerm node)
    {
        defaultIn(node);
    }

    public void outAMulTerm(AMulTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulTerm(AMulTerm node)
    {
        inAMulTerm(node);
        if(node.getPowerExpression() != null)
        {
            node.getPowerExpression().apply(this);
        }
        if(node.getMulOperator() != null)
        {
            node.getMulOperator().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMulTerm(node);
    }

    public void inATermTerm(ATermTerm node)
    {
        defaultIn(node);
    }

    public void outATermTerm(ATermTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermTerm(ATermTerm node)
    {
        inATermTerm(node);
        if(node.getPowerExpression() != null)
        {
            node.getPowerExpression().apply(this);
        }
        outATermTerm(node);
    }

    public void inAPowerPowerExpression(APowerPowerExpression node)
    {
        defaultIn(node);
    }

    public void outAPowerPowerExpression(APowerPowerExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPowerPowerExpression(APowerPowerExpression node)
    {
        inAPowerPowerExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getPowerToken() != null)
        {
            node.getPowerToken().apply(this);
        }
        if(node.getPowerExpression() != null)
        {
            node.getPowerExpression().apply(this);
        }
        outAPowerPowerExpression(node);
    }

    public void inAUnaryPowerExpression(AUnaryPowerExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryPowerExpression(AUnaryPowerExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryPowerExpression(AUnaryPowerExpression node)
    {
        inAUnaryPowerExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAUnaryPowerExpression(node);
    }

    public void inAUnaryExpression(AUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryExpression(AUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryExpression(AUnaryExpression node)
    {
        inAUnaryExpression(node);
        if(node.getPrimaryExpression() != null)
        {
            node.getPrimaryExpression().apply(this);
        }
        {
            List<TUnaryOperator> copy = new ArrayList<TUnaryOperator>(node.getUnaryOperator());
            Collections.reverse(copy);
            for(TUnaryOperator e : copy)
            {
                e.apply(this);
            }
        }
        outAUnaryExpression(node);
    }

    public void inAConstantPrimaryExpression(AConstantPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAConstantPrimaryExpression(AConstantPrimaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantPrimaryExpression(AConstantPrimaryExpression node)
    {
        inAConstantPrimaryExpression(node);
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        outAConstantPrimaryExpression(node);
    }

    public void inAVariablePrimaryExpression(AVariablePrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAVariablePrimaryExpression(AVariablePrimaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariablePrimaryExpression(AVariablePrimaryExpression node)
    {
        inAVariablePrimaryExpression(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVariablePrimaryExpression(node);
    }

    public void inAParenPrimaryExpression(AParenPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAParenPrimaryExpression(AParenPrimaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenPrimaryExpression(AParenPrimaryExpression node)
    {
        inAParenPrimaryExpression(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outAParenPrimaryExpression(node);
    }

    public void inACallPrimaryExpression(ACallPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outACallPrimaryExpression(ACallPrimaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallPrimaryExpression(ACallPrimaryExpression node)
    {
        inACallPrimaryExpression(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getParamAssignmentList() != null)
        {
            node.getParamAssignmentList().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getFunctionName() != null)
        {
            node.getFunctionName().apply(this);
        }
        outACallPrimaryExpression(node);
    }

    public void inAParamAssignmentList(AParamAssignmentList node)
    {
        defaultIn(node);
    }

    public void outAParamAssignmentList(AParamAssignmentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamAssignmentList(AParamAssignmentList node)
    {
        inAParamAssignmentList(node);
        if(node.getParamAssignment() != null)
        {
            node.getParamAssignment().apply(this);
        }
        {
            List<PParamAssignmentListHead> copy = new ArrayList<PParamAssignmentListHead>(node.getParamAssignmentListHead());
            Collections.reverse(copy);
            for(PParamAssignmentListHead e : copy)
            {
                e.apply(this);
            }
        }
        outAParamAssignmentList(node);
    }

    public void inAParamAssignmentListHead(AParamAssignmentListHead node)
    {
        defaultIn(node);
    }

    public void outAParamAssignmentListHead(AParamAssignmentListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamAssignmentListHead(AParamAssignmentListHead node)
    {
        inAParamAssignmentListHead(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParamAssignment() != null)
        {
            node.getParamAssignment().apply(this);
        }
        outAParamAssignmentListHead(node);
    }

    public void inAStatementList(AStatementList node)
    {
        defaultIn(node);
    }

    public void outAStatementList(AStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementList(AStatementList node)
    {
        inAStatementList(node);
        {
            List<PStatementListHead> copy = new ArrayList<PStatementListHead>(node.getStatementListHead());
            Collections.reverse(copy);
            for(PStatementListHead e : copy)
            {
                e.apply(this);
            }
        }
        outAStatementList(node);
    }

    public void inAStatementListHead(AStatementListHead node)
    {
        defaultIn(node);
    }

    public void outAStatementListHead(AStatementListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementListHead(AStatementListHead node)
    {
        inAStatementListHead(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementListHead(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inACallStatement(ACallStatement node)
    {
        defaultIn(node);
    }

    public void outACallStatement(ACallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallStatement(ACallStatement node)
    {
        inACallStatement(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getParamAssignmentList() != null)
        {
            node.getParamAssignmentList().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACallStatement(node);
    }

    public void inAAssign2Statement(AAssign2Statement node)
    {
        defaultIn(node);
    }

    public void outAAssign2Statement(AAssign2Statement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssign2Statement(AAssign2Statement node)
    {
        inAAssign2Statement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        if(node.getVariableComplex() != null)
        {
            node.getVariableComplex().apply(this);
        }
        outAAssign2Statement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getReturnToken() != null)
        {
            node.getReturnToken().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inASelectionStatement(ASelectionStatement node)
    {
        defaultIn(node);
    }

    public void outASelectionStatement(ASelectionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectionStatement(ASelectionStatement node)
    {
        inASelectionStatement(node);
        if(node.getSelectionStatement() != null)
        {
            node.getSelectionStatement().apply(this);
        }
        outASelectionStatement(node);
    }

    public void inAIterStatement(AIterStatement node)
    {
        defaultIn(node);
    }

    public void outAIterStatement(AIterStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterStatement(AIterStatement node)
    {
        inAIterStatement(node);
        if(node.getIterationStatement() != null)
        {
            node.getIterationStatement().apply(this);
        }
        outAIterStatement(node);
    }

    public void inAParamAssignmentLvalue(AParamAssignmentLvalue node)
    {
        defaultIn(node);
    }

    public void outAParamAssignmentLvalue(AParamAssignmentLvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamAssignmentLvalue(AParamAssignmentLvalue node)
    {
        inAParamAssignmentLvalue(node);
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAParamAssignmentLvalue(node);
    }

    public void inAExprParamAssignment(AExprParamAssignment node)
    {
        defaultIn(node);
    }

    public void outAExprParamAssignment(AExprParamAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprParamAssignment(AExprParamAssignment node)
    {
        inAExprParamAssignment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getParamAssignmentLvalue() != null)
        {
            node.getParamAssignmentLvalue().apply(this);
        }
        outAExprParamAssignment(node);
    }

    public void inAArrowParamAssignment(AArrowParamAssignment node)
    {
        defaultIn(node);
    }

    public void outAArrowParamAssignment(AArrowParamAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrowParamAssignment(AArrowParamAssignment node)
    {
        inAArrowParamAssignment(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getArrowToken() != null)
        {
            node.getArrowToken().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNotToken() != null)
        {
            node.getNotToken().apply(this);
        }
        outAArrowParamAssignment(node);
    }

    public void inAIfSelectionStatement(AIfSelectionStatement node)
    {
        defaultIn(node);
    }

    public void outAIfSelectionStatement(AIfSelectionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfSelectionStatement(AIfSelectionStatement node)
    {
        inAIfSelectionStatement(node);
        if(node.getIfStatement() != null)
        {
            node.getIfStatement().apply(this);
        }
        outAIfSelectionStatement(node);
    }

    public void inACaseSelectionStatement(ACaseSelectionStatement node)
    {
        defaultIn(node);
    }

    public void outACaseSelectionStatement(ACaseSelectionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseSelectionStatement(ACaseSelectionStatement node)
    {
        inACaseSelectionStatement(node);
        if(node.getCaseStatement() != null)
        {
            node.getCaseStatement().apply(this);
        }
        outACaseSelectionStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getEndIfToken() != null)
        {
            node.getEndIfToken().apply(this);
        }
        {
            List<PElseStatement> copy = new ArrayList<PElseStatement>(node.getElseStatement());
            Collections.reverse(copy);
            for(PElseStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PElseifStatement> copy = new ArrayList<PElseifStatement>(node.getElseifStatement());
            Collections.reverse(copy);
            for(PElseifStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getThenToken() != null)
        {
            node.getThenToken().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIfToken() != null)
        {
            node.getIfToken().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAElseifStatement(AElseifStatement node)
    {
        defaultIn(node);
    }

    public void outAElseifStatement(AElseifStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseifStatement(AElseifStatement node)
    {
        inAElseifStatement(node);
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getThenToken() != null)
        {
            node.getThenToken().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getElseIfToken() != null)
        {
            node.getElseIfToken().apply(this);
        }
        outAElseifStatement(node);
    }

    public void inAElseStatement(AElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseStatement(AElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        inAElseStatement(node);
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getElseToken() != null)
        {
            node.getElseToken().apply(this);
        }
        outAElseStatement(node);
    }

    public void inACaseStatementElseClause(ACaseStatementElseClause node)
    {
        defaultIn(node);
    }

    public void outACaseStatementElseClause(ACaseStatementElseClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseStatementElseClause(ACaseStatementElseClause node)
    {
        inACaseStatementElseClause(node);
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getElseToken() != null)
        {
            node.getElseToken().apply(this);
        }
        outACaseStatementElseClause(node);
    }

    public void inACaseStatement(ACaseStatement node)
    {
        defaultIn(node);
    }

    public void outACaseStatement(ACaseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseStatement(ACaseStatement node)
    {
        inACaseStatement(node);
        if(node.getEndCaseToken() != null)
        {
            node.getEndCaseToken().apply(this);
        }
        if(node.getCaseStatementElseClause() != null)
        {
            node.getCaseStatementElseClause().apply(this);
        }
        {
            List<PCaseElement> copy = new ArrayList<PCaseElement>(node.getCaseElement());
            Collections.reverse(copy);
            for(PCaseElement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOfToken() != null)
        {
            node.getOfToken().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getCaseToken() != null)
        {
            node.getCaseToken().apply(this);
        }
        outACaseStatement(node);
    }

    public void inACaseElement(ACaseElement node)
    {
        defaultIn(node);
    }

    public void outACaseElement(ACaseElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseElement(ACaseElement node)
    {
        inACaseElement(node);
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getCaseList() != null)
        {
            node.getCaseList().apply(this);
        }
        outACaseElement(node);
    }

    public void inACaseList(ACaseList node)
    {
        defaultIn(node);
    }

    public void outACaseList(ACaseList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseList(ACaseList node)
    {
        inACaseList(node);
        if(node.getCaseListElement() != null)
        {
            node.getCaseListElement().apply(this);
        }
        {
            List<PCaseListHead> copy = new ArrayList<PCaseListHead>(node.getCaseListHead());
            Collections.reverse(copy);
            for(PCaseListHead e : copy)
            {
                e.apply(this);
            }
        }
        outACaseList(node);
    }

    public void inACaseListHead(ACaseListHead node)
    {
        defaultIn(node);
    }

    public void outACaseListHead(ACaseListHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseListHead(ACaseListHead node)
    {
        inACaseListHead(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getCaseListElement() != null)
        {
            node.getCaseListElement().apply(this);
        }
        outACaseListHead(node);
    }

    public void inASubrangeCaseListElement(ASubrangeCaseListElement node)
    {
        defaultIn(node);
    }

    public void outASubrangeCaseListElement(ASubrangeCaseListElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubrangeCaseListElement(ASubrangeCaseListElement node)
    {
        inASubrangeCaseListElement(node);
        if(node.getSubrange() != null)
        {
            node.getSubrange().apply(this);
        }
        outASubrangeCaseListElement(node);
    }

    public void inAIntegerCaseListElement(AIntegerCaseListElement node)
    {
        defaultIn(node);
    }

    public void outAIntegerCaseListElement(AIntegerCaseListElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerCaseListElement(AIntegerCaseListElement node)
    {
        inAIntegerCaseListElement(node);
        if(node.getSignedInteger() != null)
        {
            node.getSignedInteger().apply(this);
        }
        outAIntegerCaseListElement(node);
    }

    public void inAForIterationStatement(AForIterationStatement node)
    {
        defaultIn(node);
    }

    public void outAForIterationStatement(AForIterationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForIterationStatement(AForIterationStatement node)
    {
        inAForIterationStatement(node);
        if(node.getForStatement() != null)
        {
            node.getForStatement().apply(this);
        }
        outAForIterationStatement(node);
    }

    public void inAWhileIterationStatement(AWhileIterationStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileIterationStatement(AWhileIterationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileIterationStatement(AWhileIterationStatement node)
    {
        inAWhileIterationStatement(node);
        if(node.getWhileStatement() != null)
        {
            node.getWhileStatement().apply(this);
        }
        outAWhileIterationStatement(node);
    }

    public void inARepeatIterationStatement(ARepeatIterationStatement node)
    {
        defaultIn(node);
    }

    public void outARepeatIterationStatement(ARepeatIterationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatIterationStatement(ARepeatIterationStatement node)
    {
        inARepeatIterationStatement(node);
        if(node.getRepeatStatement() != null)
        {
            node.getRepeatStatement().apply(this);
        }
        outARepeatIterationStatement(node);
    }

    public void inAExitIterationStatement(AExitIterationStatement node)
    {
        defaultIn(node);
    }

    public void outAExitIterationStatement(AExitIterationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitIterationStatement(AExitIterationStatement node)
    {
        inAExitIterationStatement(node);
        if(node.getExitStatement() != null)
        {
            node.getExitStatement().apply(this);
        }
        outAExitIterationStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getEndForToken() != null)
        {
            node.getEndForToken().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getDoToken() != null)
        {
            node.getDoToken().apply(this);
        }
        if(node.getForList() != null)
        {
            node.getForList().apply(this);
        }
        if(node.getColonEq() != null)
        {
            node.getColonEq().apply(this);
        }
        if(node.getControlVariable() != null)
        {
            node.getControlVariable().apply(this);
        }
        if(node.getForToken() != null)
        {
            node.getForToken().apply(this);
        }
        outAForStatement(node);
    }

    public void inAControlVariable(AControlVariable node)
    {
        defaultIn(node);
    }

    public void outAControlVariable(AControlVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAControlVariable(AControlVariable node)
    {
        inAControlVariable(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAControlVariable(node);
    }

    public void inAForListByClause(AForListByClause node)
    {
        defaultIn(node);
    }

    public void outAForListByClause(AForListByClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForListByClause(AForListByClause node)
    {
        inAForListByClause(node);
        if(node.getBy() != null)
        {
            node.getBy().apply(this);
        }
        if(node.getByToken() != null)
        {
            node.getByToken().apply(this);
        }
        outAForListByClause(node);
    }

    public void inAForList(AForList node)
    {
        defaultIn(node);
    }

    public void outAForList(AForList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForList(AForList node)
    {
        inAForList(node);
        if(node.getForListByClause() != null)
        {
            node.getForListByClause().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getToToken() != null)
        {
            node.getToToken().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        outAForList(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getEndWhileToken() != null)
        {
            node.getEndWhileToken().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getDoToken() != null)
        {
            node.getDoToken().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getWhileToken() != null)
        {
            node.getWhileToken().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inARepeatStatement(ARepeatStatement node)
    {
        defaultIn(node);
    }

    public void outARepeatStatement(ARepeatStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatStatement(ARepeatStatement node)
    {
        inARepeatStatement(node);
        if(node.getEndRepeatToken() != null)
        {
            node.getEndRepeatToken().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getUntilToken() != null)
        {
            node.getUntilToken().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getRepeatToken() != null)
        {
            node.getRepeatToken().apply(this);
        }
        outARepeatStatement(node);
    }

    public void inAExitStatement(AExitStatement node)
    {
        defaultIn(node);
    }

    public void outAExitStatement(AExitStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitStatement(AExitStatement node)
    {
        inAExitStatement(node);
        if(node.getExitToken() != null)
        {
            node.getExitToken().apply(this);
        }
        outAExitStatement(node);
    }
}
